diff --git a/.gitignore b/.gitignore
index dd65112..669f3bf 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,7 +1,10 @@
+*.iml
 *.o
 *.so
 *.py[cod]
 
+test.ngc
+
 man/pycam.1
 man/pycam.1.html
 docs/release-notes.md
@@ -12,6 +15,8 @@ eggs
 *.egg-info
 .svn
 .coverage
+.idea
+.ropeproject/
 
 .DS_Store*
 ehthumbs.db
@@ -19,7 +24,17 @@ Icon?
 Thumbs.db
 
 *~
-.*.swp
+.*.sw?
+
+man/pycam.1
 
 # Generated mkdocs files go into the site directory
 site/
+
+# debian packaging
+debian/debhelper-build-stamp
+debian/files
+debian/pycam/
+debian/pycam.debhelper.log
+debian/pycam.*.debhelper
+debian/pycam.substvars
diff --git a/.travis.yml b/.travis.yml
index b1d2dac..1dfe3d6 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,21 +1,32 @@
+---
 dist: trusty
 sudo: required
 
 language: python
 
 python:
-  - "2.6"
-  - "2.7"
+  - "3.5"
+
+git:
+  depth: 10000
 
 before_install: ./scripts/travis-install-build-deps.sh
 
 install: true
 
 script:
-  - export BRANCH=$(if [ "${TRAVIS_PULL_REQUEST}" == "false" ]; then echo ${TRAVIS_BRANCH}; else echo ${TRAVIS_BRANCH}-${TRAVIS_PULL_REQUEST_BRANCH}-pr${TRAVIS_PULL_REQUEST}; fi)
-  - git branch -D ${BRANCH} || true
-  - git checkout -b ${BRANCH} ${TRAVIS_COMMIT}
+  - export BRANCH=$(if [ "${TRAVIS_PULL_REQUEST}" = "false" ];
+    then echo "${TRAVIS_BRANCH}";
+    else printf "%s-%s-pr%d" "$TRAVIS_BRANCH" "$TRAVIS_PULL_REQUEST_BRANCH"
+                "$TRAVIS_PULL_REQUEST"; fi)
+  - git branch -D "${BRANCH}" || true
+  - git checkout -b "${BRANCH}" "${TRAVIS_COMMIT}"
   - export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+  - debian/rules prep-source
   - make test
-  - python setup.py sdist
-  - ./scripts/pycam --help
+  - ./setup.py sdist
+  - pycam/run_gui.py --help
+  - pycam/run_gui.py --version
+  - pycam/run_cli.py --help
+  - pycam/run_cli.py --version
+  - dpkg-buildpackage -us -uc
diff --git a/COPYING.TXT b/COPYING.TXT
index 94a9ed0..e600086 100644
--- a/COPYING.TXT
+++ b/COPYING.TXT
@@ -1,7 +1,7 @@
                     GNU GENERAL PUBLIC LICENSE
                        Version 3, 29 June 2007
 
- Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
+ Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
  Everyone is permitted to copy and distribute verbatim copies
  of this license document, but changing it is not allowed.
 
@@ -645,7 +645,7 @@ the "copyright" line and a pointer to where the full notice is found.
     GNU General Public License for more details.
 
     You should have received a copy of the GNU General Public License
-    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 
 Also add information on how to contact you by electronic and paper mail.
 
@@ -664,11 +664,11 @@ might be different; for a GUI interface, you would use an "about box".
   You should also get your employer (if you work as a programmer) or school,
 if any, to sign a "copyright disclaimer" for the program, if necessary.
 For more information on this, and how to apply and follow the GNU GPL, see
-<http://www.gnu.org/licenses/>.
+<https://www.gnu.org/licenses/>.
 
   The GNU General Public License does not permit incorporating your program
 into proprietary programs.  If your program is a subroutine library, you
 may consider it more useful to permit linking proprietary applications with
 the library.  If this is what you want to do, use the GNU Lesser General
 Public License instead of this License.  But first, please read
-<http://www.gnu.org/philosophy/why-not-lgpl.html>.
+<https://www.gnu.org/philosophy/why-not-lgpl.html>.
diff --git a/Changelog b/Changelog
index eaa624d..1cfdbb2 100644
--- a/Changelog
+++ b/Changelog
@@ -1,4 +1,12 @@
-Version 0.6.3 - 2018-05-01
+Version 0.7.0 - 2017-12-??
+ * switch to Python3 (removing support for Python2)
+ * switch to GTK3 (from GTK2)
+ * switch OpenGL widget from GtkGLext to GLArea (part of GKT3)
+ * switch to new internal data handling
+ * enable loading and saving the workspace state (was disabled during v0.6.x)
+ * non-interactive batch processing allows scripted toolpath operations
+
+Version 0.6.3 - ???
  * Fix import of DXF files with full-circle holes (github #112).
  * Fix import of DXF files with bezier curves (github #116).
  * Fix import of DXF with closed LWPOLYLINE.
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
index 0000000..e44669f
--- /dev/null
+++ b/Dockerfile
@@ -0,0 +1,13 @@
+FROM debian:9
+
+WORKDIR /root/pycam
+
+COPY . .
+
+RUN apt-get update && apt-get install -y python3 \
+    python3-gi \
+    python3-opengl \
+    python3-yaml \
+    gir1.2-gtk-3.0
+
+CMD [ "pycam/run_gui.py" ]
diff --git a/INSTALL.TXT b/INSTALL.TXT
deleted file mode 100644
index a74244f..0000000
--- a/INSTALL.TXT
+++ /dev/null
@@ -1,75 +0,0 @@
-Dependencies of the graphical interface:
-========================================
-
-Windows:
---------
-
-Please note that there are two ways of using PyCAM on Windows:
-1) use the standalone executable (experimental - but it does not require further dependencies)
-    http://sourceforge.net/projects/pycam/files/
-
-2) the installer package - it requires the following dependencies:
-
-BEWARE: this currently (as of 2010/10/20) does not work due to a problem with
-the gtk-installer. I guess, it will be fixed in the next weeks. Until then you
-should use the standalone executable for Windows (see above).
-
-    Python 2.6:
-                http://www.python.org/download/releases/2.6.6/
-                Please note that some of the GTK packages below require
-                specifically v2.6 (thus v2.7 will not help).
-
-    GTK v2.16 and GtkGlExt and PyGTK:
-                http://www.bonifazi.eu/appunti/ (Blog)
-                http://www.bonifazi.eu/appunti/pygtk_windows_installer.exe
-
-
-Notes:
- - you will probably need to add some directories manually to your search PATH setting:
-        C:\Programs\Common Files\GTK\bin;C:\Programs\Python25;C:\Programs\GtkGLExt\1.0\bin
-   (this is just an example - adjust it to your specific installation paths)
- - run a python console and check if the following commands work:
-        import gtk
-        import gtk.gtkgl
-        import OpenGL
-
-
-Unix:
------
-
-Install the following packages with your package manager:
-    python
-    python-gtk2
-    python-opengl
-    python-gtkglext1
-    python-setproctitle (optional)
-
-On a debian or ubuntu system you would just type the following in a root console:
-    apt-get install python-gtkglext1 python-opengl python-gtk2 python-setproctitle
-Please note that you need to enable the "universe" repository in Ubuntu.
-
-BEWARE: Debian "Lenny" and Ubuntu "Jaunty" (maybe also Dapper/Hardy/Intrepid)
-contain older "python-opengl" packages, that expose problems with PyCAM.
-You need to add "Squeeze" (for Debian) or "Karmic/Lucid" (for Ubuntu) to your
-package repository list and run the following:
-    apt-get update
-    apt-get install python-opengl
-Afterwards you can remove the new package repository again.
-
-Users of Python 2.5 with multiple CPU cores may want to install the package
-"python-processing". This enables multi-threading for Python before v2.6.
-
-
-MacOS
------
-
-Please read http://sourceforge.net/projects/pycam/forums/forum/860183/topic/3800091
-for the issues involved with installing PyCAM's dependencies via MacPorts.
-(thanks to lilalinux for this description)
-
-
-Minimal requirements for non-GUI mode
-=====================================
-If you plan to use PyCAM only in batch mode (without a graphical user
-interface), then you just need to install Python.
-See the manpage (man pycam) or the output of "pycam --help" for further defails.
diff --git a/INSTALL.md b/INSTALL.md
new file mode 100644
index 0000000..057b5da
--- /dev/null
+++ b/INSTALL.md
@@ -0,0 +1,103 @@
+# Dependencies of the graphical interface
+
+## Windows
+
+`TODO:` Current Windows installation instructions
+
+## Unix
+
+### Installation
+
+Install the following packages with your package manager:
+
+```
+python3
+python3-gi
+python3-opengl
+python3-yaml
+python3-svg.path
+gir1.2-gtk-3.0
+```
+
+On a Debian or Ubuntu system, you would just type the following:
+```bash
+sudo apt install python3-gi python3-opengl python3-yaml python3-svg.path gir1.2-gtk-3.0
+```
+Please note that you need to enable the `universe` repository in Ubuntu.
+
+### Run with Docker
+
+If you have difficulty with the installation, you can run the application from Docker.
+
+The `docker run` command will mount your personal Documents folder to `/root/Documents` so that you
+can access your files.
+
+```bash
+sudo docker build -t pycam/pycam .
+sudo docker run -it \
+    -v ~/Documents:/root/Documents \
+    -v ~/.Xauthority:/root/.Xauthority \
+    -e DISPLAY \
+    --net=host \
+    pycam/pycam
+```
+
+## macOS
+
+### Installation
+
+1\. Install Homebrew if it has not been installed:
+```bash
+ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
+```
+
+2\. Install the dependencies (currently only for Python2):  
+TODO: adjust for Python3
+```bash
+brew install gtk+3 pygobject3
+pip install pygobject enum34
+```
+
+### Run with Docker
+
+If you have difficulty with the installation, you can run the application from Docker.
+
+1\. Make sure that Docker is installed, if not, you can install it with Homebrew.
+You will also need XQuartz and socat.
+
+```bash
+brew cask install docker xquartz
+brew install socat
+```
+
+2\. Start XQuartz from a terminal with `open -a XQuartz`. In the XQuartz Preferences,
+go to the “Security” tab and make sure you’ve got “Allow connections from network
+clients” ticked.
+
+3a. Run the following in a terminal and leave it running:
+
+```bash
+socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\"
+```
+
+3b. Run the following in a separate terminal. Your ip address can be found by running `ifconfig`.
+
+The `docker run` command will mount your personal Documents folder to `/root/Documents` so that you
+can access your files.
+
+```bash
+docker build -t pycam/pycam .
+export IP='<your local ip address>'
+docker run -it \
+    -v ~/Documents:/root/Documents \
+    -v /tmp/.X11-unix:/tmp/.X11-unix \
+    -e DISPLAY=$IP:0 \
+    pycam/pycam
+```
+
+# Minimal requirements for non-GUI mode
+
+If you plan to use PyCAM only in batch mode (without a graphical user interface),
+then you just need to install Python.
+
+See the manpage ( `man pycam` ) or the output of `pycam --help` for further defails.
diff --git a/LICENSE.TXT b/LICENSE.TXT
index 2361a72..f6d359b 100644
--- a/LICENSE.TXT
+++ b/LICENSE.TXT
@@ -15,7 +15,6 @@
   GNU General Public License for more details.
 
   You should have received a copy of the GNU General Public License
-  along with this program; if not, write to the Free Software
-  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 
   See COPYING
diff --git a/Makefile b/Makefile
index 00ea96d..1953407 100755
--- a/Makefile
+++ b/Makefile
@@ -1,22 +1,20 @@
 # export SVN_REPO_BASE=. if you want to use the local version instead of trunk
 # from the subversion repository.
 
+PYTHON_EXE ?= python3
 # use something like "VERSION=0.2 make" to override the VERSION on the command line
-VERSION ?= $(shell sed -n "s/^.*[\t ]*VERSION[\t ]*=[\t ]*[\"']\([^\"']*\)[\"'].*/\1/gp" pycam/__init__.py)
+VERSION = $(shell $(PYTHON_EXE) -c 'import pycam; print(pycam.VERSION)')
+VERSION_FILE = pycam/Version.py
 REPO_TAGS ?= https://pycam.svn.sourceforge.net/svnroot/pycam/tags
-RELEASE_PREFIX ?= pycam-
-ARCHIVE_DIR_RELATIVE ?= release-archives
-EXPORT_DIR = $(RELEASE_PREFIX)$(VERSION)
-EXPORT_FILE_PREFIX = $(EXPORT_DIR)
-EXPORT_ZIP = $(EXPORT_FILE_PREFIX).zip
-EXPORT_TGZ = $(EXPORT_FILE_PREFIX).tar.gz
-EXPORT_WIN32 = $(EXPORT_FILE_PREFIX).win32.exe
-PYTHON_EXE ?= python
+DIST_DIR = dist
+DIST_PREFIX = pycam-
+DIST_TGZ = $(DIST_DIR)/$(DIST_PREFIX)$(VERSION).tar.gz
+DIST_WIN32 = $(DIST_DIR)/$(DIST_PREFIX)$(VERSION).win32.exe
 # check if the local version of python's distutils support "--plat-name"
 # (introduced in python 2.6)
 DISTUTILS_PLAT_NAME = $(shell $(PYTHON_EXE) setup.py --help build_ext \
 		      | grep -q -- "--plat-name" && echo "--plat-name win32")
-PYTHON_CHECK_STYLE_TARGETS = pycam pyinstaller/hooks/hook-pycam.py scripts/pycam setup.py
+PYTHON_CHECK_STYLE_TARGETS = pycam pyinstaller/hooks/hook-pycam.py setup.py
 
 # default location of mkdocs' build process
 MKDOCS_SOURCE_DIR = docs
@@ -30,58 +28,70 @@ WEBSITE_UPLOAD_PREFIX ?= $(SF_USER),pycam@
 endif
 WEBSITE_UPLOAD_LOCATION ?= web.sourceforge.net:/home/project-web/pycam/htdocs
 
-# turn the destination directory into an absolute path
-ARCHIVE_DIR := $(shell pwd)/$(ARCHIVE_DIR_RELATIVE)
 RM = rm -f
 
-.PHONY: zip tgz win32 clean dist git_export upload create_archive_dir man check-style test \
-	pylint-relaxed pylint-strict docs upload-docs
-
-dist: zip tgz win32
-	@# remove the tmp directory when everything is done
-	@$(RM) -r "$(EXPORT_DIR)"
+.PHONY: build clean dist tgz win32 clean \
+	docs man upload-docs \
+	check-style pylint-relaxed pylint-strict test \
+	update-version update-deb-changelog
+
+info:
+	@echo "Available targets:"
+	@echo "    build"
+	@echo "    clean"
+	@echo "    dist"
+	@echo "    docs"
+	@echo "    man"
+	@echo "    upload-docs"
+	@echo
+	@echo "Style checks:"
+	@echo "    check-style"
+	@echo "    pylint-relaxed"
+	@echo "    pylint-strict"
+
+build: man update-version
+	$(PYTHON_EXE) setup.py build
+
+archive: tgz win32
+	@# we can/should remove the version file in order to avoid a stale local version
+	@$(RM) "$(VERSION_FILE)"
 
 clean:
-	@$(RM) -r "$(EXPORT_DIR)"
+	@$(RM) -r build
 	@$(RM) -r "$(MKDOCS_EXPORT_DIR)"
+	@$(RM) "$(VERSION_FILE)"
 	$(MAKE) -C man clean
 
 man:
 	@$(MAKE) -C man man
 
-git_export: clean
-	@if git status 2>/dev/null >&2;\
-		then git clone . "$(EXPORT_DIR)";\
-		else echo "No git repo found."; exit 1;\
-	fi
-	# Windows needs a different name for the startup script - due to process creation
-	# (no fork/exec)
-	@cp "$(EXPORT_DIR)/scripts/pycam" "$(EXPORT_DIR)/scripts/pycam-loader.py"
+$(DIST_DIR):
+	@mkdir -p "$@"
 
-create_archive_dir:
-	@mkdir -p "$(ARCHIVE_DIR)"
+tgz: $(DIST_TGZ)
 
-zip: create_archive_dir man git_export
-	cd "$(EXPORT_DIR)"; $(PYTHON_EXE) setup.py sdist --format zip --dist-dir "$(ARCHIVE_DIR)"
+$(DIST_TGZ): $(DIST_DIR) build
+	$(PYTHON_EXE) setup.py sdist --format gztar --dist-dir "$(DIST_DIR)"
 
-tgz: create_archive_dir man git_export
-	cd "$(EXPORT_DIR)"; $(PYTHON_EXE) setup.py sdist --format gztar --dist-dir "$(ARCHIVE_DIR)"
+win32: $(DIST_WIN32)
 
-win32: create_archive_dir man git_export
+$(DIST_WIN32): $(DIST_DIR) build
 	# this is a binary release
-	cd "$(EXPORT_DIR)"; $(PYTHON_EXE) setup.py bdist_wininst --user-access-control force \
-		--dist-dir "$(ARCHIVE_DIR)" $(DISTUTILS_PLAT_NAME)
+	$(PYTHON_EXE) setup.py bdist_wininst --user-access-control force \
+		--dist-dir "$(DIST_DIR)" $(DISTUTILS_PLAT_NAME)
+
+update-deb-changelog:
+	@# retrieve the log of all commits since the latest release and add it to the deb changelog
+	if ! grep -qFw "$(VERSION)" debian/changelog; then \
+		git log --pretty=format:%s v$(shell dpkg-parsechangelog | sed --quiet -re 's/Version: (.*)/\1/ p').. | \
+			DEBFULLNAME="PyCAM Builder" DEBEMAIL="builder@pycam.org" \
+			xargs -r -d '\n' -n 1 -- debchange --newversion "$(subst -,.,$(VERSION))"; \
+	fi
 
-upload:
-	svn cp "$(SVN_REPO_BASE)" "$(REPO_TAGS)/release-$(VERSION)" -m "tag release $(VERSION)"
-	svn import "$(ARCHIVE_DIR)/$(EXPORT_ZIP)" "$(REPO_TAGS)/archives/$(EXPORT_ZIP)" \
-		-m "added released zip file for version $(VERSION)"
-	svn import "$(ARCHIVE_DIR)/$(EXPORT_TGZ)" "$(REPO_TAGS)/archives/$(EXPORT_TGZ)" \
-		-m "added released tgz file for version $(VERSION)"
-	svn import "$(ARCHIVE_DIR)/$(EXPORT_WIN32)" "$(REPO_TAGS)/archives/$(EXPORT_WIN32)" \
-		-m "added released win32 installer for version $(VERSION)"
+update-version:
+	@echo 'VERSION = "$(VERSION)"' >| "$(VERSION_FILE)"
 
-test: check-style pytest
+test: check-style pytest check-yaml-flow
 
 # The "make pytest" target calls pytest via the obsolete `py.test` name,
 # instead of the modern `pytest` name.  This is in order to support
@@ -89,11 +99,16 @@ test: check-style pytest
 # Once the oldest supported platform has pytest 3.0 or newer we can
 # switch to the new `pytest` name.
 pytest:
-	py.test -v .
+	/usr/bin/py.test-3 -v .
 
 check-style:
 	scripts/run_flake8 $(PYTHON_CHECK_STYLE_TARGETS)
 
+check-yaml-flow:
+	$(RM) test.ngc
+	pycam/run_cli.py yaml_flow_working.yml
+	grep -q "Z" test.ngc
+
 pylint-strict:
 	pylint $(PYTHON_CHECK_STYLE_TARGETS)
 
diff --git a/README.md b/README.md
index 5de6e9e..83abd80 100644
--- a/README.md
+++ b/README.md
@@ -1,26 +1,34 @@
 [![Build Status](https://travis-ci.org/SebKuzminsky/pycam.svg?branch=master)](https://travis-ci.org/SebKuzminsky/pycam)
 
-# pycam: a toolpath generator
+# PyCAM: a toolpath generator
 
-pycam generates toolpaths (GCode) based on 2D or 3D models for 3-axis CNC machining.
+PyCAM generates toolpaths (GCode) based on 2D or 3D models for 3-axis CNC machining.
 
 
 ## Running
 
-Extract the archive or clone the repository and run `scripts/pycam`.
+Extract the archive or clone the repository.
 
+Graphical Interface: `pycam/run_gui.py`
 
-## Usage
-
-See the [documentation](http://pycam.sourceforge.net/introduction/) for a short introduction.
+Scripted Toolpath Processing: `pycam/run_cli.py FLOW_SPECIFICATION_FILE`
 
 
 ## Resources
 
-* [Development](https://github.com/SebKuzminsky/pycam/)
-* [Documentation](http://pycam.sourceforge.net/) / [FAQ](http://pycam.sourceforge.net/faq/)
-* [Video tutorials](http://vimeo.com/channels/pycam) / [Screenshots](http://pycam.sourceforge.net/screenshots/)
+See the [documentation](http://pycam.sourceforge.net/introduction/) for a short introduction.
+
+* [Website / Documentation](http://pycam.sf.net/)
+* [Getting started](http://pycam.sf.net/getting-started.md)
+* [FAQ](http://pycam.sf.net/faq.md)
+* [Video tutorials](http://vimeo.com/channels/pycam)
+* [Screenshots](http://pycam.sf.net/screenshots.md)
 * [Mailing lists](https://sourceforge.net/p/pycam/mailman/)
+
+
+## Development
+
+* [Code Repository](https://github.com/SebKuzminsky/pycam)
 * [Issue Tracker](https://github.com/SebKuzminsky/pycam/issues)
 
 
@@ -34,3 +42,4 @@ See the [documentation](http://pycam.sourceforge.net/introduction/) for a short
 * Sebastian Kuzminsky: debian packaging
 * Nicholas Humfrey: documentation, recovery of old sourceforge-wiki
 * Piers Titus van der Torren: documentation
+* Reuben Rissler: gtk3 migration
diff --git a/debian/changelog b/debian/changelog
index 36b408e..f55254a 100644
--- a/debian/changelog
+++ b/debian/changelog
@@ -1,28 +1,3 @@
-pycam (0.6.3) unstable; urgency=medium
-
-  * DXFImporter: fix handling of closed LWPOLYLINE
-  * DXFImporter: fix bezier line handling and add a test case
-  * DXFImporter: fix import of "get_bezier_lines"
-
-  * CXFImporter: fix python2/3 compatibility detection
-  * CXFImporter: fix line count in error messages
-  * CXFImporter: add bit of documentation for line feeder
-
-  * FontCache: fix CXFImporter
-  * Style check: tolerate short variable names
-  * "get_points_of_arc": fix handling of full circles
-  * improve log message for plugin import failure
-
-  * test: add a "truncated square" offset-polygon test (small offset)
-  * test: use python2/python3-compatible print()
-  * test: add debug printing in get_offset_polygons() tests
-  * test: verify expected number of offset polygons
-  * test: add test for CXF file importer
-
-  * misc packaging updates
-
- -- Sebastian Kuzminsky <seb@highlab.com>  Tue, 01 May 2018 22:02:32 -0600
-
 pycam (0.6.2) unstable; urgency=medium
 
   * avoid OpenGL problem with "glutSolidCone"
diff --git a/debian/control b/debian/control
index 73c12c7..dc988b4 100644
--- a/debian/control
+++ b/debian/control
@@ -2,18 +2,32 @@ Source: pycam
 Section: science
 Priority: optional
 Maintainer: Lars Kruse <devel@sumpfralle.de>
-Build-Depends: python, debhelper (>= 9), dh-python, help2man,
- python-opengl, python-numpy, python-setuptools, python-flake8,
- python-pytest
+Build-Depends:
+ debhelper (>= 9),
+ dh-python,
+ help2man,
+ python,
+ python3-flake8,
+ python3-numpy,
+ python3-opengl,
+ python3-pytest,
+ python3-setuptools,
+ python3-svg.path,
 Standards-Version: 3.9.8
 Homepage: https://github.com/SebKuzminsky/pycam
 
 Package: pycam
 Architecture: all
-Depends: python-gtk2, python-opengl, python-gtkglext1, python-rsvg,
- python-enum34, python-gobject-2, python-numpy, python-setproctitle,
- inkscape, pstoedit, librecad-data, ${misc:Depends}, ${python:Depends}
-Recommends: python-guppy
+Depends:
+ librecad-data,
+ python3-gi,
+ python3-numpy,
+ python3-opengl,
+ python3-setproctitle,
+ python3-svg.path,
+ python3-yaml,
+ ${misc:Depends},
+ ${python3:Depends},
 Description: CAM program & Python library for generating toolpaths
  PyCAM is a toolpath generator for 3 axis machines. The generated
  GCode can be used with LinuxCNC and other machine controllers.
diff --git a/debian/copyright b/debian/copyright
index 21e83a0..c85c61c 100644
--- a/debian/copyright
+++ b/debian/copyright
@@ -25,8 +25,7 @@ License: GPL-3+
  GNU General Public License for more details.
  .
  You should have received a copy of the GNU General Public License
- along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ along with this program.  If not, see <https://www.gnu.org/licenses/>.
  .
  On Debian systems, the full text of the GNU General Public License
  version 3 can be found in the file `/usr/share/common-licenses/GPL-3'.
-
diff --git a/debian/rules b/debian/rules
index 83ed715..b882d97 100755
--- a/debian/rules
+++ b/debian/rules
@@ -22,6 +22,18 @@ include /usr/share/dpkg/default.mk
 %:
 	dh $@ --with python2
 
+# This target updates pycam/Version.py and debian/changelog with current
+# information from git.  It's intended to be run before generating the
+# debian source package.
+prep-source:
+	$(MAKE) update-version
+	$(MAKE) update-deb-changelog
+	rm -f pycam/*.pyc
+
+override_dh_auto_clean:
+	$(MAKE) clean
+	debian/rules prep-source
+
 override_dh_auto_build:
 	$(MAKE) -C man
 	python setup.py build
diff --git a/docs/3d-view.md b/docs/3d-view.md
index bb44fa4..8f6ca9b 100644
--- a/docs/3d-view.md
+++ b/docs/3d-view.md
@@ -108,7 +108,7 @@ There are some OpenGL properties available for configuration:
 -   *Shadows*: enable the *shadow* effect (only useful with directed
     light)
 -   *Perspective View*: switch between orthogonal and perspective view
-    mode. The orthogonal view is useful for verifying the alignement of
+    mode. The orthogonal view is useful for verifying the alignment of
     model features, but rotation, zooming and panning don't work
     perfectly. The perspective view is recommended instead.
 
diff --git a/docs/bounding-box.md b/docs/bounding-box.md
index 9cb8ec3..4646d28 100644
--- a/docs/bounding-box.md
+++ b/docs/bounding-box.md
@@ -1,7 +1,7 @@
 A bounding box is a 3D area where you want the mill to do its work or
 actually stay away.
 
-This is usefull for:
+This is useful for:
 
 -   Doing work in areas that require specific movements e.g. for more
     detailed finish ins small areas or higher speed of material removal
diff --git a/docs/developers-guide.md b/docs/developers-guide.md
index 6ae3ea0..d129ca5 100644
--- a/docs/developers-guide.md
+++ b/docs/developers-guide.md
@@ -23,7 +23,7 @@ Previous versions are stored in the *tags* path of the repository:
 Changing the GTK interface
 --------------------------
 
-The defintion of the complete GUI is stored in an XML file (GTKBuilder
+The definition of the complete GUI is stored in an XML file (GTKBuilder
 UI format).
 
 You can change this GUI with the program *glade* (available in a package
@@ -71,7 +71,7 @@ The default general PyCAM settings are defined at the top of
 ### Task settings
 
 The default task settings are defined in the file
-`src/pycam/Gui/Settings.py` in the dictionay `BASIC_DEFAULT_CONFIG`.
+`src/pycam/Gui/Settings.py` in the dictionary `BASIC_DEFAULT_CONFIG`.
 
 Preparing a tutorial video
 --------------------------
diff --git a/docs/faq.md b/docs/faq.md
index 4e26c15..a6b7ee4 100644
--- a/docs/faq.md
+++ b/docs/faq.md
@@ -67,7 +67,7 @@ SVG import: postoedit reports a missing MSVCR100.dll library \[only Windows\]
 
 After installing *inkscape*, *pstoedit* and *ghostscript* the import of
 SVG files fails with an an error report referring to a missing library
-MSVCR100.dll.
+MSVCR100.dll (only relevant for PyCAM before v0.7).
 
 pstoedit v3.60 (or later) depends on the MS Visual C++ 2010 library.
 Thus you have to options to solve this issue:
@@ -116,8 +116,8 @@ Toolpaths for 2D models
 I can't open SVG files
 ----------------------
 
-PyCAM contains no built-in support for SVG. Thus you need to install
-[Inkscape](http://inkscape.org) and
+PyCAM (before v0.7) contains no built-in support for SVG. Thus you
+needed to install [Inkscape](http://inkscape.org) and
 [pstoedit](http://www.pstoedit.net/pstoedit).
 
 See the list of
@@ -140,7 +140,7 @@ Rapid moves are placed below the model instead of above
 -------------------------------------------------------
 
 Probably you need to adjust the *safety height* (see *GCode settings*)
-accoding to the height of your model. Alternatively you could also shift
+according to the height of your model. Alternatively you could also shift
 the model down to z=0.
 
 Toolpaths with an offset are placed inside of the model instead of outside
diff --git a/docs/getting-started.md b/docs/getting-started.md
index 005a5fd..ea62636 100644
--- a/docs/getting-started.md
+++ b/docs/getting-started.md
@@ -48,7 +48,7 @@ you just need to following a few final steps:
     PyCAM.
 
 The final result of this milling operation should be very similar to
-your original model. Increase overlap and experiement with other
+your original model. Increase overlap and experiment with other
 parameters if you need to improve its quality. At this moment will you
 understand the importance of the fixiation - especially if you isolated
 a part of the model form the fixiated part. You can always use *support
@@ -61,7 +61,7 @@ Let's go, start up pycam!
 
 **(Screenshots will folow)** After we start up PyCAM we see the
 pycam-textbox in the visualisation window. You can actually go and
-prepair to mill this if you want but we will open up our own file. All
+prepare to mill this if you want but we will open up our own file. All
 the work will be done in the other window which opens up in the “model”
 tab. In the “model” tab, click file&gt; open model and find and open the
 stl file you want to work on. In this guide we will use a file for a 2
diff --git a/docs/installation.md b/docs/installation.md
index 80506ec..88e9c48 100644
--- a/docs/installation.md
+++ b/docs/installation.md
@@ -31,4 +31,4 @@ Installing the development version
 2.  checkout the PyCAM repository:
     `git clone `[`git://pycam.git.sourceforge.net/gitroot/pycam/pycam`](git://pycam.git.sourceforge.net/gitroot/pycam/pycam)
 3.  install the [requirements](requirements.md) for your system
-4.  run `scripts/pycam` in the PyCAM directory
+4.  run `pycam/run_gui.py` in the PyCAM directory
diff --git a/docs/introduction.md b/docs/introduction.md
index d3d47f3..91e579f 100644
--- a/docs/introduction.md
+++ b/docs/introduction.md
@@ -138,8 +138,8 @@ Generate the toolpath(s)
 You need to define a task for each toolpath to be generated.
 
 Each task can be marked as *enabled*. All *enabled* tasks are performed
-when clicking on *Generate all toolpaths*. Alternatively you can als
-click at *Generate Toolpath* to process only the currently selected
+when clicking on *Generate all toolpaths*. Alternatively you can
+click *Generate Toolpath* to process only the currently selected
 task.
 
 
diff --git a/docs/modeling-inkscape-svg.md b/docs/modeling-inkscape-svg.md
index 65aa4bb..4f3a339 100644
--- a/docs/modeling-inkscape-svg.md
+++ b/docs/modeling-inkscape-svg.md
@@ -51,7 +51,7 @@ Outlines and holes
 
 ![Combining polygons with proper directions](img/2d-modeling-polygon_directions.png)
 
-The following hints are only necesary, if you need an SVG with
+The following hints are only necessary, if you need an SVG with
 consistent winding states. Alternatively you can repair inconsistent
 winding states with the *Revise directions* button in the *Model* tab of
 PyCAM. This button is only visible if you are currently working with a
@@ -92,6 +92,23 @@ supplied with PyCAM.
 Pseudo 3D support
 -----------------
 
+### Height by layer (since v0.7)
+
+You can create 2D shapes at different heights (z-levels) by using
+multiple layers in your SVG document (e.g. via inkscape).
+
+When loading an SVG file with multiple layers, the height gap between
+each two layers is one unit (e.g. mm). This distance can be easily
+scaled within PyCAM to an arbitrary height. This allows a precise
+height adjustment as long as only two layers are involved.
+
+If more than two layers with specific height requirements
+are required, then you need to add empty layers between these in
+order to achieve the wanted height gap between the objects.
+
+
+### Height derived from color (up to v0.6.x)
+
 ![A multi-colored SVG graphic.](img/2d-multilayer-engrave.png)
 
 You can create 2D shapes at different heights (z-levels) by using
@@ -161,7 +178,7 @@ following procedure with care and check the result carefully.
     different colors picked from the current palette (don't create
     custom colors!).
 5.  The order of the colors taken from the color palette determines the
-    relative height of each object. You need to avoid colors that occour
+    relative height of each object. You need to avoid colors that occur
     multiple times in the palette (e.g. green).
 6.  Open the SVG file in PyCAM and scale the z axis of the model.
     Hopefully the relative vertical distances of your 2D shapes suit
diff --git a/docs/requirements.md b/docs/requirements.md
index 1e5368d..a380f65 100644
--- a/docs/requirements.md
+++ b/docs/requirements.md
@@ -14,45 +14,32 @@ Linux
 
 Install the following packages with your package manager (see below):
 
--   **python**
--   **python-gtk2**
--   **python-opengl** (at least v3.0.1)
--   **python-gtkglext1** (for OpenSuSE: *python-gtkglext*)
--   **python-rsvg**
--   **python-guppy** (optional; required by the *Memory Analyzer*
-    plugin - only useful for development)
+-   **python3**
+-   **python3-gi**
+-   **python3-opengl**
+-   **gir1.2-gtk-3.0** (GTK: at least v3.16)
 
-### Debian
+If your distribution does not ship GTK v3.16 or newer (e.g. Debian Jessie contains only v3.14),
+then you need to use an older release of PyCAM. The older releases (e.g. v0.6.x) depend on Python2
+and GTK2 - thus they should work well even with rather old distributions.
 
-Run the following command in a *root* terminal:
-
-    apt-get install python-gtk2 python-opengl python-gtkglext1 python-rsvg python-guppy
-
-Please note, that the outdated Debian *Lenny* contains broken *python-opengl* packages.
-You need to temporarily add the *Squeeze* repository during the installation of these two packages.
+### Debian / Ubuntu
 
-### Ubuntu
-
-Enable the *universe* repository. See detailed instructions
-[here](http://help.ubuntu.com/community/Repositories/Ubuntu).
-
-    sudo apt-get install python-gtk2 python-opengl python-gtkglext1 python-rsvg python-guppy
+Run the following command in a *root* terminal:
 
-Please note, that Ubuntu *Jaunty* (maybe also *Dapper/Hardy/Intrepid*) contains broken
-*python-opengl* packages. You need to temporarily add the *Karmic* repository during the
-installation of these two packages.
+    apt-get install python3-gi python3-opengl gir1.2-gtk-3.0
 
 ### OpenSuSE
 
 Run the following command in a *root* terminal:
 
-    zypper install python-gtk2 python-gtkglext python-opengl python-rsvg python-guppy
+    zypper install python3-gi python3-opengl
 
 ### Fedora
 
 Run the following command in a *root* terminal:
 
-    yum install pygtk2 pygtkglext python-opengl gnome-python2-rsvg python-guppy
+    yum install python3-gi python3-opengl
 
 Windows
 -------
@@ -81,10 +68,11 @@ Some features of PyCAM require additional external programs.
 SVG/PS/EPS import
 -----------------
 
-PyCAM supports only STL and DXF files natively. Thus you need to install
-external programs for conversions of other file formats.
+PyCAM supports only STL and DXF files natively. Native SVG support is available
+since PyCAM v0.7. For previous versions you need to install external programs
+for the conversions of other file formats.
 
-### Debian/Ubuntu
+### Debian / Ubuntu
 
     apt-get install inkscape pstoedit
 
diff --git a/docs/server-mode.md b/docs/server-mode.md
index 94cf697..586b110 100644
--- a/docs/server-mode.md
+++ b/docs/server-mode.md
@@ -18,8 +18,8 @@ Basically there are two different modes of operation:
 -   server mode: your computer creates (or joins) a pool of hosts. Each
     host can submit calculation requests to the pool. The calculation of
     these requests is distributed among all available hosts in the pool.
-    Thus every host in the pool offers computational ressources and - at
-    the same time - can use the ressources of all other hosts.
+    Thus every host in the pool offers computational resources and - at
+    the same time - can use the resources of all other hosts.
 
 Technical details
 -----------------
diff --git a/docs/supported-formats.md b/docs/supported-formats.md
index 67564a7..82affdd 100644
--- a/docs/supported-formats.md
+++ b/docs/supported-formats.md
@@ -35,10 +35,9 @@ SVG
 [Scalable vector files](http://en.wikipedia.org/wiki/Scalable_Vector_Graphics) can describe 2D
 models. They are supposed to be used as contour models for engravings.
 
-You need to install *Inkscape* and *pstoedit* if you want to import SVG
-files. Please take a look at the
-[requirements](requirements#Optional_external_programs) for
-more details.
+Before PyCAM v0.7 you needed to install *Inkscape* and *pstoedit* if you want
+to import SVG files. Please take a look at the
+[requirements](requirements#Optional_external_programs) for more details.
 
 Additionally you should read the [hints for Inkscape](modeling-inkscape-svg.md) to avoid 
 common pitfalls.
diff --git a/docs/touch-off.md b/docs/touch-off.md
index 8fe34b8..97d5ecb 100644
--- a/docs/touch-off.md
+++ b/docs/touch-off.md
@@ -6,7 +6,7 @@ Overview
 Before milling an object you always need to adjust the coordinate system
 of your machine controller (e.g. [LinuxCNC](http://www.linuxcnc.org/)). This
 operation is quite easy for the planar axes x and y. Only z is a bit
-tricky, since it usually needs to be quite acurate. Otherwise you risk
+tricky, since it usually needs to be quite accurate. Otherwise you risk
 to mill slightly too deep (damaging the base of the milling machine) or
 slightly too high (the cut through the object is not complete).
 
@@ -60,7 +60,7 @@ The spindle will start after the touch off (via M3).
 Tool change
 -----------
 
-A tool change occours between two toolpaths using different tools.
+A tool change occurs between two toolpaths using different tools.
 
 The tool change operation follows these steps:
 
diff --git a/man/Makefile b/man/Makefile
index 77935a0..a4b3b38 100644
--- a/man/Makefile
+++ b/man/Makefile
@@ -1,4 +1,4 @@
-RUN_SCRIPT = ../scripts/pycam
+RUN_SCRIPT = ../pycam/run_gui.py
 PYCAM_MAN_INCLUDE_FILE = pycam.1.inc
 MAN_FILES = pycam.1
 HTML_FILES = $(patsubst %,%.html,$(MAN_FILES))
diff --git a/pycam/.gitignore b/pycam/.gitignore
new file mode 100644
index 0000000..cab8141
--- /dev/null
+++ b/pycam/.gitignore
@@ -0,0 +1 @@
+Version.py
diff --git a/pycam/Cutters/BaseCutter.py b/pycam/Cutters/BaseCutter.py
index 4b594be..6bdbb2b 100644
--- a/pycam/Cutters/BaseCutter.py
+++ b/pycam/Cutters/BaseCutter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 Copyright 2010-2011 Lars Kruse <devel@sumpfralle.de>
@@ -32,7 +31,7 @@ class BaseCutter(IDGenerator):
     vertical = (0, 0, -1)
 
     def __init__(self, radius, location=None, height=None):
-        super(BaseCutter, self).__init__()
+        super().__init__()
         if location is None:
             location = (0, 0, 0)
         if height is None:
diff --git a/pycam/Cutters/CylindricalCutter.py b/pycam/Cutters/CylindricalCutter.py
index 02a0474..b1c44cf 100644
--- a/pycam/Cutters/CylindricalCutter.py
+++ b/pycam/Cutters/CylindricalCutter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
@@ -43,7 +42,7 @@ class CylindricalCutter(BaseCutter):
     def __repr__(self):
         return "CylindricalCutter<%s,%s>" % (self.location, self.radius)
 
-    def to_OpenGL(self):
+    def to_opengl(self):
         if not GL_enabled:
             return
         GL.glPushMatrix()
diff --git a/pycam/Cutters/SphericalCutter.py b/pycam/Cutters/SphericalCutter.py
index f721006..d63b921 100644
--- a/pycam/Cutters/SphericalCutter.py
+++ b/pycam/Cutters/SphericalCutter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
@@ -43,7 +42,7 @@ class SphericalCutter(BaseCutter):
     def __repr__(self):
         return "SphericalCutter<%s,%s>" % (self.location, self.radius)
 
-    def to_OpenGL(self):
+    def to_opengl(self):
         if not GL_enabled:
             return
         GL.glPushMatrix()
diff --git a/pycam/Cutters/ToroidalCutter.py b/pycam/Cutters/ToroidalCutter.py
index f2e384b..0f7ee86 100644
--- a/pycam/Cutters/ToroidalCutter.py
+++ b/pycam/Cutters/ToroidalCutter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
@@ -70,7 +69,7 @@ class ToroidalCutter(BaseCutter):
         return ((self.radius, self.majorradius, self.minorradius)
                 < (other.radius, other.majorradius, other.minorradius))
 
-    def to_OpenGL(self):
+    def to_opengl(self):
         if not GL_enabled:
             return
         GL.glPushMatrix()
@@ -202,31 +201,32 @@ class ToroidalCutter(BaseCutter):
     def intersect_circle_plane(self, direction, triangle, start=None):
         if start is None:
             start = self.location
-        ccp, cp, l = intersect_circle_plane(start, self.distance_majorradius, direction, triangle)
+        ccp, cp, l_len = intersect_circle_plane(start, self.distance_majorradius, direction,
+                                                triangle)
         # offset intersection
         if ccp:
             cl = psub(cp, psub(ccp, start))
-            return (cl, ccp, cp, l)
+            return (cl, ccp, cp, l_len)
         return (None, None, None, INFINITE)
 
     def intersect_circle_point(self, direction, point, start=None):
         if start is None:
             start = self.location
-        (ccp, cp, l) = intersect_circle_point(start, self.axis, self.distance_majorradius,
-                                              self.distance_majorradiussq, direction, point)
+        (ccp, cp, l_len) = intersect_circle_point(start, self.axis, self.distance_majorradius,
+                                                  self.distance_majorradiussq, direction, point)
         if ccp:
             cl = psub(cp, psub(ccp, start))
-            return (cl, ccp, point, l)
+            return (cl, ccp, point, l_len)
         return (None, None, None, INFINITE)
 
     def intersect_circle_line(self, direction, edge, start=None):
         if start is None:
             start = self.location
-        (ccp, cp, l) = intersect_circle_line(start, self.axis, self.distance_majorradius,
-                                             self.distance_majorradiussq, direction, edge)
+        (ccp, cp, l_len) = intersect_circle_line(start, self.axis, self.distance_majorradius,
+                                                 self.distance_majorradiussq, direction, edge)
         if ccp:
             cl = psub(cp, psub(ccp, start))
-            return (cl, ccp, cp, l)
+            return (cl, ccp, cp, l_len)
         return (None, None, None, INFINITE)
 
     def intersect(self, direction, triangle, start=None):
diff --git a/pycam/Cutters/__init__.py b/pycam/Cutters/__init__.py
index 8a4b9a4..e69de29 100644
--- a/pycam/Cutters/__init__.py
+++ b/pycam/Cutters/__init__.py
@@ -1,54 +0,0 @@
-# -*- coding: utf-8 -*-
-"""
-Copyright 2010 Lars Kruse <devel@sumpfralle.de>
-
-This file is part of PyCAM.
-
-PyCAM is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-PyCAM is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
-"""
-
-from pycam import InvalidValueError
-
-
-def get_tool_from_settings(tool_settings, height=None):
-    """ get the tool specified by the relevant settings
-
-    The settings must include:
-      - "shape": one of "SphericalCutter", "CylindricalCutter" and
-        "ToroidalCutter"
-      - "radius": the tool radius
-    The following settings are optional or shape specific:
-      - "torus_radius": necessary for ToroidalCutter
-
-    @type tool_settings: dict
-    @value tool_settings: contains the attributes of the tool
-    @type height: float
-    @value height: the height of the tool
-    @rtype: BaseCutter | basestring
-    @return: a tool object or an error string
-    """
-    from pycam.Cutters.CylindricalCutter import CylindricalCutter
-    from pycam.Cutters.SphericalCutter import SphericalCutter
-    from pycam.Cutters.ToroidalCutter import ToroidalCutter
-    cuttername = tool_settings["shape"]
-    radius = tool_settings["tool_radius"]
-    if cuttername == "SphericalCutter":
-        return SphericalCutter(radius, height=height)
-    elif cuttername == "CylindricalCutter":
-        return CylindricalCutter(radius, height=height)
-    elif cuttername == "ToroidalCutter":
-        toroid = tool_settings["torus_radius"]
-        return ToroidalCutter(radius, toroid, height=height)
-    else:
-        raise InvalidValueError("Invalid cutter shape: '%s' is not known" % str(cuttername))
diff --git a/pycam/Exporters/GCode/LinuxCNC.py b/pycam/Exporters/GCode/LinuxCNC.py
index feba487..42a75af 100644
--- a/pycam/Exporters/GCode/LinuxCNC.py
+++ b/pycam/Exporters/GCode/LinuxCNC.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2012 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,8 +19,8 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 import os
 import pycam.Exporters.GCode
-from pycam.Toolpath import CORNER_STYLE_EXACT_PATH, CORNER_STYLE_EXACT_STOP, \
-        CORNER_STYLE_OPTIMIZE_SPEED, CORNER_STYLE_OPTIMIZE_TOLERANCE
+from pycam.Toolpath import ToolpathPathMode
+from pycam.workspace import LengthUnit
 
 
 DEFAULT_HEADER = (("G40", "disable tool radius compensation"),
@@ -45,11 +44,6 @@ class LinuxCNC(pycam.Exporters.GCode.BaseGenerator):
     def add_header(self):
         for command, comment in DEFAULT_HEADER:
             self.add_command(command, comment=comment)
-        # TODO: use a "unit" filter
-        if True:
-            self.add_command("G21", "metric")
-        else:
-            self.add_command("G20", "imperial")
 
     def add_footer(self):
         self.add_command("M2", "end program")
@@ -104,15 +98,23 @@ class LinuxCNC(pycam.Exporters.GCode.BaseGenerator):
         # "seconds" may be floats or integers
         self.add_command("G04 P{}".format(seconds), "wait for {} seconds".format(seconds))
 
+    def command_unit(self, unit):
+        if unit == LengthUnit.METRIC_MM:
+            self.add_command("G21", "metric")
+        elif unit == LengthUnit.IMPERIAL_INCH:
+            self.add_command("G20", "imperial")
+        else:
+            assert False, "Invalid unit requested: {}".format(unit)
+
     def command_corner_style(self, extra_args):
         path_mode, motion_tolerance, naive_tolerance = extra_args
-        if path_mode == CORNER_STYLE_EXACT_PATH:
+        if path_mode == ToolpathPathMode.CORNER_STYLE_EXACT_PATH:
             self.add_command("G61", "exact path mode")
-        elif path_mode == CORNER_STYLE_EXACT_STOP:
+        elif path_mode == ToolpathPathMode.CORNER_STYLE_EXACT_STOP:
             self.add_command("G61.1", "exact stop mode")
-        elif path_mode == CORNER_STYLE_OPTIMIZE_SPEED:
+        elif path_mode == ToolpathPathMode.CORNER_STYLE_OPTIMIZE_SPEED:
             self.add_command("G64", "continuous mode with maximum speed")
-        elif path_mode == CORNER_STYLE_OPTIMIZE_TOLERANCE:
+        elif path_mode == ToolpathPathMode.CORNER_STYLE_OPTIMIZE_TOLERANCE:
             if not naive_tolerance:
                 self.add_command("G64 P%f" % motion_tolerance, "continuous mode with tolerance")
             else:
diff --git a/pycam/Exporters/GCode/__init__.py b/pycam/Exporters/GCode/__init__.py
index 63dde86..d51d623 100644
--- a/pycam/Exporters/GCode/__init__.py
+++ b/pycam/Exporters/GCode/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2012 Lars Kruse <devel@sumpfralle.de>
 
@@ -25,9 +24,9 @@ from pycam.Toolpath import MOVE_STRAIGHT_RAPID, MACHINE_SETTING, COMMENT, MOVES_
 _log = pycam.Utils.log.get_logger()
 
 
-class BaseGenerator(object):
+class BaseGenerator:
 
-    def __init__(self, destination):
+    def __init__(self, destination, comment=None):
         if hasattr(destination, "write"):
             # assume that "destination" is something like a StringIO instance or an open file
             self.destination = destination
@@ -39,6 +38,9 @@ class BaseGenerator(object):
             self._close_stream_on_exit = True
         self._filters = []
         self._cache = {}
+        # add a comment at the top of the file, if requested
+        if comment:
+            self.add_comment(comment)
         self.add_header()
 
     def _get_cache(self, key, default_value):
diff --git a/pycam/Exporters/GCodeExporter.py b/pycam/Exporters/GCodeExporter.py
index 9b1b0d5..b02fb5c 100644
--- a/pycam/Exporters/GCodeExporter.py
+++ b/pycam/Exporters/GCodeExporter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010-2011 Lars Kruse <devel@sumpfralle.de>
 Copyright 2008-2009 Lode Leroy
@@ -61,7 +60,7 @@ def _get_num_converter(step_width):
     return conv_func, format_string
 
 
-class GCodeGenerator(object):
+class GCodeGenerator:
 
     NUM_OF_AXES = 3
 
diff --git a/pycam/Exporters/LinuxCNCToolExporter.py b/pycam/Exporters/LinuxCNCToolExporter.py
index cdc5f72..be0d31b 100644
--- a/pycam/Exporters/LinuxCNCToolExporter.py
+++ b/pycam/Exporters/LinuxCNCToolExporter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -21,7 +20,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 import os
 
 
-class LinuxCNCToolExporter(object):
+class LinuxCNCToolExporter:
 
     def __init__(self, tools):
         """ tools are expected to be dictionaries containing the following keys:
diff --git a/pycam/Exporters/STLExporter.py b/pycam/Exporters/STLExporter.py
index 0abed8c..5016c08 100644
--- a/pycam/Exporters/STLExporter.py
+++ b/pycam/Exporters/STLExporter.py
@@ -1,5 +1,3 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -26,7 +24,7 @@ from pycam import VERSION
 from pycam.Geometry.PointUtils import pnormalized
 
 
-class STLExporter(object):
+class STLExporter:
 
     def __init__(self, model, name="model", created_by="pycam", linesep=None, **kwargs):
         self.model = model
diff --git a/pycam/Exporters/SVGExporter.py b/pycam/Exporters/SVGExporter.py
index 2b34377..0f3293f 100644
--- a/pycam/Exporters/SVGExporter.py
+++ b/pycam/Exporters/SVGExporter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2009 Lode Leroy
 
@@ -22,7 +21,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 SVG_OUTPUT_DPI = 90
 
 
-class SVGExporter(object):
+class SVGExporter:
 
     def __init__(self, output, unit="mm", maxx=None, maxy=None):
         if hasattr(output, "write"):
@@ -65,43 +64,33 @@ class SVGExporter(object):
     def fill(self, fill):
         self._fill = fill
 
-    def AddDot(self, x, y):
-        l = "<circle fill='%s' cx='%g' cy='%g' r='0.04'/>\n" % (self._fill, x, -y)
-        self.output.write(l)
+    def add_dot(self, x, y):
+        item = "<circle fill='%s' cx='%g' cy='%g' r='0.04'/>\n" % (self._fill, x, -y)
+        self.output.write(item)
 
-    def AddText(self, x, y, text):
-        l = "<text fill='%s' x='%g' y='%g' dx='0.07'>%s</text>\n" % (self._fill, x, -y, text)
-        self.output.write(l)
+    def add_text(self, x, y, text):
+        item = "<text fill='%s' x='%g' y='%g' dx='0.07'>%s</text>\n" % (self._fill, x, -y, text)
+        self.output.write(item)
 
-    def AddLine(self, x1, y1, x2, y2):
-        l = ("<line fill='%s' stroke='%s' x1='%.8f' y1='%.8f' x2='%.8f' y2='%.8f' />\n"
-             % (self._fill, self._stroke, x1, -y1, x2, -y2))
-        self.output.write(l)
+    def add_line(self, x1, y1, x2, y2):
+        item = ("<line fill='%s' stroke='%s' x1='%.8f' y1='%.8f' x2='%.8f' y2='%.8f' />\n"
+                % (self._fill, self._stroke, x1, -y1, x2, -y2))
+        self.output.write(item)
 
-    def AddPoint(self, p):
-        self.AddDot(p[0], p[1])
-
-    def AddPath(self, path):
-        self.AddLines(path.points)
-
-    def AddLines(self, points):
-        l = "<path fill='%s' stroke='%s' d='" % (self._fill, self._stroke)
+    def add_lines(self, points):
+        item = "<path fill='%s' stroke='%s' d='" % (self._fill, self._stroke)
         for i, p in enumerate(points):
             if i == 0:
-                l += "M "
+                item += "M "
             else:
-                l += " L "
-            l += "%.8f %.8f" % (p[0], -p[1])
-        l += "'/>\n"
-        self.output.write(l)
-
-    def AddPathList(self, pathlist):
-        for path in pathlist:
-            self.AddPath(path)
+                item += " L "
+            item += "%.8f %.8f" % (p[0], -p[1])
+        item += "'/>\n"
+        self.output.write(item)
 
 
 # TODO: we need to create a unified "Exporter" interface and base class
-class SVGExporterContourModel(object):
+class SVGExporterContourModel:
 
     def __init__(self, model, unit="mm", **kwargs):
         self.model = model
@@ -113,5 +102,5 @@ class SVGExporterContourModel(object):
             points = polygon.get_points()
             if polygon.is_closed:
                 points.append(points[0])
-            writer.AddLines(points)
+            writer.add_lines(points)
         writer.close(close_stream=False)
diff --git a/pycam/Flow/__init__.py b/pycam/Flow/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/pycam/Flow/history.py b/pycam/Flow/history.py
new file mode 100644
index 0000000..2dd45a2
--- /dev/null
+++ b/pycam/Flow/history.py
@@ -0,0 +1,133 @@
+import collections
+import contextlib
+import datetime
+import io
+
+from pycam.errors import PycamBaseException
+from pycam.Flow.parser import dump_yaml, parse_yaml
+from pycam.Utils.events import get_event_handler
+import pycam.Utils.log
+
+_log = pycam.Utils.log.get_logger()
+
+
+class DataRevision:
+    """ create a representation of the current state of all collections """
+
+    def __init__(self):
+        """ create a representation of the current state of all collections """
+        self.timestamp = datetime.datetime.now()
+        self.dump = dump_yaml()
+
+    def __lt__(self, other):
+        """sort revisions by timestamp"""
+        return (self.timestamp, self.dump) < (other.timestamp, other.dump)
+
+
+class DataHistory:
+    """ manage the revisions of the data collections """
+
+    max_revision_count = 20
+    subscribed_events = {"model-changed", "model-list-changed",
+                         "tool-changed", "tool-list-changed",
+                         "process-changed", "process-list-changed",
+                         "bounds-changed", "bounds-list-changed",
+                         "task-changed", "task-list-changed",
+                         "toolpath-changed", "toolpath-list-changed"}
+
+    def __init__(self):
+        self._revisions = collections.deque([], self.max_revision_count)
+        self._register_events()
+        # count "ignore change" requests (greater than zero -> ignore changes)
+        self._ignore_change_depth = 0
+        self._skipped_revision_store_count = 0
+        self._store_revision()
+
+    def __del__(self):
+        self._unregister_events()
+
+    def clear(self):
+        if self._revisions:
+            self._revisions.clear()
+            get_event_handler().emit_event("history-changed")
+
+    @contextlib.contextmanager
+    def merge_changes(self, no_store=False):
+        """ postpone storing individual revisions until the end of the context
+
+        Use this context if you want to force-merge multiple changes (e.g. load/restore) into a
+        single revision.
+        """
+        previous_count = self._skipped_revision_store_count
+        self._ignore_change_depth += 1
+        try:
+            yield
+        finally:
+            self._ignore_change_depth -= 1
+        # store a new revision if a change occurred in between
+        if not no_store and (previous_count != self._skipped_revision_store_count):
+            self._store_revision()
+
+    def get_undo_steps_count(self):
+        return len(self._revisions)
+
+    def restore_previous_state(self):
+        if len(self._revisions) > 1:
+            self._revisions.pop()
+            event_handler = get_event_handler()
+            # we do not expect a "change" since we switch to a previous state
+            with self.merge_changes(no_store=True):
+                with event_handler.blocked_events(self.subscribed_events, emit_after=True):
+                    source = io.StringIO(self._revisions[-1].dump)
+                    parse_yaml(source, reset=True)
+            _log.info("Restored previous state from history (%d/%d)",
+                      len(self._revisions) + 1, self.max_revision_count)
+            event_handler.emit_event("history-changed")
+            return True
+        else:
+            _log.warning("Failed to restore previous state from history: no more states left")
+            return False
+
+    def _register_events(self):
+        event_handler = get_event_handler()
+        for event in self.subscribed_events:
+            event_handler.register_event(event, self._store_revision)
+
+    def _unregister_events(self):
+        event_handler = get_event_handler()
+        for event in self.subscribed_events:
+            event_handler.unregister_event(event, self._store_revision)
+
+    def _store_revision(self):
+        if self._ignore_change_depth > 0:
+            self._skipped_revision_store_count += 1
+        else:
+            _log.info("Storing a state revision (%d/%d)",
+                      len(self._revisions) + 1, self.max_revision_count)
+            self._revisions.append(DataRevision())
+            get_event_handler().emit_event("history-changed")
+
+
+@contextlib.contextmanager
+def merge_history_and_block_events(settings):
+    """merge all history changes to a single one and block all events (emitting them later)"""
+    history = settings.get("history")
+    if history:
+        with history.merge_changes():
+            with settings.blocked_events(history.subscribed_events, emit_after=True):
+                yield
+    else:
+        yield
+
+
+@contextlib.contextmanager
+def rollback_history_on_failure(settings):
+    history = settings.get("history")
+    if history:
+        start_count = history.get_undo_steps_count()
+        try:
+            yield
+        except PycamBaseException as exc:
+            _log.warning("Reverting changes due a failure: %s", exc)
+            if start_count != history.get_undo_steps_count():
+                history.restore_previous_state()
diff --git a/pycam/Flow/parser.py b/pycam/Flow/parser.py
new file mode 100644
index 0000000..4ec0adc
--- /dev/null
+++ b/pycam/Flow/parser.py
@@ -0,0 +1,103 @@
+import yaml
+
+import pycam.Exporters.GCode.LinuxCNC
+import pycam.Importers
+import pycam.Plugins
+import pycam.Utils.log
+from pycam.workspace import CollectionName
+import pycam.workspace.data_models
+
+
+_log = pycam.Utils.log.get_logger()
+
+
+COLLECTIONS = (pycam.workspace.data_models.Tool,
+               pycam.workspace.data_models.Process,
+               pycam.workspace.data_models.Boundary,
+               pycam.workspace.data_models.Task,
+               pycam.workspace.data_models.Model,
+               pycam.workspace.data_models.Toolpath,
+               pycam.workspace.data_models.ExportSettings,
+               pycam.workspace.data_models.Export)
+
+
+def parse_yaml(source, excluded_sections=None, reset=False):
+    """ read processing data from a file-like source and fill the object collections
+
+    @param source: a file-like object (providing "read") referring to a yaml description
+    @param excluded_sections: if specified, this parameter is interpreted as a list of names of
+        sections (e.g. "tools") that should not be imported
+    @param reset: remove all previously stored objects (tools, processes, bounds, tasks, ...)
+    """
+    assert (not excluded_sections
+            or all(isinstance(item, CollectionName) for item in excluded_sections)), \
+           ("Invalid 'excluded_sections' specified (should contain CollectionName enums): {}"
+            .format(excluded_sections))
+    parsed = yaml.safe_load(source)
+    if parsed is None:
+        try:
+            fname = source.name
+        except AttributeError:
+            fname = str(source)
+        _log.warning("Ignoring empty parsed yaml source: %s", fname)
+        return
+    for item_class in COLLECTIONS:
+        section = item_class.collection_name
+        if excluded_sections and (section in excluded_sections):
+            continue
+        collection = item_class.get_collection()
+        if reset:
+            collection.clear()
+        count_before = len(collection)
+        _log.debug("Importing items into '%s'", section)
+        for name, data in parsed.get(section.value, {}).items():
+            if item_class(name, data) is None:
+                _log.error("Failed to import '%s' into '%s'.", name, section.value)
+        _log.info("Imported %d items into '%s'", len(collection) - count_before, section.value)
+
+
+def dump_yaml(target=None, excluded_sections=None):
+    """export the current data structure as a yaml representation
+
+    @param target: if a file-like object is given, then the output is written to this object.
+        Otherwise the resulting yaml string is returned.
+    @param excluded_sections: if specified, this parameter is interpreted as a list of names of
+        sections (e.g. "tools") that should not be exported
+    """
+    assert (not excluded_sections
+            or all(isinstance(item, CollectionName) for item in excluded_sections)), \
+           ("Invalid 'excluded_sections' specified (should contain CollectionName enums): {}"
+            .format(excluded_sections))
+    result = {}
+    for item_class in COLLECTIONS:
+        section = item_class.collection_name
+        if excluded_sections and (section in excluded_sections):
+            continue
+        result[section.value] = item_class.get_collection().get_dict(
+            with_application_attributes=True, without_uuids=True)
+    return yaml.dump(result, stream=target)
+
+
+def validate_collections():
+    """ try to verify all items in all collections
+
+    throws PycamBaseException in case of obvious errors
+    """
+    for item_class in COLLECTIONS:
+        collection = item_class.get_collection()
+        collection.validate()
+
+
+class RestoreCollectionsOnError:
+    """ restore the collections to their original state, if an exception is thrown meanwhile """
+
+    def __enter__(self):
+        self._original_dump = dump_yaml()
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        if exc_type is not None:
+            _log.warning("Reverting collection changes due to error: %s", exc_value)
+            # a problem occurred during the operation
+            parse_yaml(self._original_dump, reset=True)
+        # do not suppress exceptions
+        return False
diff --git a/pycam/Geometry/Letters.py b/pycam/Geometry/Letters.py
index 35c74c5..8040186 100644
--- a/pycam/Geometry/Letters.py
+++ b/pycam/Geometry/Letters.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
@@ -66,7 +65,7 @@ class Letter(TransformableContainer):
         return result
 
 
-class Charset(object):
+class Charset:
 
     def __init__(self, name=None, author=None, letterspacing=3.0, wordspacing=6.75,
                  linespacingfactor=1.0, encoding=None):
diff --git a/pycam/Geometry/Line.py b/pycam/Geometry/Line.py
index d4949fd..c0f1572 100644
--- a/pycam/Geometry/Line.py
+++ b/pycam/Geometry/Line.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2009 Lode Leroy
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
@@ -38,7 +37,7 @@ class Line(IDGenerator, TransformableContainer):
     __slots__ = ["id", "p1", "p2", "_vector", "_minx", "_maxx", "_miny", "_maxy", "_minz", "_maxz"]
 
     def __init__(self, p1, p2):
-        super(Line, self).__init__()
+        super().__init__()
         self.p1 = p1
         self.p2 = p2
         self.reset_cache()
@@ -108,7 +107,7 @@ class Line(IDGenerator, TransformableContainer):
         """
         return (self.p1, self.p2) < (other.p1, other.p2)
 
-    def next(self):
+    def __next__(self):
         yield "p1"
         yield "p2"
 
@@ -136,8 +135,8 @@ class Line(IDGenerator, TransformableContainer):
         if v is None:
             # for zero-length lines
             return self.p1
-        l = pdot(self.p1, v) - pdot(p, v)
-        return psub(self.p1, pmul(v, l))
+        dist = pdot(self.p1, v) - pdot(p, v)
+        return psub(self.p1, pmul(v, dist))
 
     def dist_to_point(self, p):
         return pdist(p, self.closest_point(p))
@@ -152,7 +151,7 @@ class Line(IDGenerator, TransformableContainer):
         # point is self.p1 or self.p2.
         return (dir1 == dir2 == self.dir) or (dir1 is None) or (dir2 is None)
 
-    def to_OpenGL(self, color=None, show_directions=False):
+    def to_opengl(self, color=None, show_directions=False):
         if not GL_enabled:
             return
         if color is not None:
diff --git a/pycam/Geometry/Matrix.py b/pycam/Geometry/Matrix.py
index 6b9118e..d3ab103 100644
--- a/pycam/Geometry/Matrix.py
+++ b/pycam/Geometry/Matrix.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -80,7 +79,7 @@ def get_rotation_matrix_from_to(v_orig, v_dest):
     @type v_dest: tuple(float) | list(float) | pycam.Geometry.Point
     @value v_dest: the destination 3d vector
     @rtype: tuple(tuple(float))
-    @return: the roation matrix (3x3)
+    @return: the rotation matrix (3x3)
     """
 
     v_orig_length = get_length(v_orig)
@@ -130,7 +129,7 @@ def get_rotation_matrix_axis_angle(rot_axis, rot_angle, use_radians=True):
     @type rot_angle: float
     @value rot_angle: rotation angle (radiant)
     @rtype: tuple(tuple(float))
-    @return: the roation matrix (3x3)
+    @return: the rotation matrix (3x3)
     """
     if not use_radians:
         rot_angle *= math.pi / 180
diff --git a/pycam/Geometry/Model.py b/pycam/Geometry/Model.py
index 940480e..7f92f8b 100644
--- a/pycam/Geometry/Model.py
+++ b/pycam/Geometry/Model.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
@@ -27,7 +26,7 @@ from pycam.Geometry.Matrix import TRANSFORMATIONS
 from pycam.Geometry.Line import Line
 from pycam.Geometry.Plane import Plane
 from pycam.Geometry.Polygon import Polygon
-from pycam.Geometry.PointUtils import pcross, pdist, pnorm, pnormalized, psub
+from pycam.Geometry.PointUtils import pcross, pdist, pmul, pnorm, pnormalized, psub
 from pycam.Geometry.Triangle import Triangle
 from pycam.Geometry.TriangleKdtree import TriangleKdtree
 from pycam.Toolpath import Bounds
@@ -40,17 +39,17 @@ def get_combined_bounds(models):
     low = [None, None, None]
     high = [None, None, None]
     for model in models:
-        if (low[0] is None) or (model.minx < low[0]):
+        if (low[0] is None) or ((model.minx is not None) and (model.minx < low[0])):
             low[0] = model.minx
-        if (low[1] is None) or (model.miny < low[1]):
+        if (low[1] is None) or ((model.miny is not None) and (model.miny < low[1])):
             low[1] = model.miny
-        if (low[2] is None) or (model.minz < low[2]):
+        if (low[2] is None) or ((model.minz is not None) and (model.minz < low[2])):
             low[2] = model.minz
-        if (high[0] is None) or (model.maxx > high[0]):
+        if (high[0] is None) or ((model.maxx is not None) and (model.maxx > high[0])):
             high[0] = model.maxx
-        if (high[1] is None) or (model.maxy > high[1]):
+        if (high[1] is None) or ((model.maxy is not None) and (model.maxy > high[1])):
             high[1] = model.maxy
-        if (high[2] is None) or (model.maxz > high[2]):
+        if (high[2] is None) or ((model.maxz is not None) and (model.maxz > high[2])):
             high[2] = model.maxz
     if None in low or None in high:
         return None
@@ -72,7 +71,7 @@ def get_combined_model(models):
 class BaseModel(IDGenerator, TransformableContainer):
 
     def __init__(self):
-        super(BaseModel, self).__init__()
+        super().__init__()
         self._item_groups = []
         self.name = "model%d" % self.id
         self.minx = None
@@ -97,7 +96,7 @@ class BaseModel(IDGenerator, TransformableContainer):
         """
         return sum([len(igroup) for igroup in self._item_groups])
 
-    def next(self):
+    def __next__(self):
         for item_group in self._item_groups:
             for item in item_group:
                 if isinstance(item, list):
@@ -196,6 +195,24 @@ class BaseModel(IDGenerator, TransformableContainer):
         matrix = ((scale_x, 0, 0, 0), (0, scale_y, 0, 0), (0, 0, scale_z, 0))
         self.transform_by_matrix(matrix, callback=self._get_progress_callback(callback))
 
+    def _shift_to_origin(self, position, callback=None):
+        if position != Point3D(0, 0, 0):
+            self.shift(*(pmul(position, -1)), callback=callback)
+
+    def _shift_origin_to(self, position, callback=None):
+        if position != Point3D(0, 0, 0):
+            self.shift(*position, callback=callback)
+
+    def rotate(self, center, axis_vector, angle, callback=None):
+        # shift the model to the rotation center
+        self._shift_to_origin(center, callback=callback)
+        # rotate the model
+        matrix = pycam.Geometry.Matrix.get_rotation_matrix_axis_angle(axis_vector, angle,
+                                                                      use_radians=False)
+        self.transform_by_matrix(matrix, callback=callback)
+        # shift the model back to its original position
+        self._shift_origin_to(center, callback=callback)
+
     def get_bounds(self):
         return Bounds(Bounds.TYPE_CUSTOM, Box3D(Point3D(self.minx, self.miny, self.minz),
                                                 Point3D(self.maxx, self.maxy, self.maxz)))
@@ -205,7 +222,7 @@ class Model(BaseModel):
 
     def __init__(self, use_kdtree=True):
         import pycam.Exporters.STLExporter
-        super(Model, self).__init__()
+        super().__init__()
         self._triangles = []
         self._item_groups.append(self._triangles)
         self._export_function = pycam.Exporters.STLExporter.STLExporter
@@ -235,14 +252,14 @@ class Model(BaseModel):
         return self.__uuid
 
     def append(self, item):
-        super(Model, self).append(item)
+        super().append(item)
         if isinstance(item, Triangle):
             self._triangles.append(item)
             # we assume, that the kdtree needs to be rebuilt again
             self._dirty = True
 
     def reset_cache(self):
-        super(Model, self).reset_cache()
+        super().reset_cache()
         # the triangle kdtree needs to be reset after transforming the model
         self._update_caches()
 
@@ -261,7 +278,7 @@ class Model(BaseModel):
             # update the kdtree, if new triangles were added meanwhile
             if self._dirty:
                 self._update_caches()
-            return self._t_kdtree.Search(minx, maxx, miny, maxy)
+            return self._t_kdtree.search(minx, maxx, miny, maxy)
         return self._triangles
 
     def get_waterline_contour(self, plane, callback=None):
@@ -293,7 +310,7 @@ class ContourModel(BaseModel):
 
     def __init__(self, plane=None):
         import pycam.Exporters.SVGExporter
-        super(ContourModel, self).__init__()
+        super().__init__()
         self.name = "contourmodel%d" % self.id
         if plane is None:
             # the default plane points upwards along the z axis
@@ -387,7 +404,7 @@ class ContourModel(BaseModel):
                 return
 
     def append(self, item, unify_overlaps=False, allow_reverse=False):
-        super(ContourModel, self).append(item)
+        super().append(item)
         if isinstance(item, Line):
             item_list = [item]
             if allow_reverse:
@@ -587,7 +604,7 @@ class ContourModel(BaseModel):
 
     def extrude(self, stepping=None, func=None, callback=None):
         """ do a spherical extrusion of a 2D model.
-        This is mainly useful for extruding text in a visually pleasent way ...
+        This is mainly useful for extruding text in a visually pleasant way ...
         """
         outer_polygons = [(poly, []) for poly in self._line_groups if poly.is_outer()]
         for poly in self._line_groups:
@@ -621,7 +638,7 @@ class ContourModel(BaseModel):
         return result or None
 
 
-class PolygonGroup(object):
+class PolygonGroup:
     """ A PolygonGroup consists of one outer and maybe multiple inner polygons.
     It is mainly used for 3D extrusion of polygons.
     """
@@ -830,7 +847,7 @@ class PolygonGroup(object):
         return self.z_level + func(line_distances[0])
 
 
-class TriangleOptimizer(object):
+class TriangleOptimizer:
 
     def __init__(self, callback=None):
         self.groups = {}
@@ -889,7 +906,7 @@ class TriangleOptimizer(object):
 class Rectangle(IDGenerator, TransformableContainer):
 
     def __init__(self, p1, p2, p3, p4, normal=None):
-        super(Rectangle, self).__init__()
+        super().__init__()
         if normal:
             orders = ((p1, p2, p3, p4), (p1, p2, p4, p3), (p1, p3, p2, p4), (p1, p3, p4, p2),
                       (p1, p4, p2, p3), (p1, p4, p3, p2))
@@ -922,7 +939,7 @@ class Rectangle(IDGenerator, TransformableContainer):
     def get_points(self):
         return (self.p1, self.p2, self.p3, self.p4)
 
-    def next(self):
+    def __next__(self):
         yield "p1"
         yield "p2"
         yield "p3"
diff --git a/pycam/Geometry/Path.py b/pycam/Geometry/Path.py
index 3a23e67..21b5b67 100644
--- a/pycam/Geometry/Path.py
+++ b/pycam/Geometry/Path.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 Copyright 2008 Lode Leroy
@@ -39,7 +38,7 @@ def get_point_object(point):
 class Path(IDGenerator):
 
     def __init__(self):
-        super(Path, self).__init__()
+        super().__init__()
         self.top_join = None
         self.bot_join = None
         self.winding = 0
diff --git a/pycam/Geometry/Plane.py b/pycam/Geometry/Plane.py
index 49a5d6e..87ff5f3 100644
--- a/pycam/Geometry/Plane.py
+++ b/pycam/Geometry/Plane.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2009 Lode Leroy
 
@@ -30,7 +29,7 @@ class Plane(IDGenerator, TransformableContainer):
     __slots__ = ["id", "p", "n"]
 
     def __init__(self, point, normal=None):
-        super(Plane, self).__init__()
+        super().__init__()
         if normal is None:
             normal = (0, 0, 1, 'v')
         self.p = point
@@ -47,7 +46,7 @@ class Plane(IDGenerator, TransformableContainer):
     def copy(self):
         return self.__class__(self.p, self.n)
 
-    def next(self):
+    def __next__(self):
         yield "p"
         yield "n"
 
@@ -70,9 +69,9 @@ class Plane(IDGenerator, TransformableContainer):
         denom = pdot(self.n, direction)
         if denom == 0:
             return (None, INFINITE)
-        l = -(pdot(self.n, point) - pdot(self.n, self.p)) / denom
-        cp = padd(point, pmul(direction, l))
-        return (cp, l)
+        l_len = -(pdot(self.n, point) - pdot(self.n, self.p)) / denom
+        cp = padd(point, pmul(direction, l_len))
+        return (cp, l_len)
 
     def intersect_triangle(self, triangle, counter_clockwise=False):
         """ Returns the line of intersection of a triangle with a plane.
@@ -87,11 +86,11 @@ class Plane(IDGenerator, TransformableContainer):
         for edge, point in ((triangle.e1, triangle.p1),
                             (triangle.e2, triangle.p2),
                             (triangle.e3, triangle.p3)):
-            cp, l = self.intersect_point(edge.dir, point)
+            cp, l_len = self.intersect_point(edge.dir, point)
             # filter all real collisions
             # We don't want to count vertices double -> thus we only accept
             # a distance that is lower than the length of the edge.
-            if (cp is not None) and (-epsilon < l < edge.len - epsilon):
+            if (cp is not None) and (-epsilon < l_len < edge.len - epsilon):
                 collisions.append(cp)
             elif (cp is None) and (pdot(self.n, edge.dir) == 0):
                 cp, dist = self.intersect_point(self.n, point)
diff --git a/pycam/Geometry/PointKdtree.py b/pycam/Geometry/PointKdtree.py
index 3e27531..922b3aa 100644
--- a/pycam/Geometry/PointKdtree.py
+++ b/pycam/Geometry/PointKdtree.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2009 Lode Leroy
 
@@ -19,10 +18,10 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
 from pycam.Geometry import epsilon
-from pycam.Geometry.kdtree import Node, kdtree
+from pycam.Geometry.kdtree import Node, Kdtree
 
 
-class PointKdtree(kdtree):
+class PointKdtree(Kdtree):
 
     __slots__ = ["_n", "tolerance"]
 
@@ -35,7 +34,7 @@ class PointKdtree(kdtree):
         for p in points:
             n = Node(p, p)
             nodes.append(n)
-        kdtree.__init__(self, nodes, cutoff, cutoff_distance)
+        Kdtree.__init__(self, nodes, cutoff, cutoff_distance)
 
     def dist(self, n1, n2):
         dx = n1.bound[0]-n2.bound[0]
@@ -43,7 +42,7 @@ class PointKdtree(kdtree):
         dz = n1.bound[2]-n2.bound[2]
         return dx*dx+dy*dy+dz*dz
 
-    def Point(self, x, y, z):
+    def point(self, x, y, z):
         if self._n:
             n = self._n
             n.bound = (x, y, z)
diff --git a/pycam/Geometry/PointUtils.py b/pycam/Geometry/PointUtils.py
index 7c158e8..3200b56 100644
--- a/pycam/Geometry/PointUtils.py
+++ b/pycam/Geometry/PointUtils.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 Copyright 2008-2009 Lode Leroy
diff --git a/pycam/Geometry/Polygon.py b/pycam/Geometry/Polygon.py
index 51f1cc2..0770217 100644
--- a/pycam/Geometry/Polygon.py
+++ b/pycam/Geometry/Polygon.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -45,7 +44,7 @@ class PolygonInTree(IDGenerator):
     """
 
     def __init__(self, polygon):
-        super(PolygonInTree, self).__init__()
+        super().__init__()
         self.start = polygon.get_points()[0]
         self.end = polygon.get_points()[-1]
         self.polygon = polygon
@@ -68,7 +67,7 @@ class PolygonInTree(IDGenerator):
         return pdist(other.start, self.end)
 
 
-class PolygonPositionSorter(object):
+class PolygonPositionSorter:
     """ sort PolygonInTree objects for a minimized way length.
     The sorter takes care that no polygons are processed before their children
     (inside polygons).
@@ -149,7 +148,7 @@ class PolygonPositionSorter(object):
         return result
 
 
-class PolygonSorter(object):
+class PolygonSorter:
     """ sort Plygon instances according to the following rules:
     * inner polygons first (with no inside polygons)
     * inner polygons with inside polygons that are already processed
@@ -206,7 +205,7 @@ class PolygonSorter(object):
 class Polygon(TransformableContainer):
 
     def __init__(self, plane=None):
-        super(Polygon, self).__init__()
+        super().__init__()
         if plane is None:
             # the default plane points upwards along the z axis
             plane = Plane((0, 0, 0), (0, 0, 1, 'v'))
@@ -271,6 +270,9 @@ class Polygon(TransformableContainer):
     def __len__(self):
         return len(self._points)
 
+    def __bool__(self):
+        return len(self._points) > 0
+
     def __str__(self):
         if self.is_closed:
             status = "closed"
@@ -308,7 +310,7 @@ class Polygon(TransformableContainer):
             # Test if the point equals the first or the last point of the polygon.
             return (point == self._points[-1]) or (point == self._points[0])
 
-    def next(self):
+    def __next__(self):
         yield "_points"
         yield self.plane
 
@@ -497,7 +499,7 @@ class Polygon(TransformableContainer):
 
     def get_lines(self):
         """ Caching is necessary to avoid constant recalculation due to
-        the "to_OpenGL" method.
+        the "to_opengl" method.
         """
         if self._lines_cache is None:
             # recalculate the line cache
@@ -511,7 +513,7 @@ class Polygon(TransformableContainer):
             self._lines_cache = lines
         return self._lines_cache[:]
 
-    def to_OpenGL(self, **kwords):
+    def to_opengl(self, **kwords):
         if not GL_enabled:
             return
         GL.glDisable(GL.GL_LIGHTING)
@@ -533,7 +535,7 @@ class Polygon(TransformableContainer):
             GL.glLineWidth(1.0)
         else:
             for line in self.get_lines():
-                line.to_OpenGL(**kwords)
+                line.to_opengl(**kwords)
 
     def _update_limits(self, point):
         if self.minx is None:
@@ -711,7 +713,7 @@ class Polygon(TransformableContainer):
                 split_here = True
             if split_here:
                 split_here = False
-                # check if any preceeding group fits to the point
+                # check if any preceding group fits to the point
                 for index, group in enumerate(groups):
                     if not group:
                         continue
@@ -808,7 +810,7 @@ class Polygon(TransformableContainer):
                         upper = middle
                     else:
                         if depth > 0:
-                            # the original polygon was splitted or modified
+                            # the original polygon was split or modified
                             print("Next level: %s" % str(middle))
                             shifted_sub_polygons = []
                             for sub_poly in result:
diff --git a/pycam/Geometry/PolygonExtractor.py b/pycam/Geometry/PolygonExtractor.py
index d2cf13a..27523b2 100644
--- a/pycam/Geometry/PolygonExtractor.py
+++ b/pycam/Geometry/PolygonExtractor.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2009 Lode Leroy
 
@@ -28,7 +27,7 @@ DEBUG_POLYGONEXTRACTOR2 = False
 DEBUG_POLYGONEXTRACTOR3 = False
 
 
-class PolygonExtractor(object):
+class PolygonExtractor:
     CONTOUR = 1
     MONOTONE = 2
 
@@ -153,13 +152,13 @@ class PolygonExtractor(object):
                         self.svg.fill("red")
                     else:
                         self.svg.fill("blue")
-                    self.svg.AddDot(p[0], p[1])
-                    self.svg.AddText(p[0], p[1], str(p.id))
+                    self.svg.add_dot(p[0], p[1])
+                    self.svg.add_text(p[0], p[1], str(p.id))
                     if prev:
-                        self.svg.AddLine(p[0], p[1], prev[0], prev[1])
+                        self.svg.add_line(p[0], p[1], prev[0], prev[1])
                     prev = p
                 p = path.points[0]
-                self.svg.AddLine(p[0], p[1], prev[0], prev[1])
+                self.svg.add_line(p[0], p[1], prev[0], prev[1])
 
             self.svg.close()
             self.cont.close()
@@ -173,8 +172,8 @@ class PolygonExtractor(object):
     def append(self, p):
         if DEBUG_POLYGONEXTRACTOR3:
             p.dir = self.current_dir
-            self.svg.AddDot(p[0], p[1])
-            self.svg.AddText(p[0], p[1], str(p.id))
+            self.svg.add_dot(p[0], p[1])
+            self.svg.add_text(p[0], p[1], str(p.id))
         self.curr_line.append(p)
 
     def end_scanline(self):
@@ -256,12 +255,12 @@ class PolygonExtractor(object):
 
             if (prev_point.remains() >= 2) and (curr_point.remains() == 0):
                 # old path ends
-                p0 = curr_path.takeNext()
+                p0 = curr_path.take_next()
                 if DEBUG_POLYGONEXTRACTOR:
                     print("end path %d" % p0.id)
                 self.all_path_list.append(p0)
                 next(prev_point)
-                p1 = curr_path.takeNext()
+                p1 = curr_path.take_next()
                 if DEBUG_POLYGONEXTRACTOR:
                     print("end path %d" % p1.id)
                 self.all_path_list.append(p1)
@@ -302,12 +301,12 @@ class PolygonExtractor(object):
                 elif c0[0] > p1[0]:
                     # new segment is completely to the right
                     # old path ends
-                    s0 = curr_path.takeNext()
+                    s0 = curr_path.take_next()
                     if DEBUG_POLYGONEXTRACTOR:
                         print("end path %d" % s0.id)
                     self.all_path_list.append(s0)
                     next(prev_point)
-                    s1 = curr_path.takeNext()
+                    s1 = curr_path.take_next()
                     if DEBUG_POLYGONEXTRACTOR:
                         print("end path %d" % s1.id)
                     self.all_path_list.append(s1)
@@ -339,8 +338,8 @@ class PolygonExtractor(object):
                             if p2[0] <= c1[0]:
                                 overlap_p = True
                                 if self.policy == PolygonExtractor.CONTOUR:
-                                    s0 = curr_path.takeNext()
-                                    s1 = curr_path.takeNext()
+                                    s0 = curr_path.take_next()
+                                    s1 = curr_path.take_next()
                                     if curr_path.remains() >= 1:
                                         right_path = curr_path.peek()
                                     self.all_path_list.append(s0)
@@ -350,7 +349,7 @@ class PolygonExtractor(object):
                                     s0.bot_join = s1
                                     s1.bot_join = s0
                                 elif self.policy == PolygonExtractor.MONOTONE:
-                                    s0 = curr_path.takeNext()
+                                    s0 = curr_path.take_next()
                                     left_path.bot_join = s0
                                     s0.bot_join = left_path
                                     if DEBUG_POLYGONEXTRACTOR:
@@ -397,8 +396,8 @@ class PolygonExtractor(object):
                                 elif self.policy == PolygonExtractor.MONOTONE:
                                     s0.append(left_point)
                                     s1.append(c1)
-                                    curr_path.insertBefore(s0)
-                                    curr_path.insertBefore(s1)
+                                    curr_path.insert_before(s0)
+                                    curr_path.insert_before(s1)
                                     left_point = c2
                                 if curr_point.remains() >= 1:
                                     c1 = curr_point.peek(0)
@@ -437,11 +436,11 @@ class PolygonExtractor(object):
                     self.cont.fill("red")
                 else:
                     self.cont.fill("blue")
-                self.cont.AddDot(p[0], p[1])
+                self.cont.add_dot(p[0], p[1])
                 self.cont.fill("black")
-                self.cont.AddText(p[0], p[1], str(p.id))
+                self.cont.add_text(p[0], p[1], str(p.id))
                 if prev:
-                    self.cont.AddLine(prev[0], prev[1], p[0], p[1])
+                    self.cont.add_line(prev[0], prev[1], p[0], p[1])
                 prev = p
 
         if DEBUG_POLYGONEXTRACTOR:
@@ -504,12 +503,12 @@ class PolygonExtractor(object):
 
             if (prev_point.remains() >= 2) and (curr_point.remains() == 0):
                 # old path ends
-                p0 = curr_path.takeNext()
+                p0 = curr_path.take_next()
                 if DEBUG_POLYGONEXTRACTOR:
                     print("end path %d" % p0.id)
                 self.all_path_list.append(p0)
                 next(prev_point)
-                p1 = curr_path.takeNext()
+                p1 = curr_path.take_next()
                 if DEBUG_POLYGONEXTRACTOR:
                     print("end path %d" % p1.id)
                 self.all_path_list.append(p1)
@@ -550,12 +549,12 @@ class PolygonExtractor(object):
                 elif c0[1] > p1[1]:
                     # new segment is completely to the right
                     # old path ends
-                    s0 = curr_path.takeNext()
+                    s0 = curr_path.take_next()
                     if DEBUG_POLYGONEXTRACTOR:
                         print("end path %d" % s0.id)
                     self.all_path_list.append(s0)
                     next(prev_point)
-                    s1 = curr_path.takeNext()
+                    s1 = curr_path.take_next()
                     if DEBUG_POLYGONEXTRACTOR:
                         print("end path %d" % s1.id)
                     self.all_path_list.append(s1)
@@ -587,8 +586,8 @@ class PolygonExtractor(object):
                             if p2[1] <= c1[1]:
                                 overlap_p = True
                                 if self.policy == PolygonExtractor.CONTOUR:
-                                    s0 = curr_path.takeNext()
-                                    s1 = curr_path.takeNext()
+                                    s0 = curr_path.take_next()
+                                    s1 = curr_path.take_next()
                                     if curr_path.remains() >= 1:
                                         right_path = curr_path.peek()
                                     self.all_path_list.append(s0)
@@ -598,7 +597,7 @@ class PolygonExtractor(object):
                                     s0.bot_join = s1
                                     s1.bot_join = s0
                                 elif self.policy == PolygonExtractor.MONOTONE:
-                                    s0 = curr_path.takeNext()
+                                    s0 = curr_path.take_next()
                                     left_path.bot_join = s0
                                     s0.bot_join = left_path
                                     if DEBUG_POLYGONEXTRACTOR:
@@ -645,8 +644,8 @@ class PolygonExtractor(object):
                                 elif self.policy == PolygonExtractor.MONOTONE:
                                     s0.append(left_point)
                                     s1.append(c1)
-                                    curr_path.insertBefore(s0)
-                                    curr_path.insertBefore(s1)
+                                    curr_path.insert_before(s0)
+                                    curr_path.insert_before(s1)
                                     left_point = c2
                                 if curr_point.remains() >= 1:
                                     c1 = curr_point.peek(0)
diff --git a/pycam/Geometry/Triangle.py b/pycam/Geometry/Triangle.py
index 7db92ea..992a09f 100644
--- a/pycam/Geometry/Triangle.py
+++ b/pycam/Geometry/Triangle.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
@@ -44,7 +43,7 @@ class Triangle(IDGenerator, TransformableContainer):
 
     def __init__(self, p1=None, p2=None, p3=None, n=None):
         # points are expected to be in ClockWise order
-        super(Triangle, self).__init__()
+        super().__init__()
         self.p1 = p1
         self.p2 = p2
         self.p3 = p3
@@ -90,7 +89,7 @@ class Triangle(IDGenerator, TransformableContainer):
     def copy(self):
         return self.__class__(self.p1, self.p2, self.p3, self.normal)
 
-    def next(self):
+    def __next__(self):
         yield "p1"
         yield "p2"
         yield "p3"
@@ -103,7 +102,7 @@ class Triangle(IDGenerator, TransformableContainer):
         # tree points per triangle
         return 7
 
-    def to_OpenGL(self, color=None, show_directions=False):
+    def to_opengl(self, color=None, show_directions=False):
         if not GL_enabled:
             return
         if color is not None:
@@ -200,12 +199,12 @@ class Triangle(IDGenerator, TransformableContainer):
         denom = dot00 * dot11 - dot01 * dot01
         if denom == 0:
             return False
-        invDenom = 1.0 / denom
+        inv_denom = 1.0 / denom
         # Originally, "u" and "v" are multiplied with "1/denom".
         # We don't do this to avoid division by zero (for triangles that are
         # "almost" invalid).
-        u = (dot11 * dot02 - dot01 * dot12) * invDenom
-        v = (dot00 * dot12 - dot01 * dot02) * invDenom
+        u = (dot11 * dot02 - dot01 * dot12) * inv_denom
+        v = (dot00 * dot12 - dot01 * dot02) * inv_denom
         # Check if point is in triangle
         return (u > 0) and (v > 0) and (u + v < 1)
 
diff --git a/pycam/Geometry/TriangleKdtree.py b/pycam/Geometry/TriangleKdtree.py
index bb8534a..d0a6e1e 100644
--- a/pycam/Geometry/TriangleKdtree.py
+++ b/pycam/Geometry/TriangleKdtree.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2009 Lode Leroy
 
@@ -18,12 +17,12 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
-from pycam.Geometry.kdtree import kdtree, Node
+from pycam.Geometry.kdtree import Kdtree, Node
 
 overlaptest = True
 
 
-def SearchKdtree2d(tree, minx, maxx, miny, maxy):
+def search_kdtree_2d(tree, minx, maxx, miny, maxy):
     if tree.bucket:
         triangles = []
         for n in tree.nodes:
@@ -41,37 +40,37 @@ def SearchKdtree2d(tree, minx, maxx, miny, maxy):
             if maxx < tree.minval:
                 return []
             elif maxx < tree.cutval:
-                return SearchKdtree2d(tree.lo, minx, maxx, miny, maxy)
+                return search_kdtree_2d(tree.lo, minx, maxx, miny, maxy)
             else:
-                return SearchKdtree2d(tree.lo, minx, maxx, miny, maxy) \
-                        + SearchKdtree2d(tree.hi, minx, maxx, miny, maxy)
+                return (search_kdtree_2d(tree.lo, minx, maxx, miny, maxy)
+                        + search_kdtree_2d(tree.hi, minx, maxx, miny, maxy))
         elif tree.cutdim == 1:
             if minx > tree.maxval:
                 return []
             elif minx > tree.cutval:
-                return SearchKdtree2d(tree.hi, minx, maxx, miny, maxy)
+                return search_kdtree_2d(tree.hi, minx, maxx, miny, maxy)
             else:
-                return SearchKdtree2d(tree.lo, minx, maxx, miny, maxy) \
-                        + SearchKdtree2d(tree.hi, minx, maxx, miny, maxy)
+                return (search_kdtree_2d(tree.lo, minx, maxx, miny, maxy)
+                        + search_kdtree_2d(tree.hi, minx, maxx, miny, maxy))
         elif tree.cutdim == 2:
             if maxy < tree.minval:
                 return []
             elif maxy < tree.cutval:
-                return SearchKdtree2d(tree.lo, minx, maxx, miny, maxy)
+                return search_kdtree_2d(tree.lo, minx, maxx, miny, maxy)
             else:
-                return SearchKdtree2d(tree.lo, minx, maxx, miny, maxy) \
-                        + SearchKdtree2d(tree.hi, minx, maxx, miny, maxy)
+                return (search_kdtree_2d(tree.lo, minx, maxx, miny, maxy)
+                        + search_kdtree_2d(tree.hi, minx, maxx, miny, maxy))
         elif tree.cutdim == 3:
             if miny > tree.maxval:
                 return []
             elif miny > tree.cutval:
-                return SearchKdtree2d(tree.hi, minx, maxx, miny, maxy)
+                return search_kdtree_2d(tree.hi, minx, maxx, miny, maxy)
             else:
-                return SearchKdtree2d(tree.lo, minx, maxx, miny, maxy) \
-                        + SearchKdtree2d(tree.hi, minx, maxx, miny, maxy)
+                return (search_kdtree_2d(tree.lo, minx, maxx, miny, maxy)
+                        + search_kdtree_2d(tree.hi, minx, maxx, miny, maxy))
 
 
-class TriangleKdtree(kdtree):
+class TriangleKdtree(Kdtree):
 
     __slots__ = []
 
@@ -83,7 +82,7 @@ class TriangleKdtree(kdtree):
                          min(t.p1[1], t.p2[1], t.p3[1]),
                          max(t.p1[1], t.p2[1], t.p3[1])))
             nodes.append(n)
-        super(TriangleKdtree, self).__init__(nodes, cutoff, cutoff_distance)
+        super().__init__(nodes, cutoff, cutoff_distance)
 
-    def Search(self, minx, maxx, miny, maxy):
-        return SearchKdtree2d(self, minx, maxx, miny, maxy)
+    def search(self, minx, maxx, miny, maxy):
+        return search_kdtree_2d(self, minx, maxx, miny, maxy)
diff --git a/pycam/Geometry/__init__.py b/pycam/Geometry/__init__.py
index 17db0fa..428d4d7 100644
--- a/pycam/Geometry/__init__.py
+++ b/pycam/Geometry/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 Copyright 2008-2009 Lode Leroy
@@ -59,16 +58,53 @@ Point3D = collections.namedtuple("Point3D", ("x", "y", "z"))
 Vector3D = collections.namedtuple("Vector3D", ("x", "y", "z"))
 
 
-class Box3D(collections.namedtuple("Box3D", ("lower", "upper"))):
+class DimensionalObject:
+    """ mixin class for providing 3D objects with size information
+
+    At least the attributes min[xyz] and max[xyz] must be provided by the inheriting class.
+    """
+
+    __slots__ = ()
 
     def get_diagonal(self):
-        return Vector3D(*[high - low for low, high in zip(self.lower, self.upper)])
+        return Vector3D(self.maxx - self.minx, self.maxy - self.miny, self.maxz - self.minz)
 
     def get_center(self):
-        return Point3D(*[(low + high / 2) for low, high in zip(self.lower, self.upper)])
+        return Point3D((self.maxx + self.minx) / 2,
+                       (self.maxy + self.miny) / 2,
+                       (self.maxz + self.minz) / 2)
 
     def get_dimensions(self):
-        return Point3D(*[high - low for low, high in zip(self.lower, self.upper)])
+        return self.get_diagonal()
+
+
+class Box3D(collections.namedtuple("Box3D", ("lower", "upper")), DimensionalObject):
+
+    __slots__ = ()
+
+    @property
+    def minx(self):
+        return self.lower.x
+
+    @property
+    def miny(self):
+        return self.lower.y
+
+    @property
+    def minz(self):
+        return self.lower.z
+
+    @property
+    def maxx(self):
+        return self.upper.x
+
+    @property
+    def maxy(self):
+        return self.upper.y
+
+    @property
+    def maxz(self):
+        return self.upper.z
 
 
 def _id_generator():
@@ -78,7 +114,7 @@ def _id_generator():
         current_id += 1
 
 
-class IDGenerator(object):
+class IDGenerator:
 
     __id_gen_func = _id_generator()
 
@@ -86,7 +122,7 @@ class IDGenerator(object):
         self.id = next(self.__id_gen_func)
 
 
-class TransformableContainer(object):
+class TransformableContainer(DimensionalObject):
     """ a base class for geometrical objects containing other elements
 
     This class is mainly used for simplifying model transformations in a
@@ -146,7 +182,7 @@ class TransformableContainer(object):
     def __iter__(self):
         return self
 
-    def next(self):
+    def __next__(self):
         raise NotImplementedError(("'%s' is a subclass of 'TransformableContainer' but it fails "
                                    "to implement the 'next' generator") % str(type(self)))
 
diff --git a/pycam/Geometry/intersection.py b/pycam/Geometry/intersection.py
index 886ac12..b460853 100644
--- a/pycam/Geometry/intersection.py
+++ b/pycam/Geometry/intersection.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 
@@ -207,12 +206,12 @@ def intersect_sphere_point(center, radius, radiussq, direction, point):
     if d < 0:
         return (None, None, INFINITE)
     if a < 0:
-        l = (-b + sqrt(d)) / (2 * a)
+        dist = (-b + sqrt(d)) / (2 * a)
     else:
-        l = (-b - sqrt(d)) / (2 * a)
+        dist = (-b - sqrt(d)) / (2 * a)
     # cutter contact point
-    ccp = padd(point, pmul(direction, -l))
-    return (ccp, point, l)
+    ccp = padd(point, pmul(direction, -dist))
+    return (ccp, point, dist)
 
 
 def intersect_sphere_line(center, radius, radiussq, direction, edge):
@@ -280,8 +279,8 @@ def intersect_torus_point(center, axis, majorradius, minorradius, majorradiussq,
         l_sq = (point[0]-center[0]) ** 2 + (point[1] - center[1]) ** 2
         if (l_sq < minlsq + epsilon) or (l_sq > maxlsq - epsilon):
             return (None, None, INFINITE)
-        l = sqrt(l_sq)
-        z_sq = minorradiussq - (majorradius - l) ** 2
+        l_len = sqrt(l_sq)
+        z_sq = minorradiussq - (majorradius - l_len) ** 2
         if z_sq < 0:
             return (None, None, INFINITE)
         z = sqrt(z_sq)
@@ -292,12 +291,12 @@ def intersect_torus_point(center, axis, majorradius, minorradius, majorradiussq,
         z = point[2] - center[2]
         if abs(z) > minorradius - epsilon:
             return (None, None, INFINITE)
-        l = majorradius + sqrt(minorradiussq - z * z)
+        l_len = majorradius + sqrt(minorradiussq - z * z)
         n = pcross(axis, direction)
         d = pdot(n, point) - pdot(n, center)
-        if abs(d) > l - epsilon:
+        if abs(d) > l_len - epsilon:
             return (None, None, INFINITE)
-        a = sqrt(l * l - d * d)
+        a = sqrt(l_len * l_len - d * d)
         ccp = padd(padd(center, pmul(n, d)), pmul(direction, a))
         ccp = (ccp[0], ccp[1], point[2])
         dist = pdot(psub(point, ccp), direction)
@@ -312,18 +311,19 @@ def intersect_torus_point(center, axis, majorradius, minorradius, majorradiussq,
         x1_x1 = pdot(x1, x1)
         x1_v1 = pdot(x1, v1)
         v1_v1 = pdot(v1, v1)
-        R2 = majorradiussq
-        r2 = minorradiussq
+        r2_major = majorradiussq
+        r2_minor = minorradiussq
         a = 1.0
         b = 4 * x_v
-        c = 2 * (x_x + 2 * x_v ** 2 + (R2 - r2) - 2 * R2 * v1_v1)
-        d = 4 * (x_x * x_v + x_v * (R2 - r2) - 2 * R2 * x1_v1)
-        e = (x_x) ** 2 + 2 * x_x * (R2 - r2) + (R2 - r2) ** 2 - 4 * R2 * x1_x1
+        c = 2 * (x_x + 2 * x_v ** 2 + (r2_major - r2_minor) - 2 * r2_major * v1_v1)
+        d = 4 * (x_x * x_v + x_v * (r2_major - r2_minor) - 2 * r2_major * x1_v1)
+        e = ((x_x) ** 2 + 2 * x_x * (r2_major - r2_minor) + (r2_major - r2_minor) ** 2
+             - 4 * r2_major * x1_x1)
         r = poly4_roots(a, b, c, d, e)
         if not r:
             return (None, None, INFINITE)
         else:
-            l = min(r)
-        ccp = padd(point, pmul(direction, -l))
-        dist = l
+            l_len = min(r)
+        ccp = padd(point, pmul(direction, -l_len))
+        dist = l_len
     return (ccp, point, dist)
diff --git a/pycam/Geometry/kdtree.py b/pycam/Geometry/kdtree.py
index b74f2da..ac36876 100644
--- a/pycam/Geometry/kdtree.py
+++ b/pycam/Geometry/kdtree.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 
@@ -27,7 +26,7 @@ except ImportError:
 from pycam.Geometry import IDGenerator
 
 
-class Node(object):
+class Node:
 
     __slots__ = ["obj", "bound"]
 
@@ -64,13 +63,13 @@ def find_max_spread(nodes):
     return (maxspreaddim, maxspread)
 
 
-class kdtree(IDGenerator):
+class Kdtree(IDGenerator):
 
     __slots__ = ["bucket", "dim", "cutoff", "cutoff_distance", "nodes", "cutdim", "minval",
                  "maxval", "cutval", "hi", "lo"]
 
     def __init__(self, nodes, cutoff, cutoff_distance):
-        super(kdtree, self).__init__()
+        super().__init__()
         self.bucket = False
         if nodes and len(nodes) > 0:
             self.dim = len(nodes[0].bound)
@@ -91,12 +90,12 @@ class kdtree(IDGenerator):
                 self.bucket = False
                 self.cutdim = cutdim
                 nodes.sort(key=lambda item: item.bound[cutdim])
-                median = len(nodes) / 2
+                median = len(nodes) // 2
                 self.minval = nodes[0].bound[cutdim]
                 self.maxval = nodes[-1].bound[cutdim]
                 self.cutval = nodes[median].bound[cutdim]
-                self.lo = kdtree(nodes[0:median], cutoff, cutoff_distance)
-                self.hi = kdtree(nodes[median:], cutoff, cutoff_distance)
+                self.lo = Kdtree(nodes[0:median], cutoff, cutoff_distance)
+                self.hi = Kdtree(nodes[median:], cutoff, cutoff_distance)
 
     def __repr__(self):
         if self.bucket:
@@ -111,7 +110,7 @@ class kdtree(IDGenerator):
         else:
             return "(%s,%d:%g,%s)" % (self.lo, self.cutdim, self.cutval, self.hi)
 
-    def to_OpenGL(self, minx, maxx, miny, maxy, minz, maxz):
+    def to_opengl(self, minx, maxx, miny, maxy, minz, maxz):
         if not GL_enabled:
             return
         if self.bucket:
@@ -145,31 +144,31 @@ class kdtree(IDGenerator):
             GL.glEnd()
         elif self.dim == 6:
             if self.cutdim == 0 or self.cutdim == 2:
-                self.lo.to_OpenGL(minx, self.cutval, miny, maxy, minz, maxz)
-                self.hi.to_OpenGL(self.cutval, maxx, miny, maxy, minz, maxz)
+                self.lo.to_opengl(minx, self.cutval, miny, maxy, minz, maxz)
+                self.hi.to_opengl(self.cutval, maxx, miny, maxy, minz, maxz)
             elif self.cutdim == 1 or self.cutdim == 3:
-                self.lo.to_OpenGL(minx, maxx, miny, self.cutval, minz, maxz)
-                self.hi.to_OpenGL(minx, maxx, self.cutval, maxy, minz, maxz)
+                self.lo.to_opengl(minx, maxx, miny, self.cutval, minz, maxz)
+                self.hi.to_opengl(minx, maxx, self.cutval, maxy, minz, maxz)
             elif self.cutdim == 4 or self.cutdim == 5:
-                self.lo.to_OpenGL(minx, maxx, miny, maxx, minz, self.cutval)
-                self.hi.to_OpenGL(minx, maxx, miny, maxy, self.cutval, maxz)
+                self.lo.to_opengl(minx, maxx, miny, maxx, minz, self.cutval)
+                self.hi.to_opengl(minx, maxx, miny, maxy, self.cutval, maxz)
         elif self.dim == 4:
             if self.cutdim == 0 or self.cutdim == 2:
-                self.lo.to_OpenGL(minx, self.cutval, miny, maxy, minz, maxz)
-                self.hi.to_OpenGL(self.cutval, maxx, miny, maxy, minz, maxz)
+                self.lo.to_opengl(minx, self.cutval, miny, maxy, minz, maxz)
+                self.hi.to_opengl(self.cutval, maxx, miny, maxy, minz, maxz)
             elif self.cutdim == 1 or self.cutdim == 3:
-                self.lo.to_OpenGL(minx, maxx, miny, self.cutval, minz, maxz)
-                self.hi.to_OpenGL(minx, maxx, self.cutval, maxy, minz, maxz)
+                self.lo.to_opengl(minx, maxx, miny, self.cutval, minz, maxz)
+                self.hi.to_opengl(minx, maxx, self.cutval, maxy, minz, maxz)
         elif self.dim == 3:
             if self.cutdim == 0:
-                self.lo.to_OpenGL(minx, self.cutval, miny, maxy, minz, maxz)
-                self.hi.to_OpenGL(self.cutval, maxx, miny, maxy, minz, maxz)
+                self.lo.to_opengl(minx, self.cutval, miny, maxy, minz, maxz)
+                self.hi.to_opengl(self.cutval, maxx, miny, maxy, minz, maxz)
             elif self.cutdim == 1:
-                self.lo.to_OpenGL(minx, maxx, miny, self.cutval, minz, maxz)
-                self.hi.to_OpenGL(minx, maxx, self.cutval, maxy, minz, maxz)
+                self.lo.to_opengl(minx, maxx, miny, self.cutval, minz, maxz)
+                self.hi.to_opengl(minx, maxx, self.cutval, maxy, minz, maxz)
             elif self.cutdim == 2:
-                self.lo.to_OpenGL(minx, maxx, miny, maxy, minz, self.cutval)
-                self.hi.to_OpenGL(minx, maxx, miny, maxy, self.cutval, maxz)
+                self.lo.to_opengl(minx, maxx, miny, maxy, minz, self.cutval)
+                self.hi.to_opengl(minx, maxx, miny, maxy, self.cutval, maxz)
 
     def dist(self, n1, n2):
         dist = 0
@@ -219,12 +218,12 @@ class kdtree(IDGenerator):
                 (cutdim, spread) = find_max_spread(self.nodes)
                 self.cutdim = cutdim
                 self.nodes.sort(key=lambda node: node.bound[cutdim])
-                median = len(self.nodes) / 2
+                median = len(self.nodes) // 2
                 self.minval = self.nodes[0].bound[cutdim]
                 self.maxval = self.nodes[-1].bound[cutdim]
                 self.cutval = self.nodes[median].bound[cutdim]
-                self.lo = kdtree(self.nodes[0:median], self.cutoff, self.cutoff_distance)
-                self.hi = kdtree(self.nodes[median:], self.cutoff, self.cutoff_distance)
+                self.lo = Kdtree(self.nodes[0:median], self.cutoff, self.cutoff_distance)
+                self.hi = Kdtree(self.nodes[median:], self.cutoff, self.cutoff_distance)
         else:
             if node.bound[self.cutdim] <= self.cutval:
                 self.lo.insert(node)
diff --git a/pycam/Geometry/utils.py b/pycam/Geometry/utils.py
index 5ce289f..b8bc282 100644
--- a/pycam/Geometry/utils.py
+++ b/pycam/Geometry/utils.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008 Lode Leroy
 
@@ -79,7 +78,7 @@ def get_angle_pi(p1, p2, p3, up_vector, pi_factor=False):
         return angle
 
 
-def get_points_of_arc(center, radius, a1, a2, plane=None, cords=32):
+def get_points_of_arc(center, radius, start_degree, end_degree, plane=None, cords=32):
     """ return the points for an approximated arc
 
     The arc is interpreted as a full circle, if the difference between the start and end angle is
@@ -89,10 +88,10 @@ def get_points_of_arc(center, radius, a1, a2, plane=None, cords=32):
     @type center: pycam.Geometry.Point.Point
     @param radius: radius of the arc
     @type radius: float
-    @param a1: angle of the start (in degree)
-    @type a1: float
-    @param a2: angle of the end (in degree)
-    @type a2: float
+    @param start_degree: angle of the start (in degree)
+    @type start_degree: float
+    @param end_degree: angle of the end (in degree)
+    @type end_degree: float
     @param plane: the plane of the circle (default: xy-plane)
     @type plane: pycam.Geometry.Plane.Plane
     @param cords: number of lines for a full circle
@@ -101,9 +100,9 @@ def get_points_of_arc(center, radius, a1, a2, plane=None, cords=32):
     @rtype: list(pycam.Geometry.Point.Point)
     """
     # TODO: implement 3D arc and respect "plane"
-    a1 = math.pi * a1 / 180
-    a2 = math.pi * a2 / 180
-    angle_diff = a2 - a1
+    start_radians = math.pi * start_degree / 180
+    end_radians = math.pi * end_degree / 180
+    angle_diff = end_radians - start_radians
     while angle_diff < 0:
         angle_diff += 2 * math.pi
         if angle_diff == 0:
@@ -120,9 +119,9 @@ def get_points_of_arc(center, radius, a1, a2, plane=None, cords=32):
     def get_angle_point(angle):
         return (center[0] + radius * math.cos(angle), center[1] + radius * math.sin(angle), 0)
 
-    points.append(get_angle_point(a1))
+    points.append(get_angle_point(start_radians))
     for index in range(num_of_segments):
-        points.append(get_angle_point(a1 + angle_segment * (index + 1)))
+        points.append(get_angle_point(start_radians + angle_segment * (index + 1)))
     return points
 
 
diff --git a/pycam/Gui/Console.py b/pycam/Gui/Console.py
index c3aac42..9b5f7b1 100644
--- a/pycam/Gui/Console.py
+++ b/pycam/Gui/Console.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -21,7 +20,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 import os
 
 
-class ConsoleProgressBar(object):
+class ConsoleProgressBar:
 
     STYLE_NONE = 0
     STYLE_TEXT = 1
diff --git a/pycam/Gui/ControlsGTK.py b/pycam/Gui/ControlsGTK.py
index 55b8bba..017f256 100644
--- a/pycam/Gui/ControlsGTK.py
+++ b/pycam/Gui/ControlsGTK.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,8 +19,8 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 import collections
 
-import gtk
-import gobject
+from gi.repository import Gtk
+from gi.repository import GObject
 
 import pycam.Utils.log
 
@@ -53,7 +52,7 @@ def _output_conversion(func):
     return _output_conversion_wrapper
 
 
-class WidgetBaseClass(object):
+class WidgetBaseClass:
 
     def get_widget(self):
         return self.control
@@ -64,6 +63,9 @@ class WidgetBaseClass(object):
         else:
             self.get_widget().hide()
 
+    def is_visible(self):
+        return self.get_widget().props.visible
+
 
 class InputBaseClass(WidgetBaseClass):
 
@@ -93,8 +95,8 @@ class InputNumber(InputBaseClass):
     def __init__(self, digits=0, start=0, lower=-999999, upper=999999, increment=1,
                  change_handler=None):
         # beware: the default values for lower/upper are both zero
-        adjustment = gtk.Adjustment(value=start, lower=lower, upper=upper, step_incr=increment)
-        self.control = gtk.SpinButton(adjustment, digits=digits)
+        adjustment = Gtk.Adjustment(value=start, lower=lower, upper=upper, step_incr=increment)
+        self.control = Gtk.SpinButton.new(adjustment, climb_rate=1, digits=digits)
         self.control.set_value(start)
         self.connect("value-changed", change_handler)
 
@@ -110,7 +112,8 @@ class InputNumber(InputBaseClass):
 class InputString(InputBaseClass):
 
     def __init__(self, start="", max_length=32, change_handler=None):
-        self.control = gtk.Entry(max_length)
+        self.control = Gtk.Entry.new()
+        self.control.set_max_length(max_length)
         self.control.set_text(start)
         self.connect("changed", change_handler)
 
@@ -126,15 +129,15 @@ class InputString(InputBaseClass):
 class InputChoice(InputBaseClass):
 
     def __init__(self, choices, start=None, change_handler=None):
-        self.model = gtk.ListStore(gobject.TYPE_STRING)
+        self.model = Gtk.ListStore(GObject.TYPE_STRING)
         self._values = []
         for label, value in choices:
             self.model.append((label, ))
             self._values.append(value)
-        renderer = gtk.CellRendererText()
-        self.control = gtk.ComboBox(self.model)
-        self.control.pack_start(renderer)
-        self.control.set_attributes(renderer, text=0)
+        renderer = Gtk.CellRendererText()
+        self.control = Gtk.ComboBox.new_with_model(self.model)
+        self.control.pack_start(renderer, expand=False)
+        self.control.add_attribute(renderer, 'text', 0)
         if start is None:
             self.control.set_active(0)
         else:
@@ -161,8 +164,8 @@ class InputChoice(InputBaseClass):
             if value in self._values:
                 self.control.set_active(self._values.index(value))
             else:
-                # this may occour, if plugins were removed
-                _log.debug2("Unknown value: %s" % str(value))
+                # this may occur, if plugins were removed
+                _log.debug2("Unknown value: %s (expected: %s)", value, self._values)
 
     def update_choices(self, choices):
         selected = self.get_value()
@@ -193,26 +196,29 @@ class InputChoice(InputBaseClass):
 class InputTable(InputChoice):
 
     def __init__(self, choices, change_handler=None):
-        self.model = gtk.ListStore(gobject.TYPE_STRING)
+        self.model = Gtk.ListStore(GObject.TYPE_STRING)
         self._values = []
         for label, value in choices:
             self.model.append((label,))
             self._values.append(value)
-        renderer = gtk.CellRendererText()
-        self.control = gtk.ScrolledWindow()
+        renderer = Gtk.CellRendererText()
+        self.control = Gtk.ScrolledWindow()
         self.control.show()
-        self._treeview = gtk.TreeView(self.model)
+        self._treeview = Gtk.TreeView(self.model)
         self._treeview.show()
         self.control.add(self._treeview)
-        self.control.set_shadow_type(gtk.SHADOW_ETCHED_OUT)
-        self.control.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
-        column = gtk.TreeViewColumn()
+        self.control.set_shadow_type(Gtk.ShadowType.ETCHED_OUT)
+        self.control.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
+        # Sadly there seems to be no way to adjust the size of the ScrolledWindow to its content.
+        # The default size of the ScrolledWindow is too small (making it hard to select the model).
+        self.control.set_size_request(200, -1)
+        column = Gtk.TreeViewColumn()
         column.pack_start(renderer, expand=False)
         column.set_attributes(renderer, text=0)
         self._treeview.append_column(column)
         self._treeview.set_headers_visible(False)
         self._selection = self._treeview.get_selection()
-        self._selection.set_mode(gtk.SELECTION_MULTIPLE)
+        self._selection.set_mode(Gtk.SelectionMode.MULTIPLE)
         self.connect("changed", change_handler, self._selection)
 
     def get_value(self):
@@ -224,16 +230,17 @@ class InputTable(InputChoice):
         if items is None:
             items = []
         for index, value in enumerate(self._values):
+            path = Gtk.TreePath.new_from_indices((index, ))
             if value in items:
-                selection.select_path((index, ))
+                selection.select_path(path)
             else:
-                selection.unselect_path((index, ))
+                selection.unselect_path(path)
 
 
 class InputCheckBox(InputBaseClass):
 
     def __init__(self, start=False, change_handler=None):
-        self.control = gtk.CheckButton()
+        self.control = Gtk.CheckButton()
         self.control.set_active(start)
         self.connect("toggled", change_handler)
 
@@ -250,7 +257,7 @@ class ParameterSection(WidgetBaseClass):
 
     def __init__(self):
         self._widgets = []
-        self._table = gtk.Table(rows=1, columns=2)
+        self._table = Gtk.Table(rows=1, columns=2)
         self._table.set_col_spacings(3)
         self._table.set_row_spacings(3)
         self.update_widgets()
@@ -290,19 +297,19 @@ class ParameterSection(WidgetBaseClass):
             if hasattr(widget.widget, "get_label"):
                 # checkbox
                 widget.widget.set_label(widget.label)
-                self._table.attach(widget.widget, 0, 2, index, index + 1, xoptions=gtk.FILL,
-                                   yoptions=gtk.FILL)
+                self._table.attach(widget.widget, 0, 2, index, index + 1, xoptions=Gtk.Align.FILL,
+                                   yoptions=Gtk.Align.FILL)
             elif not widget.label:
-                self._table.attach(widget.widget, 0, 2, index, index + 1, xoptions=gtk.FILL,
-                                   yoptions=gtk.FILL)
+                self._table.attach(widget.widget, 0, 2, index, index + 1, xoptions=Gtk.Align.FILL,
+                                   yoptions=Gtk.Align.FILL)
             else:
                 # spinbutton, combobox, ...
-                label = gtk.Label("%s:" % widget.label)
+                label = Gtk.Label("%s:" % widget.label)
                 label.set_alignment(0.0, 0.5)
-                self._table.attach(label, 0, 1, index, index + 1, xoptions=gtk.FILL,
-                                   yoptions=gtk.FILL)
-                self._table.attach(widget.widget, 1, 2, index, index + 1, xoptions=gtk.FILL,
-                                   yoptions=gtk.FILL)
+                self._table.attach(label, 0, 1, index, index + 1, xoptions=Gtk.Align.FILL,
+                                   yoptions=Gtk.Align.FILL)
+                self._table.attach(widget.widget, 1, 2, index, index + 1, xoptions=Gtk.Align.FILL,
+                                   yoptions=Gtk.Align.FILL)
         self._update_widgets_visibility()
 
     def _get_table_row_of_widget(self, widget):
@@ -312,7 +319,7 @@ class ParameterSection(WidgetBaseClass):
         return -1
 
     def _get_child_row(self, widget):
-        return gtk.Container.child_get_property(self._table, widget, "top-attach")
+        return Gtk.Container.child_get_property(self._table, widget, "top-attach")
 
     def _update_widgets_visibility(self, widget=None):
         # Hide and show labels (or other items) that share a row with a
diff --git a/pycam/Gui/OpenGLTools.py b/pycam/Gui/OpenGLTools.py
index 5140375..f038c1e 100644
--- a/pycam/Gui/OpenGLTools.py
+++ b/pycam/Gui/OpenGLTools.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010-2011 Lars Kruse <devel@sumpfralle.de>
 
diff --git a/pycam/Gui/Project.py b/pycam/Gui/Project.py
index 8fa6542..5f93f5c 100755
--- a/pycam/Gui/Project.py
+++ b/pycam/Gui/Project.py
@@ -1,5 +1,4 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
+#!/usr/bin/env python3
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,23 +19,25 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
 
+import collections
 import datetime
 import logging
 import os
 import sys
 import webbrowser
 
-import gobject
-import gtk
+from gi.repository import GObject
+from gi.repository import Gtk
+from gi.repository import Gdk
+from gi.repository import Gio
 
-from pycam import VERSION, DOC_BASE_URL
-import pycam.Importers.CXFImporter
-import pycam.Importers.TestModel
+from pycam import DOC_BASE_URL, VERSION
+from pycam.errors import InitializationError
 import pycam.Importers
 import pycam.Gui
-from pycam.Utils.locations import get_ui_file_location, get_external_program_location, \
-        get_all_program_locations
+from pycam.Utils.locations import get_ui_file_location, get_external_program_location
 import pycam.Utils
+from pycam.Utils.events import get_mainloop
 import pycam.Utils.log
 
 
@@ -65,8 +66,8 @@ def get_icons_pixbuffers():
         abs_filename = get_ui_file_location(icon_filename, silent=True)
         if abs_filename:
             try:
-                result.append(gtk.gdk.pixbuf_new_from_file(abs_filename))
-            except gobject.GError as err_msg:
+                result.append(Gdk.pixbuf_new_from_file(abs_filename))
+            except GObject.GError as err_msg:
                 # ignore icons that are not found
                 log.debug("Failed to process window icon (%s): %s", abs_filename, err_msg)
         else:
@@ -74,33 +75,56 @@ def get_icons_pixbuffers():
     return result
 
 
+def gui_activity_guard(func):
+    def gui_activity_guard_wrapper(self, *args, **kwargs):
+        if self.gui_is_active:
+            return
+        self.gui_is_active = True
+        try:
+            result = func(self, *args, **kwargs)
+        except Exception:
+            # Catch possible exceptions (except system-exit ones) and
+            # report them.
+            log.error(pycam.Utils.get_exception_report())
+            result = None
+        self.gui_is_active = False
+        return result
+    return gui_activity_guard_wrapper
+
+
+QuestionResponse = collections.namedtuple("QuestionResponse", ("is_yes", "should_memorize"))
+
+
 class ProjectGui(pycam.Gui.BaseUI):
 
     META_DATA_PREFIX = "PYCAM-META-DATA:"
 
-    def __init__(self, event_manager, no_dialog=False):
-        super(ProjectGui, self).__init__(event_manager)
+    def __init__(self, event_manager):
+        super().__init__(event_manager)
         self.gui_is_active = False
-        # during initialization any dialog (e.g. "Unit change") is not allowed
-        # we set the final value later
-        self.no_dialog = True
-        self.gui = gtk.Builder()
+        self.gui = Gtk.Builder()
         gtk_build_file = get_ui_file_location(GTKBUILD_FILE)
         if gtk_build_file is None:
-            gtk.main_quit()
+            raise InitializationError("Failed to load GTK layout specification file: {}"
+                                      .format(gtk_build_file))
         self.gui.add_from_file(gtk_build_file)
-        if pycam.Utils.get_platform() == pycam.Utils.PLATFORM_WINDOWS:
+        if pycam.Utils.get_platform() == pycam.Utils.OSPlatform.WINDOWS:
             gtkrc_file = get_ui_file_location(GTKRC_FILE_WINDOWS)
             if gtkrc_file:
-                gtk.rc_add_default_file(gtkrc_file)
-                gtk.rc_reparse_all_for_settings(gtk.settings_get_default(), True)
+                Gtk.rc_add_default_file(gtkrc_file)
+                Gtk.rc_reparse_all_for_settings(Gtk.settings_get_default(), True)
+        action_group = Gio.SimpleActionGroup()
+        self.settings.set("gtk_action_group_prefix", "pycam")
+        self.settings.set("gtk_action_group", action_group)
         self.window = self.gui.get_object("ProjectWindow")
+        self.window.insert_action_group(
+            self.settings.get("gtk_action_group_prefix"), self.settings.get("gtk_action_group"))
         self.settings.set("main_window", self.window)
         # show stock items on buttons
         # increase the initial width of the window (due to hidden elements)
         self.window.set_default_size(400, -1)
         # initialize the RecentManager (TODO: check for Windows)
-        if False and pycam.Utils.get_platform() == pycam.Utils.PLATFORM_WINDOWS:
+        if False and pycam.Utils.get_platform() == pycam.Utils.OSPlatform.WINDOWS:
             # The pyinstaller binary for Windows fails mysteriously when trying
             # to display the stock item.
             # Error message: Gtk:ERROR:gtkrecentmanager.c:1942:get_icon_fallback:
@@ -108,7 +132,7 @@ class ProjectGui(pycam.Gui.BaseUI):
             self.recent_manager = None
         else:
             try:
-                self.recent_manager = gtk.recent_manager_get_default()
+                self.recent_manager = Gtk.recent_manager_get_default()
             except AttributeError:
                 # GTK 2.12.1 seems to have problems with "RecentManager" on
                 # Windows. Sadly this is the version, that is shipped with the
@@ -117,7 +141,6 @@ class ProjectGui(pycam.Gui.BaseUI):
                 self.recent_manager = None
         # file loading
         self.last_dirname = None
-        self.last_task_settings_uri = None
         self.last_model_uri = None
         # define callbacks and accelerator keys for the menu actions
         for objname, callback, data, accel_key in (
@@ -149,16 +172,16 @@ class ProjectGui(pycam.Gui.BaseUI):
             else:
                 item.connect(action, callback, data)
             if accel_key:
-                key, mod = gtk.accelerator_parse(accel_key)
+                key, mod = Gtk.accelerator_parse(accel_key)
                 accel_path = "<pycam>/%s" % objname
                 item.set_accel_path(accel_path)
-                gtk.accel_map_change_entry(accel_path, key, mod, True)
+                # Gtk.accel_map_change_entry(accel_path, key, mod, True) FIXME
         # LinkButton does not work on Windows: https://bugzilla.gnome.org/show_bug.cgi?id=617874
-        if pycam.Utils.get_platform() == pycam.Utils.PLATFORM_WINDOWS:
+        if pycam.Utils.get_platform() == pycam.Utils.OSPlatform.WINDOWS:
             def open_url(widget, data=None):
                 webbrowser.open(widget.get_uri())
-            gtk.link_button_set_uri_hook(open_url)
-        self.settings.register_event("undo-states-changed", self._update_undo_button)
+            Gtk.link_button_set_uri_hook(open_url)
+        self.settings.register_event("history-changed", self._update_undo_button)
         self.settings.register_event("model-change-after",
                                      lambda: self.settings.emit_event("visual-item-updated"))
         # configure drag-n-drop for config files and models
@@ -173,31 +196,38 @@ class ProjectGui(pycam.Gui.BaseUI):
         self.gui.get_object("ResetPreferencesButton").connect("clicked", self.reset_preferences)
         self.preferences_window = self.gui.get_object("GeneralSettingsWindow")
         self.preferences_window.connect("delete-event", self.toggle_preferences_window, False)
+        self.preferences_window.insert_action_group(
+            self.settings.get("gtk_action_group_prefix"), self.settings.get("gtk_action_group"))
         self._preferences_window_position = None
         self._preferences_window_visible = False
         # "about" window
         self.about_window = self.gui.get_object("AboutWindow")
         self.about_window.set_version(VERSION)
+        self.about_window.insert_action_group(
+            self.settings.get("gtk_action_group_prefix"), self.settings.get("gtk_action_group"))
         self.gui.get_object("About").connect("activate", self.toggle_about_window, True)
         # we assume, that the last child of the window is the "close" button
         # TODO: fix this ugly hack!
-        self.gui.get_object("AboutWindowButtons").get_children()[-1].connect(
-            "clicked", self.toggle_about_window, False)
+        about_window_children = self.gui.get_object("AboutWindowButtons").get_children()
+        if about_window_children:
+            # it seems to be possible that there are no children - weird :(
+            # see https://github.com/SebKuzminsky/pycam/issues/59
+            about_window_children[-1].connect("clicked", self.toggle_about_window, False)
         self.about_window.connect("delete-event", self.toggle_about_window, False)
         # menu bar
-        uimanager = gtk.UIManager()
+        uimanager = Gtk.UIManager()
         self.settings.set("gtk-uimanager", uimanager)
         self._accel_group = uimanager.get_accel_group()
-
         # send a "delete" event on "CTRL-w" for every window
-        def handle_window_close(accel_group, window, *args):
-            window.emit("delete-event", gtk.gdk.Event(gtk.gdk.DELETE))
-
-        self._accel_group.connect_group(ord('w'), gtk.gdk.CONTROL_MASK, gtk.ACCEL_LOCKED,
-                                        handle_window_close)
+        self._accel_group.connect(
+            ord('w'), Gdk.ModifierType.CONTROL_MASK, Gtk.AccelFlags.LOCKED,
+            lambda accel_group, window, *args: window.emit("delete-event", Gdk.Event()))
+        self._accel_group.connect(
+            ord('q'), Gdk.ModifierType.CONTROL_MASK, Gtk.AccelFlags.LOCKED,
+            lambda *args: self.destroy())
         self.settings.add_item("gtk-accel-group", lambda: self._accel_group)
         for obj in self.gui.get_objects():
-            if isinstance(obj, gtk.Window):
+            if isinstance(obj, Gtk.Window):
                 obj.add_accel_group(self._accel_group)
         # preferences tab
         preferences_book = self.gui.get_object("PreferencesNotebook")
@@ -207,7 +237,7 @@ class ProjectGui(pycam.Gui.BaseUI):
                 preferences_book.remove(child)
 
         def add_preferences_item(item, name):
-            preferences_book.append_page(item, gtk.Label(name))
+            preferences_book.append_page(item, Gtk.Label(name))
 
         self.settings.register_ui_section("preferences", add_preferences_item, clear_preferences)
         for obj_name, label, priority in (
@@ -224,13 +254,10 @@ class ProjectGui(pycam.Gui.BaseUI):
                 general_prefs.remove(item)
 
         def add_general_prefs_item(item, name):
-            general_prefs.pack_start(item, expand=False, padding=3)
+            general_prefs.pack_start(item, expand=False, fill=False, padding=3)
 
         self.settings.register_ui_section("preferences_general", add_general_prefs_item,
                                           clear_general_prefs)
-        # defaults settings file
-        obj = self.gui.get_object("TaskSettingsDefaultFileBox")
-        obj.unparent()
         self.settings.register_ui("preferences_general", None, obj, 30)
         # set defaults
         main_tab = self.gui.get_object("MainTabs")
@@ -240,7 +267,7 @@ class ProjectGui(pycam.Gui.BaseUI):
                 main_tab.remove_page(0)
 
         def add_main_tab_item(item, name):
-            main_tab.append_page(item, gtk.Label(name))
+            main_tab.append_page(item, Gtk.Label(name))
 
         # TODO: move these to plugins, as well
         self.settings.register_ui_section("main", add_main_tab_item, clear_main_tab)
@@ -251,7 +278,7 @@ class ProjectGui(pycam.Gui.BaseUI):
 
         def add_main_window_item(item, name, **extra_args):
             # some widgets may want to override the defaults
-            args = {"expand": False, "fill": False}
+            args = {"expand": False, "fill": False, "padding": 3}
             args.update(extra_args)
             main_window.pack_start(item, **args)
 
@@ -283,24 +310,32 @@ class ProjectGui(pycam.Gui.BaseUI):
                                    location_control.set_text)
             self.gui.get_object(browse_button).connect("clicked",
                                                        self._browse_external_program_location, key)
+        for objname, callback in (
+                ("ResetWorkspace", lambda widget: self.reset_workspace()),
+                ("LoadWorkspace", lambda widget: self.load_workspace_dialog()),
+                ("SaveWorkspace", lambda widget: self.save_workspace_dialog(
+                    self.last_workspace_uri)),
+                ("SaveAsWorkspace", lambda widget: self.save_workspace_dialog())):
+            self.gui.get_object(objname).connect("activate", callback)
         # set the icons (in different sizes) for all windows
-        gtk.window_set_default_icon_list(*get_icons_pixbuffers())
+        # Gtk.window_set_default_icon_list(*get_icons_pixbuffers()) FIXME
         # load menu data
         gtk_menu_file = get_ui_file_location(GTKMENU_FILE)
         if gtk_menu_file is None:
-            gtk.main_quit()
+            raise InitializationError("Failed to load GTK menu specification file: {}"
+                                      .format(gtk_menu_file))
         uimanager.add_ui_from_file(gtk_menu_file)
         # make the actions defined in the GTKBUILD file available in the menu
-        actiongroup = gtk.ActionGroup("menubar")
-        for action in [aobj for aobj in self.gui.get_objects() if isinstance(aobj, gtk.Action)]:
+        actiongroup = Gtk.ActionGroup("menubar")
+        for action in [aobj for aobj in self.gui.get_objects() if isinstance(aobj, Gtk.Action)]:
             actiongroup.add_action(action)
         # the "pos" parameter is optional since 2.12 - we can remove it later
-        uimanager.insert_action_group(actiongroup, pos=-1)
+        uimanager.insert_action_group(actiongroup)
         # the "recent files" sub-menu
         if self.recent_manager is not None:
-            recent_files_menu = gtk.RecentChooserMenu(self.recent_manager)
+            recent_files_menu = Gtk.RecentChooserMenu(self.recent_manager)
             recent_files_menu.set_name("RecentFilesMenu")
-            recent_menu_filter = gtk.RecentFilter()
+            recent_menu_filter = Gtk.RecentFilter()
             case_converter = pycam.Utils.get_case_insensitive_file_pattern
             for filter_name, patterns in FILTER_MODEL:
                 if not isinstance(patterns, (list, set, tuple)):
@@ -316,7 +351,7 @@ class ProjectGui(pycam.Gui.BaseUI):
             # non-local files (without "file://") are not supported. yet
             recent_files_menu.set_local_only(False)
             # most recent files to the top
-            recent_files_menu.set_sort_type(gtk.RECENT_SORT_MRU)
+            recent_files_menu.set_sort_type(Gtk.RECENT_SORT_MRU)
             # show only ten files
             recent_files_menu.set_limit(10)
             uimanager.get_widget("/MenuBar/FileMenu/OpenRecentModelMenu").set_submenu(
@@ -340,10 +375,10 @@ class ProjectGui(pycam.Gui.BaseUI):
                 if action_group not in uimanager.get_action_groups():
                     uimanager.insert_action_group(action_group, -1)
                 widget_name = widget.get_name()
-                item_type = gtk.UI_MANAGER_MENUITEM
+                item_type = Gtk.UIManagerItemType.MENU
             else:
                 widget_name = name
-                item_type = gtk.UI_MANAGER_SEPARATOR
+                item_type = Gtk.UIManagerItemType.SEPARATOR
             uimanager.add_ui(merge_id, base_path, name, widget_name, item_type, False)
             if menu_key not in menu_merges:
                 menu_merges[menu_key] = []
@@ -367,31 +402,32 @@ class ProjectGui(pycam.Gui.BaseUI):
         self.settings.register_ui("main_window", "Main", self.menubar, -100)
         self.settings.register_event("notify-file-saved", self.add_to_recent_file_list)
         self.settings.register_event("notify-file-opened", self.add_to_recent_file_list)
-        # Without this "gkt.main_iteration" loop the task settings file
-        # control would not be updated in time.
-        while gtk.events_pending():
-            gtk.main_iteration()
-        self.no_dialog = no_dialog
-        if not self.no_dialog:
-            # register a logging handler for displaying error messages
-            pycam.Utils.log.add_gtk_gui(self.window, logging.ERROR)
-            self.window.show()
-
-    def gui_activity_guard(func):
-        def gui_activity_guard_wrapper(self, *args, **kwargs):
-            if self.gui_is_active:
-                return
-            self.gui_is_active = True
-            try:
-                result = func(self, *args, **kwargs)
-            except Exception:
-                # Catch possible exceptions (except system-exit ones) and
-                # report them.
-                log.error(pycam.Utils.get_exception_report())
-                result = None
-            self.gui_is_active = False
-            return result
-        return gui_activity_guard_wrapper
+        # allow the task settings control to be updated
+        get_mainloop().update()
+        # register a logging handler for displaying error messages
+        pycam.Utils.log.add_gtk_gui(self.window, logging.ERROR)
+        self.window.show()
+
+    def get_question_response(self, question, default_response, allow_memorize=False):
+        """display a dialog presenting a simple question and yes/no buttons
+
+        @param allow_memorize: optionally a "Do not ask again" checkbox can be included
+        @returns aa tuple of two booleans ("is yes", "should memorize")
+        """
+        dialog = Gtk.MessageDialog(self.window, Gtk.DialogFlags.DESTROY_WITH_PARENT,
+                                   Gtk.MessageType.QUESTION, Gtk.ButtonsType.YES_NO, question)
+        if default_response:
+            dialog.set_default_response(Gtk.ResponseType.YES)
+        else:
+            dialog.set_default_response(Gtk.ResponseType.NO)
+        memorize_choice = Gtk.CheckButton("Do not ask again")
+        if allow_memorize:
+            dialog.get_content_area().add(memorize_choice)
+            memorize_choice.show()
+        is_yes = (dialog.run() == Gtk.ResponseType.YES)
+        should_memorize = memorize_choice.get_active()
+        dialog.destroy()
+        return QuestionResponse(is_yes, should_memorize)
 
     def show_help(self, widget=None, page="Main_Page"):
         if not page.startswith("http"):
@@ -400,20 +436,6 @@ class ProjectGui(pycam.Gui.BaseUI):
             url = page
         webbrowser.open(url)
 
-    def set_model_filename(self, filename):
-        """ Store the given filename for a possible later "save model" action.
-        Additionally the window's title is adjusted and the "save" buttons are
-        updated.
-        """
-        uri = pycam.Utils.URIHandler(filename)
-        self.last_model_uri = uri
-        if not self.last_model_uri:
-            self.window.set_title("PyCAM")
-        else:
-            short_name = os.path.basename(uri.get_path())
-            self.window.set_title("%s - PyCAM" % short_name)
-        self.settings.emit_event("model-change-after")
-
     def _browse_external_program_location(self, widget=None, key=None):
         title = "Select the executable for '%s'" % key
         location = self.settings.get("get_filename_func")(title=title, mode_load=True,
@@ -465,30 +487,27 @@ class ProjectGui(pycam.Gui.BaseUI):
         return True
 
     def _update_undo_button(self):
-        self.gui.get_object("UndoButton").set_sensitive(len(self._undo_states) > 0)
+        history = self.settings.get("history")
+        is_enabled = (history.get_undo_steps_count() > 0) if history else False
+        self.gui.get_object("UndoButton").set_sensitive(is_enabled)
 
     def destroy(self, widget=None, data=None):
-        gtk.main_quit()
-        self.quit()
-
-    def quit(self):
-        pass
-        # TODO: disabled until the format is stable
-#       self.save_preferences()
+        get_mainloop().stop()
 
     def configure_drag_and_drop(self, obj):
         obj.connect("drag-data-received", self.handle_data_drop)
-        flags = gtk.DEST_DEFAULT_ALL
-        targets = [(key, gtk.TARGET_OTHER_APP, index)
+        return  # FIXME
+        flags = Gtk.DestDefaults.ALL
+        targets = [(key, Gtk.TARGET_OTHER_APP, index)
                    for index, key in enumerate(FILENAME_DRAG_TARGETS)]
-        actions = (gtk.gdk.ACTION_COPY | gtk.gdk.ACTION_LINK | gtk.gdk.ACTION_DEFAULT
-                   | gtk.gdk.ACTION_PRIVATE | gtk.gdk.ACTION_ASK)
+        actions = (Gdk.ACTION_COPY | Gdk.ACTION_LINK | Gdk.ACTION_DEFAULT
+                   | Gdk.ACTION_PRIVATE | Gdk.ACTION_ASK)
         obj.drag_dest_set(flags, targets, actions)
 
     def handle_data_drop(self, widget, drag_context, x, y, selection_data, info, timestamp):
         if info != 0:
             uris = [str(selection_data.data)]
-        elif pycam.Utils.get_platform() == pycam.Utils.PLATFORM_WINDOWS:
+        elif pycam.Utils.get_platform() == pycam.Utils.OSPlatform.WINDOWS:
             uris = selection_data.data.splitlines()
         else:
             uris = selection_data.get_uris()
@@ -521,39 +540,11 @@ class ProjectGui(pycam.Gui.BaseUI):
             filename = self.settings.get("get_filename_func")("Loading model ...", mode_load=True,
                                                               type_filter=FILTER_MODEL)
         if filename:
-            detected_filetype = pycam.Importers.detect_file_type(filename)
-            if detected_filetype:
-                progress = self.settings.get("progress")
-                progress.update(text="Loading model ...")
-                # "cancel" is not allowed
-                progress.disable_cancel()
-                model = detected_filetype.importer(
-                    detected_filetype.uri,
-                    program_locations=get_all_program_locations(self.settings),
-                    unit=self.settings.get("unit"), fonts_cache=self.settings.get("fonts"),
-                    callback=progress.update)
-                if self.load_model(model):
-                    if store_filename:
-                        self.set_model_filename(filename)
-                    self.add_to_recent_file_list(filename)
-                    result = True
-                else:
-                    result = False
-                progress.finish()
-                return result
-            else:
-                log.error("Failed to detect filetype!")
-                return False
-
-    def load_model(self, model):
-        # load the new model only if the import worked
-        if model:
-            self.settings.emit_event("model-change-before")
-            self.settings.get("models").add_model(model)
-            self.last_model_uri = None
+            name_suggestion = os.path.splitext(os.path.basename(filename))[0]
+            model_params = {"source": {"type": "file", "location": filename}}
+            self.settings.get("models").add_model(model_params, name=name_suggestion)
+            self.add_to_recent_file_list(filename)
             return True
-        else:
-            return False
 
     def add_to_recent_file_list(self, filename):
         # Add the item to the recent files list - if it already exists.
@@ -565,7 +556,7 @@ class ProjectGui(pycam.Gui.BaseUI):
                 if self.recent_manager.has_item(uri.get_url()):
                     try:
                         self.recent_manager.remove_item(uri.get_url())
-                    except gobject.GError:
+                    except GObject.GError:
                         pass
                 self.recent_manager.add_item(uri.get_url())
             # store the directory of the last loaded file
@@ -581,21 +572,9 @@ class ProjectGui(pycam.Gui.BaseUI):
             result.append("%s %s" % (self.META_DATA_PREFIX, text))
         return os.linesep.join(result)
 
-    def mainloop(self):
-        # run the mainloop only if a GUI was requested
-        if not self.no_dialog:
-            gtk_settings = gtk.settings_get_default()
-            # force the icons to be displayed
-            gtk_settings.props.gtk_menu_images = True
-            gtk_settings.props.gtk_button_images = True
-            try:
-                gtk.main()
-            except KeyboardInterrupt:
-                self.quit()
-
 
 if __name__ == "__main__":
     GUI = ProjectGui()
     if len(sys.argv) > 1:
         GUI.load_model_file(sys.argv[1])
-    GUI.mainloop()
+    get_mainloop().run()
diff --git a/pycam/Gui/Settings.py b/pycam/Gui/Settings.py
index e9ec6cb..9bc24d6 100644
--- a/pycam/Gui/Settings.py
+++ b/pycam/Gui/Settings.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -24,6 +23,8 @@ import pycam.Cutters
 import pycam.Toolpath
 import pycam.Utils
 import pycam.Utils.log
+from pycam.Utils.locations import open_file_context
+
 
 CONFIG_DIR = "pycam"
 
@@ -44,18 +45,28 @@ def get_config_dirname():
         try:
             os.makedirs(config_dir)
         except OSError:
+            log.warn("Failed to create preferences directory in your user's home directory: %s",
+                     config_dir)
             config_dir = None
     return config_dir
 
 
-def get_config_filename(filename=None):
-    if filename is None:
-        filename = "preferences.conf"
+def get_config_filename():
+    config_dir = get_config_dirname()
+    return None if config_dir is None else os.path.join(config_dir, "preferences.conf")
+
+
+def get_workspace_filename():
     config_dir = get_config_dirname()
-    if config_dir is None:
-        return None
-    else:
-        return os.path.join(config_dir, filename)
+    return None if config_dir is None else os.path.join(config_dir, "workspace.yml")
+
+
+def open_preferences_file(mode="r"):
+    return open_file_context(get_config_filename(), mode, True)
+
+
+def open_workspace_file(mode="r"):
+    return open_file_context(get_workspace_filename(), mode, True)
 
 
 class Settings(dict):
@@ -65,10 +76,10 @@ class Settings(dict):
     VALUE_INDEX = 2
 
     def __getitem_orig(self, key):
-        return super(Settings, self).__getitem__(key)
+        return super().__getitem__(key)
 
     def __setitem_orig(self, key, value):
-        super(Settings, self).__setitem__(key, value)
+        super().__setitem__(key, value)
 
     def add_item(self, key, get_func=None, set_func=None):
         self.__setitem_orig(key, [None, None, None])
diff --git a/pycam/Gui/Visualization.py b/pycam/Gui/Visualization.py
deleted file mode 100644
index f61df09..0000000
--- a/pycam/Gui/Visualization.py
+++ /dev/null
@@ -1,339 +0,0 @@
-# -*- coding: utf-8 -*-
-"""
-Copyright 2008-2009 Lode Leroy
-
-This file is part of PyCAM.
-
-PyCAM is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-PyCAM is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
-"""
-
-import math
-import sys
-
-import OpenGL.GL as GL
-import OpenGL.GLU as GLU
-import OpenGL.GLUT as GLUT
-from OpenGL.constant import Constant
-
-GLUT_WHEEL_UP = Constant('GLUT_WHEEL_UP', 3)
-GLUT_WHEEL_DOWN = Constant('GLUT_WHEEL_DOWN', 4)
-
-
-_DrawCurrentSceneFunc = None
-_KeyHandlerFunc = None
-
-# Some api in the chain is translating the keystrokes to this octal string
-# so instead of saying: ESCAPE = 27, we use the following.
-ESCAPE = '\033'
-
-# Number of the glut window.
-window = 0
-
-# Rotations for cube.
-xrot = 110
-yrot = 180
-zrot = 250
-scale = 0.5
-xdist = 0
-ydist = -1.0
-zdist = -8.0
-
-light = 1
-shade_model = GL.GL_FLAT
-polygon_mode = GL.GL_FILL
-width = 320
-height = 200
-
-
-# A general OpenGL initialization function.  Sets all of the initial parameters.
-def InitGL(Width, Height):
-    # We call this right after our OpenGL window is created.
-    global width, height
-    width = Width
-    height = Height
-
-    # This Will Clear The Background Color To Black
-    GL.glClearColor(0.0, 0.0, 0.0, 0.0)
-    # Enables Clearing Of The Depth Buffer
-    GL.glClearDepth(1.0)
-    # The Type Of Depth Test To Do
-    GL.glDepthFunc(GL.GL_LESS)
-    # Enables Depth Testing
-    GL.glEnable(GL.GL_DEPTH_TEST)
-    # Enables Smooth Color Shading
-#    GL.glShadeModel(GL.GL_SMOOTH)
-    # Enables Flat Color Shading
-#    GL.glShadeModel(GL.GL_FLAT)
-    GL.glShadeModel(shade_model)
-
-    GL.glMatrixMode(GL.GL_PROJECTION)
-    # Reset The Projection Matrix
-    GL.glLoadIdentity()
-
-    # Calculate The Aspect Ratio Of The Window
-    GLU.gluPerspective(60.0, float(Width)/float(Height), 0.1, 100.0)
-
-    # Setup The Ambient Light
-    GL.glLightfv(GL.GL_LIGHT0, GL.GL_AMBIENT, (0.5, 0.5, 0.5, 1.0))
-    # Setup The Diffuse Light
-    GL.glLightfv(GL.GL_LIGHT0, GL.GL_DIFFUSE, (1.0, 1.0, 1.0, 1.0))
-    # Position The Light
-    GL.glLightfv(GL.GL_LIGHT0, GL.GL_POSITION, (-10.0, 0.0, 0.0, 1.0))
-    # Enable Light One
-    GL.glEnable(GL.GL_LIGHT0)
-
-    GL.glMatrixMode(GL.GL_MODELVIEW)
-    GL.glMaterial(GL.GL_FRONT_AND_BACK, GL.GL_SPECULAR, (0.1, 0.1, 0.1, 1.0))
-#    GL.glMaterial(GL.GL_FRONT_AND_BACK, GL.GL_SHININESS, (0.5))
-
-    GL.glPolygonMode(GL.GL_FRONT_AND_BACK, polygon_mode)
-
-
-def ReSizeGLScene(Width, Height):
-    # Prevent A Divide By Zero If The Window Is Too Small
-    if Height == 0:
-        Height = 1
-
-    global width, height
-    width = Width
-    height = Height
-
-    # Reset The Current Viewport And Perspective Transformation
-    GL.glViewport(0, 0, Width, Height)
-    GL.glMatrixMode(GL.GL_PROJECTION)
-    GL.glLoadIdentity()
-    GLU.gluPerspective(60.0, float(Width)/float(Height), 0.1, 100.0)
-    GL.glMatrixMode(GL.GL_MODELVIEW)
-
-
-# The main drawing function.
-def DrawGLScene():
-    global xrot, yrot, zrot, scale, xdist, ydist, zdist, light
-
-    # Clear The Screen And The Depth Buffer
-    GL.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)
-    # Reset The View
-    GL.glLoadIdentity()
-    # Move Into The Screen
-    GL.glTranslatef(xdist, ydist, zdist)
-
-    # Rotate The Cube
-    GL.glRotatef(xrot, 1.0, 0.0, 0.0)
-    GL.glRotatef(yrot, 0.0, 1.0, 0.0)
-    GL.glRotatef(zrot, 0.0, 0.0, 1.0)
-    GL.glScalef(scale, scale, scale)
-    if light:
-        GL.glEnable(GL.GL_LIGHTING)
-    else:
-        GL.glDisable(GL.GL_LIGHTING)
-
-    if _DrawCurrentSceneFunc:
-        _DrawCurrentSceneFunc()
-
-    # Since this is double buffered, swap the buffers to display what just got
-    # drawn.
-    GLUT.glutSwapBuffers()
-
-
-# The function called whenever a key is pressed
-def keyPressed(key, x, y):
-    global light, polygon_mode, shade_model
-    global xrot, yrot, zrot
-    global _KeyHandlerFunc
-
-    key = key.upper()
-    if (key == ESCAPE) or (key == 'Q'):
-        # If escape is pressed, kill everything.
-        sys.exit()
-    elif key == 'S':
-        light = not light
-    elif key == '=':
-        print("rot=<%g,%g,%g>" % (xrot, yrot, zrot))
-    elif key == 'I':
-        xrot = 110
-        yrot = 180
-        zrot = 250
-    elif key == 'T':
-        # top
-        xrot = 0
-        yrot = 0
-        zrot = 0
-    elif key == 'F':
-        # front
-        xrot = -90
-        yrot = 0
-        zrot = 0
-    elif key == 'R':
-        # right
-        xrot = -90
-        yrot = 0
-        zrot = -90
-    elif key == 'L':
-        # left
-        xrot = -90
-        yrot = 0
-        zrot = +90
-    elif key == 'M':
-        if shade_model == GL.GL_SMOOTH:
-            shade_model = GL.GL_FLAT
-        else:
-            shade_model = GL.GL_SMOOTH
-        GL.glShadeModel(shade_model)
-    elif key == 'P':
-        if polygon_mode == GL.GL_FILL:
-            polygon_mode = GL.GL_LINE
-        else:
-            polygon_mode = GL.GL_FILL
-        GL.glPolygonMode(GL.GL_FRONT_AND_BACK, polygon_mode)
-    elif _KeyHandlerFunc:
-        _KeyHandlerFunc(key, x, y)
-
-
-class mouseState(object):
-    button = None
-    state = None
-    x = 0
-    y = 0
-
-
-def mousePressed(button, state, x, y):
-    global xrot, yrot, zrot, xdist, ydist, zdist, scale
-    if button == GLUT_WHEEL_DOWN:
-        scale *= 1.1
-    elif button == GLUT_WHEEL_UP:
-        scale /= 1.1
-    mouseState.button = button
-    mouseState.state = state
-    mouseState.x = float(x)
-    mouseState.y = float(y)
-
-
-def mouseMoved(x, y):
-    global xrot, yrot, zrot, xdist, ydist, zdist, scale
-    global width, height
-    x = float(x)
-    y = float(y)
-    # TODO: can these unused formulas be thrown away?
-#    a1 = math.atan2(mouseState.y - height / 2.0, mouseState.x - width / 2.0)
-#    r1 = sqrt((mouseState.y - height / 2.0) ** 2 + (mouseState.x - width / 2.0) ** 2)
-#    a2 = math.atan2(y - height / 2.0, x - width / 2.0)
-#    r2 = sqrt((y - height / 2.0) ** 2 + (x - width / 2.0) ** 2)
-    if (mouseState.button == GLUT.GLUT_LEFT_BUTTON) \
-            or (mouseState.button == GLUT.GLUT_RIGHT_BUTTON):
-        a3 = math.acos(mouseState.x / width - 0.5)
-        a4 = math.acos(x / width - 0.5)
-        zrot = zrot - (a4 - a3) * 180 / math.pi * 2
-    if mouseState.button == GLUT.GLUT_RIGHT_BUTTON:
-        a3 = math.acos(mouseState.y / height - 0.5)
-        a4 = math.acos(y / height - 0.5)
-        if x > width / 2.0:
-            yrot = yrot + (a4 - a3) * 180 / math.pi * 2
-        else:
-            yrot = yrot - (a4 - a3) * 180 / math.pi * 2
-    if mouseState.button == GLUT.GLUT_LEFT_BUTTON:
-        a3 = math.acos(mouseState.y / width - 0.5)
-        a4 = math.acos(y/width - 0.5)
-        xrot = xrot - (a4 - a3) * 180 / math.pi * 2
-    mouseState.x = x
-    mouseState.y = y
-
-
-def Visualization(title, drawScene=DrawGLScene, width=320, height=200, handleKey=None):
-    global window, _DrawCurrentSceneFunc, _KeyHandlerFunc
-    GLUT.glutInit(sys.argv)
-
-    _DrawCurrentSceneFunc = drawScene
-
-    if handleKey:
-        _KeyHandlerFunc = handleKey
-
-    # Select type of Display mode:
-    #  Double buffer
-    #  RGBA color
-    # Alpha components supported
-    # Depth buffer
-    GLUT.glutInitDisplayMode(GLUT.GLUT_RGBA | GLUT.GLUT_DOUBLE | GLUT.GLUT_DEPTH)
-
-    # get a 640 x 480 window
-    GLUT.glutInitWindowSize(640, 480)
-
-    # the window starts at the upper left corner of the screen
-    GLUT.glutInitWindowPosition(0, 0)
-
-    # Okay, like the C version we retain the window id to use when closing, but
-    # for those of you new to Python (like myself), remember this assignment
-    # would make the variable local and not global if it weren't for the global
-    # declaration at the start of main.
-    window = GLUT.glutCreateWindow(title)
-
-    # Register the drawing function with glut, BUT in Python land, at least
-    # using PyOpenGL, we need to set the function pointer and invoke a function
-    # to actually register the callback, otherwise it would be very much like
-    # the C version of the code.
-    GLUT.glutDisplayFunc(DrawGLScene)
-
-    # Uncomment this line to get full screen.
-    # GLUT.glutFullScreen()
-
-    # When we are doing nothing, redraw the scene.
-    GLUT.glutIdleFunc(DrawGLScene)
-
-    # Register the function called when our window is resized.
-    GLUT.glutReshapeFunc(ReSizeGLScene)
-
-    # Register the function called when the keyboard is pressed.
-    GLUT.glutKeyboardFunc(keyPressed)
-
-    # Register the function called when the mouse is pressed.
-    GLUT.glutMouseFunc(mousePressed)
-
-    # Register the function called when the mouse is pressed.
-    GLUT.glutMotionFunc(mouseMoved)
-
-    # Initialize our window.
-    InitGL(640, 480)
-
-    # Start Event Processing Engine
-    GLUT.glutMainLoop()
-
-
-test_model = None
-test_cutter = None
-test_pathlist = None
-
-
-def DrawTestScene():
-    global test_model, test_cutter, test_pathlist
-    if test_model:
-        GL.glColor4f(1, 0.5, 0.5, 0.1)
-        test_model.to_OpenGL()
-    if test_cutter:
-        GL.glColor3f(0.5, 0.5, 0.5)
-        test_cutter.to_OpenGL()
-    if test_pathlist:
-        for path in test_pathlist:
-            GL.glColor3f(0.5, 0.5, 1)
-            GL.glBegin(GL.GL_LINE_STRIP)
-            for point in path.points:
-                GL.glVertex3f(point.x, point.y, point.z)
-#                GL.glVertex3f(point.x, point.y, point.z+1)
-            GL.glEnd()
-
-
-def ShowTestScene(model=None, cutter=None, pathlist=None):
-    global test_model, test_cutter, test_pathlist
-    test_model = model
-    test_cutter = cutter
-    test_pathlist = pathlist
-    Visualization("TestScene", DrawTestScene)
diff --git a/pycam/Gui/__init__.py b/pycam/Gui/__init__.py
index aa98d69..04b50cb 100644
--- a/pycam/Gui/__init__.py
+++ b/pycam/Gui/__init__.py
@@ -1,24 +1,19 @@
-try:
-    # Python3
-    from configparser import ConfigParser
-except ImportError:
-    # Python2
-    from ConfigParser import ConfigParser
-import pickle
-try:
-    # Python2 (load first - due to incompatible interface)
-    from StringIO import StringIO
-except ImportError:
-    # Python3
-    from io import StringIO
+from configparser import ConfigParser
+import enum
+import json
 
+from pycam.errors import PycamBaseException
 import pycam.Gui.Settings
+from pycam.Utils.locations import open_file_context
 import pycam.Utils.log
+from pycam.workspace import CollectionName
 
 
+FILE_FILTER_WORKSPACE = (("Workspace Files", "*.yml"),)
+
 PREFERENCES_DEFAULTS = {
     "unit": "mm",
-    "default_task_settings_file": "",
+    "save_workspace_on_exit": "ask",
     "show_model": True,
     "show_support_preview": True,
     "show_axes": True,
@@ -27,6 +22,7 @@ PREFERENCES_DEFAULTS = {
     "show_toolpath": True,
     "show_tool": False,
     "show_directions": False,
+    "show_grid": False,
     "color_background": {"red": 0.0, "green": 0.0, "blue": 0.0, "alpha": 1.0},
     "color_model": {"red": 0.5, "green": 0.5, "blue": 1.0, "alpha": 1.0},
     "color_support_preview": {"red": 0.8, "green": 0.8, "blue": 0.3, "alpha": 1.0},
@@ -40,18 +36,8 @@ PREFERENCES_DEFAULTS = {
     "view_shadow": True,
     "view_polygon": True,
     "view_perspective": True,
-    "tool_progress_max_fps": 30,
-    "gcode_safety_height": 25.0,
-    "gcode_plunge_feedrate": 100.0,
-    "gcode_minimum_step_x": 0.0001,
-    "gcode_minimum_step_y": 0.0001,
-    "gcode_minimum_step_z": 0.0001,
-    "gcode_path_mode": 0,
-    "gcode_motion_tolerance": 0,
-    "gcode_naive_tolerance": 0,
-    "gcode_start_stop_spindle": True,
+    "tool_progress_max_fps": 30.0,
     "gcode_filename_extension": "",
-    "gcode_spindle_delay": 3,
     "external_program_inkscape": "",
     "external_program_pstoedit": "",
     "touch_off_on_startup": False,
@@ -69,18 +55,97 @@ PREFERENCES_DEFAULTS = {
 """ the listed items will be loaded/saved via the preferences file in the
 user's home directory on startup/shutdown"""
 
-MAX_UNDO_STATES = 10
-PICKLE_PROTOCOL = 2
+DEFAULT_WORKSPACE = """
+models:
+        model:
+            source:
+                    type: file
+                    location: samples/Box0.stl
+            X-Application:
+                pycam-gtk:
+                    name: Example 3D Model
+                    color: { red: 0.1, green: 0.4, blue: 1.0, alpha: 0.8 }
+
+tools:
+        rough:
+            tool_id: 1
+            shape: flat_bottom
+            radius: 3
+            feed: 600
+            spindle: {speed: 1000.0, spin_up_delay: 2.0, spin_up_enabled: true}
+            X-Application: { pycam-gtk: { name: Big Tool } }
+        fine:
+            tool_id: 2
+            shape: ball_nose
+            radius: 1
+            feed: 1200
+            spindle: {speed: 1000.0, spin_up_delay: 2.0, spin_up_enabled: true}
+            X-Application: { pycam-gtk: { name: Small Tool } }
+
+processes:
+        process_slicing:
+            strategy: slice
+            path_pattern: grid
+            overlap: 0.10
+            step_down: 3.0
+            grid_direction: y
+            milling_style: ignore
+            X-Application: { pycam-gtk: { name: Slice (rough) } }
+        process_surfacing:
+            strategy: surface
+            overlap: 0.80
+            step_down: 1.0
+            grid_direction: x
+            milling_style: ignore
+            X-Application: { pycam-gtk: { name: Surface (fine) } }
+
+bounds:
+        minimal:
+            specification: margins
+            lower: [5, 5, 0]
+            upper: [5, 5, 1]
+            X-Application: { pycam-gtk: { name: minimal } }
+
+tasks:
+        rough:
+            type: milling
+            tool: rough
+            process: process_slicing
+            bounds: minimal
+            collision_models: [ model ]
+            X-Application: { pycam-gtk: { name: Quick Removal } }
+        fine:
+            type: milling
+            tool: fine
+            process: process_surfacing
+            bounds: minimal
+            collision_models: [ model ]
+            X-Application: { pycam-gtk: { name: Finishing } }
+
+export_settings:
+        milling:
+            gcode:
+              corner_style: {mode: optimize_tolerance, motion_tolerance: 0.0, naive_tolerance: 0.0}
+              plunge_feedrate: 100
+              safety_height: 25
+              step_width: {x: 0.0001, y: 0.0001, z: 0.0001}
+            X-Application: { pycam-gtk: { name: Milling Settings } }
+"""
 
 log = pycam.Utils.log.get_logger()
 
 
-class BaseUI(object):
+class QuestionStatus(enum.Enum):
+    YES = "yes"
+    NO = "no"
+    ASK = "ask"
+
+
+class BaseUI:
 
     def __init__(self, event_manager):
         self.settings = event_manager
-        self._undo_states = []
-        self.settings.register_event("model-change-before", self.store_undo_state)
+        self.last_workspace_uri = None
 
     def reset_preferences(self, widget=None):
         """ reset all preferences to their default values """
@@ -90,15 +155,15 @@ class BaseUI(object):
         self.settings.emit_event("model-change-after")
 
     def load_preferences(self):
-        """ load all settings that are available in the Preferences window from
-        a file in the user's home directory """
-        config_filename = pycam.Gui.Settings.get_config_filename()
-        if config_filename is None:
-            # failed to create the personal preferences directory
-            return
+        """ load all settings (see Preferences window) from a file in the user's home directory """
         config = ConfigParser()
-        if not config.read(config_filename):
-            # no config file was read
+        try:
+            with pycam.Gui.Settings.open_preferences_file() as in_file:
+                config.read_file(in_file)
+        except FileNotFoundError as exc:
+            log.info("No preferences file found (%s). Starting with default preferences.", exc)
+        except OSError as exc:
+            log.error("Failed to read preferences: %s", exc)
             return
         # report any ignored (obsolete) preference keys present in the file
         for item, value in config.items("DEFAULT"):
@@ -108,60 +173,119 @@ class BaseUI(object):
             if not config.has_option("DEFAULT", item):
                 # a new preference setting is missing in the (old) file
                 continue
-            value_raw = config.get("DEFAULT", item)
-            value_type = type(PREFERENCES_DEFAULTS[item])
-            if hasattr(value_type(), "split"):
-                # keep strings as they are
-                value = str(value_raw)
-            else:
-                # parse tuples, integers, bools, ...
-                value = eval(value_raw)
+            value_json = config.get("DEFAULT", item)
+            try:
+                value = json.loads(value_json)
+            except ValueError as exc:
+                log.warning("Failed to parse configuration setting '%s': %s", item, exc)
+                value = PREFERENCES_DEFAULTS[item]
+            wanted_type = type(PREFERENCES_DEFAULTS[item])
+            if wanted_type is float:
+                # int is accepted for floats, too
+                wanted_type = (float, int)
+            if not isinstance(value, wanted_type):
+                log.warning("Falling back to default configuration setting for '%s' due to "
+                            "an invalid value type being parsed: %s != %s",
+                            item, type(value), wanted_type)
+                value = PREFERENCES_DEFAULTS[item]
             self.settings.set(item, value)
 
     def save_preferences(self):
-        """ save all settings that are available in the Preferences window to
-        a file in the user's home directory """
-        config_filename = pycam.Gui.Settings.get_config_filename()
-        if config_filename is None:
-            # failed to create the personal preferences directory
-            log.warn("Failed to create a preferences directory in your user's home directory.")
-            return
+        """ save all settings (see Preferences window) to a file in the user's home directory """
         config = ConfigParser()
         for item in PREFERENCES_DEFAULTS:
-            config.set("DEFAULT", item, self.settings.get(item))
+            config.set("DEFAULT", item, json.dumps(self.settings.get(item)))
         try:
-            config_file = open(config_filename, "w")
-            config.write(config_file)
-            config_file.close()
-        except IOError as err_msg:
-            log.warn("Failed to write preferences file (%s): %s", config_filename, err_msg)
-
-    def clear_undo_states(self):
-        """ This function is called by the pycam script after everything is set up properly.  """
-        # empty the "undo" states (accumulated by loading the default model)
-        while self._undo_states:
-            self._undo_states.pop(0)
-        self.settings.emit_event("undo-states-changed")
-
-    def store_undo_state(self):
-        # for now we only store the model
-        if not self.settings.get("models"):
-            return
-        # TODO: store all models
-        self._undo_states.append(pickle.dumps(self.settings.get("models")[0].model,
-                                              PICKLE_PROTOCOL))
-        log.debug("Stored the current state of the model for undo")
-        while len(self._undo_states) > MAX_UNDO_STATES:
-            self._undo_states.pop(0)
-        self.settings.emit_event("undo-states-changed")
+            with pycam.Gui.Settings.open_preferences_file(mode="w") as out_file:
+                config.write(out_file)
+        except OSError as exc:
+            log.warn("Failed to write preferences file: %s", exc)
 
     def restore_undo_state(self, widget=None, event=None):
-        if len(self._undo_states) > 0:
-            latest = StringIO(self._undo_states.pop(-1))
-            model = pickle.Unpickler(latest).load()
-            self.load_model(model)
-            self.gui.get_object("UndoButton").set_sensitive(len(self._undo_states) > 0)
-            log.info("Restored the previous state of the model")
-            self.settings.emit_event("model-change-after")
+        history = self.settings.get("history")
+        if history and history.get_undo_steps_count() > 0:
+            history.restore_previous_state()
         else:
             log.info("No previous undo state available - request ignored")
+
+    def save_startup_workspace(self):
+        self.save_workspace_to_file(pycam.Gui.Settings.get_workspace_filename(),
+                                    remember_uri=False)
+
+    def load_startup_workspace(self):
+        filename = pycam.Gui.Settings.get_workspace_filename()
+        self.load_workspace_from_file(filename, remember_uri=False,
+                                      default_content=DEFAULT_WORKSPACE)
+
+    def save_workspace_to_file(self, filename, remember_uri=True):
+        from pycam.Flow.parser import dump_yaml
+        if remember_uri:
+            self.last_workspace_uri = pycam.Utils.URIHandler(filename)
+            self.settings.emit_event("notify-file-opened", filename)
+        log.info("Storing workspace in file: %s", filename)
+        try:
+            with open_file_context(filename, "w", True) as out_file:
+                dump_yaml(target=out_file)
+        except OSError as exc:
+            log.error("Failed to store workspace in file '%s': %s", filename, exc)
+
+    def load_workspace_from_file(self, filename, remember_uri=True, default_content=None):
+        if remember_uri:
+            self.last_workspace_uri = pycam.Utils.URIHandler(filename)
+            self.settings.emit_event("notify-file-opened", filename)
+        log.info("Loading workspace from file: %s", filename)
+        try:
+            with open_file_context(filename, "r", True) as in_file:
+                content = in_file.read()
+        except OSError as exc:
+            if default_content:
+                content = default_content
+            else:
+                log.error("Failed to read workspace file (%s): %s", filename, exc)
+                return
+        try:
+            self.load_workspace_from_description(content)
+        except PycamBaseException as exc:
+            log.warning("Failed to load workspace description from file (%s): %s", filename, exc)
+            if default_content:
+                log.info("Falling back to default workspace due to load error")
+                self.load_workspace_from_description(default_content)
+
+    def load_workspace_dialog(self, filename=None):
+        if not filename:
+            filename = self.settings.get("get_filename_func")(
+                "Loading workspace ...", mode_load=True, type_filter=FILE_FILTER_WORKSPACE)
+            # no filename selected -> no action
+            if not filename:
+                return
+            remember_uri = True
+        else:
+            remember_uri = False
+        self.load_workspace_from_file(filename, remember_uri=remember_uri)
+
+    def save_workspace_dialog(self, filename=None):
+        if not filename:
+            # we open a dialog
+            filename = self.settings.get("get_filename_func")(
+                "Save workspace to ...", mode_load=False, type_filter=FILE_FILTER_WORKSPACE,
+                filename_templates=(self.last_workspace_uri, self.last_model_uri))
+            # no filename selected -> no action
+            if not filename:
+                return
+            remember_uri = True
+        else:
+            remember_uri = False
+        self.save_workspace_to_file(filename, remember_uri=remember_uri)
+
+    def load_workspace_from_description(self, description):
+        from pycam.Flow.history import merge_history_and_block_events
+        from pycam.Flow.parser import parse_yaml, validate_collections, RestoreCollectionsOnError
+        with merge_history_and_block_events(self.settings):
+            with RestoreCollectionsOnError():
+                parse_yaml(description,
+                           excluded_sections={CollectionName.TOOLPATHS, CollectionName.EXPORTS},
+                           reset=True)
+                validate_collections()
+
+    def reset_workspace(self):
+        self.load_workspace_from_description(DEFAULT_WORKSPACE)
diff --git a/pycam/Gui/common.py b/pycam/Gui/common.py
index 58beaec..fc079aa 100644
--- a/pycam/Gui/common.py
+++ b/pycam/Gui/common.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -37,8 +36,8 @@ DEPENDENCY_DESCRIPTION = {
                "Install the package 'python-opengl'",
                "see http://www.bonifazi.eu/appunti/pygtk_windows_installer.exe"),
     "gtkgl": ("GTK extension for OpenGL",
-              "Install the package 'python-gtkglext1'",
-              "see http://www.bonifazi.eu/appunti/pygtk_windows_installer.exe"),
+              "The OpenGL widget for GTK3 is not yet supported by pycam",
+              "code contributions are welcome - see http://pycam.sf.net/"),
     "gl": ("OpenGL support of graphic driver",
            "Your current graphic driver does not seem to support OpenGL.",
            ""),
@@ -63,12 +62,18 @@ def import_gtk_carefully():
         in_windows = True
     except ImportError:
         in_windows = False
+    try:
+        import gi
+        # avoid Gtk version warnings for later imports
+        gi.require_version("Gtk", "3.0")
+    except ImportError:
+        pass
     if not in_windows:
         # We are not in windows - thus we just try to import gtk without
         # the need for any more manual preparations.
-        import gtk  # noqa F401
+        import gi.repository.Gtk  # noqa F401
     else:
-        # We try to retrive the GTK library directory from the registry before
+        # We try to retrieve the GTK library directory from the registry before
         # trying any import. Otherwise the user will always see a warning
         # dialog regarding the missing libglib-2.0-0.dll file. This Windows
         # warning dialog can't be suppressed - thus we should try to avoid it.
@@ -92,7 +97,7 @@ def import_gtk_carefully():
             else:
                 os.environ["PATH"] = gtk_dll_path
         # everything should be prepared - now we try to import it again
-        import gtk  # noqa F401
+        import gi.repository.Gtk  # noqa F401
 
 
 def requirements_details_gtk():
@@ -137,17 +142,15 @@ def check_dependencies(details):
 
 def get_dependency_report(details, prefix=""):
     result = []
-    DESC_COL = 0
+    columns = {"description": 0, "advice": 1}
     if sys.platform.startswith("win"):
-        ADVICE_COL = 2
-    else:
-        ADVICE_COL = 1
+        columns["advice"] = 2
     for key, state in details.items():
-        text = "%s%s: " % (prefix, DEPENDENCY_DESCRIPTION[key][DESC_COL])
+        text = "%s%s: " % (prefix, DEPENDENCY_DESCRIPTION[key][columns["description"]])
         if state:
             text += "OK"
         else:
-            text += "MISSING (%s)" % DEPENDENCY_DESCRIPTION[key][ADVICE_COL]
+            text += "MISSING (%s)" % DEPENDENCY_DESCRIPTION[key][columns["advice"]]
         result.append(text)
     return os.linesep.join(result)
 
@@ -175,7 +178,7 @@ def set_parent_controls_sensitivity(widget, new_state):
         parent = parent.get_parent()
 
 
-class EmergencyDialog(object):
+class EmergencyDialog:
     """ This graphical message window requires no external dependencies.
     The Tk interface package is part of the main python distribution.
     Use this class for displaying dependency errors (especially on Windows).
diff --git a/pycam/Importers/CXFImporter.py b/pycam/Importers/CXFImporter.py
index e7b28bb..dee4d0b 100644
--- a/pycam/Importers/CXFImporter.py
+++ b/pycam/Importers/CXFImporter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,6 +17,7 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+from pycam.errors import LoadFileError
 from pycam.Geometry.Letters import Charset
 from pycam.Geometry.Line import Line
 from pycam.Geometry.utils import get_points_of_arc
@@ -27,11 +27,11 @@ import pycam.Utils
 log = pycam.Utils.log.get_logger()
 
 
-class _CXFParseError(BaseException):
+class _CXFParseError(LoadFileError):
     pass
 
 
-class _LineFeeder(object):
+class _LineFeeder:
     """ Simplify line-based retrieval of content (including lookahead) """
 
     def __init__(self, items):
@@ -64,7 +64,7 @@ class _LineFeeder(object):
         return self.index
 
 
-class CXFParser(object):
+class CXFParser:
 
     META_KEYWORDS = ("letterspacing", "wordspacing", "linespacingfactor", "encoding")
     META_KEYWORDS_MULTI = ("author", "name")
@@ -75,11 +75,16 @@ class CXFParser(object):
         self.callback = callback
         feeder = _LineFeeder(stream.readlines())
         while not feeder.is_exhausted():
-            line = feeder.consume()
-            if not line:
+            line_data = feeder.consume()
+            if not line_data:
                 # ignore
                 pass
-            elif line.startswith("#"):
+            elif line_data.startswith(b"#"):
+                try:
+                    line = line_data.decode("utf-8")
+                except UnicodeDecodeError as exc:
+                    raise _CXFParseError("Failed to decode line {:d}"
+                                         .format(feeder.get_recent_line_number())) from exc
                 # comment or meta data
                 content = line[1:].split(":", 1)
                 if len(content) == 2:
@@ -91,9 +96,9 @@ class CXFParser(object):
                                 self.meta[key] = float(value)
                             else:
                                 self.meta[key] = value
-                        except ValueError:
-                            raise _CXFParseError("Invalid meta information in line %d"
-                                                 % feeder.get_recent_line_number())
+                        except ValueError as exc:
+                            raise _CXFParseError("Invalid meta information in line {:d}"
+                                                 .format(feeder.get_recent_line_number())) from exc
                     elif key in self.META_KEYWORDS_MULTI:
                         if key in self.meta:
                             self.meta[key].append(value)
@@ -102,47 +107,47 @@ class CXFParser(object):
                     else:
                         # unknown -> ignore
                         pass
-            elif line.startswith("["):
+            elif line_data.startswith(b"["):
                 # Update the GUI from time to time.
                 # This is useful for the big unicode font.
                 if self.callback and (len(self.letters) % 50 == 0):
                     self.callback()
-                if (len(line) >= 3) and (line[2] == "]"):
+                if (len(line_data) >= 3) and (line_data[2:3] == b"]"):
                     # single character
                     for encoding in ("utf-8", "iso8859-1", "iso8859-15"):
                         try:
-                            character = line[1].decode(encoding)
+                            character = line_data[1:2].decode(encoding)
                             break
                         except UnicodeDecodeError:
                             pass
                     else:
-                        raise _CXFParseError("Failed to decode character at line %d"
-                                             % feeder.get_recent_line_number())
-                elif (len(line) >= 6) and (line[5] == "]"):
-                    # python2/3 compatibility
-                    try:
-                        char_conv = unichr
-                    except NameError:
-                        char_conv = chr
+                        raise _CXFParseError("Failed to decode character at line {:d}"
+                                             .format(feeder.get_recent_line_number()))
+                elif (len(line_data) >= 6) and (line_data[5:6] == b"]"):
                     # unicode character (e.g. "[1ae4]")
                     try:
-                        character = char_conv(int(line[1:5], 16))
-                    except ValueError:
-                        raise _CXFParseError("Failed to parse unicode character at line %d"
-                                             % feeder.get_recent_line_number())
-                elif (len(line) > 3) and (line.find("]") > 2):
+                        character = chr(int(line_data[1:5], 16))
+                    except ValueError as exc:
+                        raise _CXFParseError("Failed to parse unicode character at line {:d}"
+                                             .format(feeder.get_recent_line_number())) from exc
+                elif (len(line_data) > 3) and (line_data.find(b"]") > 2):
                     # read UTF8 (qcad 1 compatibility)
-                    end_bracket = line.find("] ")
-                    text = line[1:end_bracket]
+                    end_bracket = line_data.find(b"] ")
+                    text = line_data[1:end_bracket]
                     character = text.decode("utf-8", errors="ignore")[0]
                 else:
                     # unknown format
-                    raise _CXFParseError("Failed to parse character at line %d"
-                                         % feeder.get_recent_line_number())
+                    raise _CXFParseError("Failed to parse character at line {:d}"
+                                         .format(feeder.get_recent_line_number()))
                 # parse the following lines up to the next empty line
                 char_definition = []
                 while not feeder.is_exhausted() and feeder.get_next_line():
-                    line = feeder.consume()
+                    line_data = feeder.consume()
+                    try:
+                        line = line_data.decode("utf-8")
+                    except UnicodeDecodeError as exc:
+                        raise _CXFParseError("Failed to decode line {:d}"
+                                             .format(feeder.get_recent_line_number())) from exc
                     # split the line after the first whitespace
                     type_def, coord_string = line.split(None, 1)
                     coords = [float(value) for value in coord_string.split(",")]
@@ -166,28 +171,28 @@ class CXFParser(object):
                                 char_definition.append(Line(previous, current))
                             previous = current
                     else:
-                        raise _CXFParseError("Failed to read item coordinates in line %d"
-                                             % feeder.get_recent_line_number())
+                        raise _CXFParseError("Failed to read item coordinates in line {:d}"
+                                             .format(feeder.get_recent_line_number()))
                 self.letters[character] = char_definition
             else:
                 # unknown line format
-                raise _CXFParseError("Failed to parse unknown content in line %d"
-                                     % feeder.get_recent_line_number())
+                raise _CXFParseError("Failed to parse unknown content in line {:d}"
+                                     .format(feeder.get_recent_line_number()))
 
 
 def import_font(filename, callback=None):
     try:
         infile = pycam.Utils.URIHandler(filename).open()
-    except IOError as err_msg:
-        log.error("CXFImporter: Failed to read file (%s): %s", filename, err_msg)
-        return None
+    except IOError as exc:
+        raise LoadFileError("CXFImporter: Failed to read file ({}): {}"
+                            .format(filename, exc)) from exc
     try:
         parsed_font = CXFParser(infile, callback=callback)
-    except _CXFParseError as err_msg:
-        log.warn("CFXImporter: Skipped font defintion file '%s'. Reason: %s.", filename, err_msg)
-        return None
+    except _CXFParseError as exc:
+        raise LoadFileError("CFXImporter: Skipped font definition file '{}'. Reason: {}."
+                            .format(filename, exc)) from exc
     charset = Charset(**parsed_font.meta)
-    for key, value in parsed_font.letters.iteritems():
+    for key, value in parsed_font.letters.items():
         charset.add_character(key, value)
     log.info("CXFImporter: Imported CXF font from '%s': %d letters",
              filename, len(parsed_font.letters))
diff --git a/pycam/Importers/DXFImporter.py b/pycam/Importers/DXFImporter.py
index 3ad49a9..7f428a0 100644
--- a/pycam/Importers/DXFImporter.py
+++ b/pycam/Importers/DXFImporter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 $ID$
 
@@ -24,6 +23,7 @@ import math
 import re
 import os
 
+from pycam.errors import AbortOperationException, LoadFileError
 from pycam.Geometry.Triangle import Triangle
 from pycam.Geometry.PointUtils import pdist
 from pycam.Geometry.Line import Line
@@ -42,17 +42,15 @@ def _unescape_control_characters(text):
     for src, dest in (("%%d", u"\u00B0"), ("%%p", u"\u00B1"), ("%%c", u"\u2205"),
                       (r"\P", os.linesep), (r"\~", " ")):
         text = text.replace(src, dest)
-    # python2/3 compatibility
-    try:
-        unichr
-    except NameError:
-        unichr = chr
     # convert "\U+xxxx" to unicode characters
-    return re.sub(r"\\U\+([0-9a-fA-F]{4})",
-                  lambda hex_in: unichr(int(hex_in.groups()[0], 16)), text)
+    return re.sub(r"\\U\+([0-9a-fA-F]{4})", lambda hex_in: chr(int(hex_in.groups()[0], 16)), text)
 
 
-class DXFParser(object):
+class DXFParser:
+    """ parse most entities of an DXF file
+
+    Reference: http://images.autodesk.com/adsk/files/autocad_2012_pdf_dxf-reference_enu.pdf
+    """
 
     # see http://www.autodesk.com/techpubs/autocad/acad2000/dxf/group_code_value_types_dxf_01.htm
     MAX_CHARS_PER_LINE = 2049
@@ -214,18 +212,19 @@ class DXFParser(object):
                 line1 = None
                 line2 = None
         elif line1 in [self.KEYS[key] for key in ("DEFAULT", "TEXT_MORE")]:
-            # check the string for invalid characters
-            try:
-                text = line2.decode("utf")
-            except UnicodeDecodeError:
-                log.warn("DXFImporter: Invalid character in string in line %d", self.line_number)
-                text = line2.decode("utf", errors="ignore")
-            line2 = _unescape_control_characters(text)
+            line2 = _unescape_control_characters(self._carefully_decode(line2))
         else:
-            line2 = line2.upper()
+            line2 = self._carefully_decode(line2).upper()
         self.line_number += 2
         return line1, line2
 
+    def _carefully_decode(self, text):
+        try:
+            return text.decode("utf-8")
+        except UnicodeDecodeError:
+            log.warn("DXFImporter: Invalid character in string in line %d", self.line_number)
+            return text.decode("utf-8", errors="ignore")
+
     def parse_content(self):
         key, value = self._read_key_value()
         while (key is not None) and not ((key == self.KEYS["MARKER"]) and (value == "EOF")):
@@ -873,24 +872,26 @@ class DXFParser(object):
 
 def import_model(filename, color_as_height=False, fonts_cache=None, callback=None, **kwargs):
     if hasattr(filename, "read"):
+        should_close = False
         infile = filename
     else:
+        should_close = True
         try:
             infile = pycam.Utils.URIHandler(filename).open()
-        except IOError as err_msg:
-            log.error("DXFImporter: Failed to read file (%s): %s", filename, err_msg)
-            return None
+        except IOError as exc:
+            raise LoadFileError("DXFImporter: Failed to read file ({}): {}".format(filename, exc))
 
     result = DXFParser(infile, color_as_height=color_as_height, fonts_cache=fonts_cache,
                        callback=callback)
+    if should_close:
+        infile.close()
 
     model_data = result.get_model()
     lines = model_data["lines"]
     triangles = model_data["triangles"]
 
     if callback and callback():
-        log.warn("DXFImporter: load model operation was cancelled")
-        return None
+        raise AbortOperationException("DXFImporter: load model operation was cancelled")
 
     # 3D models are preferred over 2D models
     if triangles:
@@ -930,6 +931,5 @@ def import_model(filename, color_as_height=False, fonts_cache=None, callback=Non
         return model
     else:
         link = "http://pycam.sourceforge.net/supported-formats"
-        log.error('DXFImporter: No supported elements found in DXF file!\n'
-                  '<a href="%s">Read PyCAM\'s modeling hints.</a>', link)
-        return None
+        raise LoadFileError('DXFImporter: No supported elements found in DXF file!\n'
+                            '<a href="%s">Read PyCAM\'s modeling hints.</a>'.format(link))
diff --git a/pycam/Importers/PSImporter.py b/pycam/Importers/PSImporter.py
index 7296931..5f0ebae 100644
--- a/pycam/Importers/PSImporter.py
+++ b/pycam/Importers/PSImporter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -21,9 +20,11 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 import os
 import tempfile
 
+from pycam.errors import AbortOperationException, LoadFileError
 from pycam.Importers.SVGImporter import convert_eps2dxf
 import pycam.Importers.DXFImporter
 import pycam.Utils
+from pycam.Utils.locations import create_named_temporary_file
 
 log = pycam.Utils.log.get_logger()
 
@@ -37,25 +38,22 @@ def import_model(filename, program_locations=None, unit="mm", callback=None, **k
             temp_file = os.fdopen(ps_file_handle, "w")
             temp_file.write(infile.read())
             temp_file.close()
-        except IOError as err_msg:
-            log.error("PSImporter: Failed to create temporary local file (%s): %s",
-                      ps_file_name, err_msg)
-            return
+        except IOError as exc:
+            raise LoadFileError("PSImporter: Failed to create temporary local file ({}): {}"
+                                .format(ps_file_name, exc))
         filename = ps_file_name
     else:
         uri = pycam.Utils.URIHandler(filename)
         if not uri.exists():
-            log.error("PSImporter: file (%s) does not exist", filename)
-            return None
+            raise LoadFileError("PSImporter: file ({}) does not exist".format(filename))
         if not uri.is_local():
             # non-local file - write it to a temporary file first
             ps_file_handle, ps_file_name = tempfile.mkstemp(suffix=".ps")
             os.close(ps_file_handle)
             log.debug("Retrieving PS file for local access: %s -> %s", uri, ps_file_name)
             if not uri.retrieve_remote_file(ps_file_name, callback=callback):
-                log.error("PSImporter: Failed to retrieve the PS model file: %s -> %s",
-                          uri, ps_file_name)
-                return
+                raise LoadFileError("PSImporter: Failed to retrieve the PS model file: {} -> {}"
+                                    .format(uri, ps_file_name))
             filename = ps_file_name
         else:
             filename = uri.get_local_path()
@@ -70,25 +68,21 @@ def import_model(filename, program_locations=None, unit="mm", callback=None, **k
         if os.path.isfile(filename):
             try:
                 os.remove(filename)
-            except OSError as err_msg:
-                log.warn("PSImporter: failed to remove temporary file (%s): %s", filename, err_msg)
+            except OSError as exc:
+                log.warning("PSImporter: failed to remove temporary file ({}): {}"
+                            .format(filename, exc))
 
     # convert eps to dxf via pstoedit
-    dxf_file_handle, dxf_file_name = tempfile.mkstemp(suffix=".dxf")
-    os.close(dxf_file_handle)
-    success = convert_eps2dxf(filename, dxf_file_name, unit=unit, location=pstoedit_path)
-    if not local_file:
-        remove_temp_file(ps_file_name)
-    if not success:
-        result = None
-    elif callback and callback():
-        log.warn("PSImporter: load model operation cancelled")
-        result = None
-    else:
-        log.info("Successfully converted PS file to DXF file")
-        # pstoedit uses "inch" -> force a scale operation
-        result = pycam.Importers.DXFImporter.import_model(dxf_file_name, unit=unit,
-                                                          callback=callback)
-    # always remove the dxf file
-    remove_temp_file(dxf_file_name)
-    return result
+    with create_named_temporary_file(suffix=".dxf") as dxf_file_name:
+        success = convert_eps2dxf(filename, dxf_file_name, unit=unit, location=pstoedit_path)
+        if not local_file:
+            remove_temp_file(ps_file_name)
+        if not success:
+            raise LoadFileError("Failed to convert EPS to DXF file")
+        elif callback and callback():
+            raise AbortOperationException("PSImporter: load model operation cancelled")
+        else:
+            log.info("Successfully converted PS file to DXF file")
+            # pstoedit uses "inch" -> force a scale operation
+            return pycam.Importers.DXFImporter.import_model(dxf_file_name, unit=unit,
+                                                            callback=callback)
diff --git a/pycam/Importers/STLImporter.py b/pycam/Importers/STLImporter.py
index fa36102..dffcebe 100644
--- a/pycam/Importers/STLImporter.py
+++ b/pycam/Importers/STLImporter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
@@ -19,15 +18,11 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+from io import BufferedReader, BytesIO, TextIOWrapper
 import re
-try:
-    # Python2 (load first - due to incompatible interface)
-    from StringIO import StringIO
-except ImportError:
-    # Python3
-    from io import StringIO
 from struct import unpack
 
+from pycam.errors import AbortOperationException, LoadFileError
 from pycam.Geometry import epsilon
 from pycam.Geometry.Model import Model
 from pycam.Geometry.PointKdtree import PointKdtree
@@ -37,18 +32,22 @@ import pycam.Utils.log
 import pycam.Utils
 log = pycam.Utils.log.get_logger()
 
+# The amount of bytes in the header field
+HEADER_SIZE = 80
+# The amount of bytes in the count field
+COUNT_SIZE = 4
 
 vertices = 0
 edges = 0
 kdtree = None
-lastUniqueVertex = (None, None, None)
+last_unique_vertex = (None, None, None)
 
 
-def UniqueVertex(x, y, z):
-    global vertices, lastUniqueVertex
+def get_unique_vertex(x, y, z):
+    global vertices, last_unique_vertex
     if kdtree:
-        p = kdtree.Point(x, y, z)
-        if p == lastUniqueVertex:
+        p = kdtree.point(x, y, z)
+        if p == last_unique_vertex:
             vertices += 1
         return p
     else:
@@ -56,7 +55,39 @@ def UniqueVertex(x, y, z):
         return (x, y, z)
 
 
-def ImportModel(filename, use_kdtree=True, callback=None, **kwargs):
+def get_facet_count_if_binary_format(source):
+    """ Read the first two lines of (potentially non-binary) input - they should contain "solid"
+    and "facet". The return value is a number representing the number of facets (binary format) or
+    None (text format).
+
+    The below detection is quite simple: it looks for the strings "facet" and "solid" in the first
+    400 bytes.
+    An even better detection would check, if the following conditition is true:
+        numfacets = unpack("<I", raw_header_data[80:84])[0]
+        return source.len == (84 + 50 * numfacets)
+    But this check requires access to the length attribute of the input data. This is not easily
+    available for remote sources (e.g. via http). Thus we stick to the simple check.
+    """
+    # read data (without consuming it)
+    raw_header_data = source.peek(400)
+
+    facet_count = unpack(
+        "<I", raw_header_data[HEADER_SIZE:HEADER_SIZE + COUNT_SIZE]
+    )[0]
+
+    try:
+        header_data = raw_header_data.decode("utf-8")
+    except UnicodeDecodeError:
+        # it does not look like text
+        return facet_count
+    if ("solid" in header_data) and ("facet" in header_data):
+        # this looks like a text format
+        return None
+    else:
+        return facet_count
+
+
+def import_model(filename, use_kdtree=True, callback=None, **kwargs):
     global vertices, edges, kdtree
     vertices = 0
     edges = 0
@@ -66,51 +97,22 @@ def ImportModel(filename, use_kdtree=True, callback=None, **kwargs):
 
     if hasattr(filename, "read"):
         # make sure that the input stream can seek and has ".len"
-        f = StringIO(filename.read())
+        f = BufferedReader(filename)
         # useful for later error messages
         filename = "input stream"
     else:
         try:
             url_file = pycam.Utils.URIHandler(filename).open()
-            # urllib.urlopen objects do not support "seek" - so we need to read
-            # the whole file at once. This is ugly - anyone with a better idea?
-            f = StringIO(url_file.read())
-            # TODO: the above ".read" may be incomplete - this is ugly
-            # see http://patrakov.blogspot.com/2011/03/case-of-non-raised-exception.html
-            # and http://stackoverflow.com/questions/1824069/
+            # urllib.urlopen objects do not support "seek" - so we need a buffered reader
+            # Is there a better approach than consuming the whole file at once?
+            f = BufferedReader(BytesIO(url_file.read()))
             url_file.close()
-        except IOError as err_msg:
-            log.error("STLImporter: Failed to read file (%s): %s", filename, err_msg)
-            return None
-    # Read the first two lines of (potentially non-binary) input - they should
-    # contain "solid" and "facet".
-    header_lines = []
-    while len(header_lines) < 2:
-        line = f.readline(200)
-        if len(line) == 0:
-            # empty line (not even a line-feed) -> EOF
-            log.error("STLImporter: No valid lines found in '%s'", filename)
-            return None
-        # ignore comment lines
-        # note: partial comments (starting within a line) are not handled
-        if not line.startswith(";"):
-            header_lines.append(line)
-    header = "".join(header_lines)
-    # read byte 80 to 83 - they contain the "numfacets" value in binary format
-    f.seek(80)
-    numfacets = unpack("<I", f.read(4))[0]
-    binary = False
-    log.debug("STL import info: %s / %s / %s / %s",
-              f.len, numfacets, header.find("solid"), header.find("facet"))
-
-    if f.len == (84 + 50*numfacets):
-        binary = True
-    elif header.find("solid") >= 0 and header.find("facet") >= 0:
-        binary = False
-        f.seek(0)
-    else:
-        log.error("STLImporter: STL binary/ascii detection failed")
-        return None
+        except IOError as exc:
+            raise LoadFileError("STLImporter: Failed to read file ({}): {}".format(filename, exc))
+
+    # the facet count is only available for the binary format
+    facet_count = get_facet_count_if_binary_format(f)
+    is_binary = (facet_count is not None)
 
     if use_kdtree:
         kdtree = PointKdtree([], 3, 1, epsilon)
@@ -121,11 +123,13 @@ def ImportModel(filename, use_kdtree=True, callback=None, **kwargs):
     p2 = None
     p3 = None
 
-    if binary:
-        for i in range(1, numfacets + 1):
+    if is_binary:
+        # Skip the header and count fields of binary stl file
+        f.seek(HEADER_SIZE + COUNT_SIZE)
+
+        for i in range(1, facet_count + 1):
             if callback and callback():
-                log.warn("STLImporter: load model operation cancelled")
-                return None
+                raise AbortOperationException("STLImporter: load model operation cancelled")
             a1 = unpack("<f", f.read(4))[0]
             a2 = unpack("<f", f.read(4))[0]
             a3 = unpack("<f", f.read(4))[0]
@@ -136,19 +140,19 @@ def ImportModel(filename, use_kdtree=True, callback=None, **kwargs):
             v12 = unpack("<f", f.read(4))[0]
             v13 = unpack("<f", f.read(4))[0]
 
-            p1 = UniqueVertex(float(v11), float(v12), float(v13))
+            p1 = get_unique_vertex(float(v11), float(v12), float(v13))
 
             v21 = unpack("<f", f.read(4))[0]
             v22 = unpack("<f", f.read(4))[0]
             v23 = unpack("<f", f.read(4))[0]
 
-            p2 = UniqueVertex(float(v21), float(v22), float(v23))
+            p2 = get_unique_vertex(float(v21), float(v22), float(v23))
 
             v31 = unpack("<f", f.read(4))[0]
             v32 = unpack("<f", f.read(4))[0]
             v33 = unpack("<f", f.read(4))[0]
 
-            p3 = UniqueVertex(float(v31), float(v32), float(v33))
+            p3 = get_unique_vertex(float(v31), float(v32), float(v33))
 
             # not used (additional attributes)
             f.read(2)
@@ -179,6 +183,8 @@ def ImportModel(filename, use_kdtree=True, callback=None, **kwargs):
 
             model.append(t)
     else:
+        # from here on we want to use a text based input stream (not bytes)
+        f = TextIOWrapper(f, encoding="utf-8")
         solid = re.compile(r"\s*solid\s+(\w+)\s+.*")
         endsolid = re.compile(r"\s*endsolid\s*")
         facet = re.compile(r"\s*facet\s*")
@@ -198,8 +204,7 @@ def ImportModel(filename, use_kdtree=True, callback=None, **kwargs):
 
         for line in f:
             if callback and callback():
-                log.warn("STLImporter: load model operation cancelled")
-                return None
+                raise AbortOperationException("STLImporter: load model operation cancelled")
             current_line += 1
             m = solid.match(line)
             if m:
@@ -219,7 +224,8 @@ def ImportModel(filename, use_kdtree=True, callback=None, **kwargs):
                 continue
             m = vertex.match(line)
             if m:
-                p = UniqueVertex(float(m.group('x')), float(m.group('y')), float(m.group('z')))
+                p = get_unique_vertex(float(m.group('x')), float(m.group('y')),
+                                      float(m.group('z')))
                 if p1 is None:
                     p1 = p
                 elif p2 is None:
@@ -277,14 +283,14 @@ def ImportModel(filename, use_kdtree=True, callback=None, **kwargs):
             if m:
                 continue
 
-    log.info("Imported STL model: %d vertices, %d edges, %d triangles",
-             vertices, edges, len(model.triangles()))
+    # TODO display unique vertices and edges count - currently not counted
+    log.info("Imported STL model: %d triangles", len(model.triangles()))
     vertices = 0
     edges = 0
     kdtree = None
 
     if not model:
         # no valid items added to the model
-        return None
+        raise LoadFileError("Failed to load model from STL file: no elements found")
     else:
         return model
diff --git a/pycam/Importers/SVGDirectImporter.py b/pycam/Importers/SVGDirectImporter.py
new file mode 100644
index 0000000..f1fdbc6
--- /dev/null
+++ b/pycam/Importers/SVGDirectImporter.py
@@ -0,0 +1,251 @@
+"""
+parse basic structures from an SVG file
+
+The goal of this parser is not to grasp the full complexity of SVG. Only the following items
+are supported:
+    * "g": grouping of objects into layers
+    * "path": parse the "d" attribute via svg.path into straight and non-straight lines
+
+see https://www.w3.org/TR/2011/REC-SVG11-20110816/struct.html#Groups
+
+
+Copyright 2018 Lars Kruse <devel@sumpfralle.de>
+
+This file is part of PyCAM.
+
+PyCAM is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
+"""
+
+import collections
+import math
+
+import svg.path
+import xml.etree.ElementTree
+
+from pycam.errors import AbortOperationException
+import pycam.Geometry.Line
+import pycam.Geometry.Polygon
+import pycam.Geometry.Model
+import pycam.Utils
+from pycam.Utils.locations import open_file_context
+
+log = pycam.Utils.log.get_logger()
+
+
+# the following tags are known to exist, but are not relevant for our importer
+IGNORED_TAGS = {
+    "defs",
+    "metadata",
+    # part of the "text" tag, which already causes a helpful warning to be emitted
+    "tspan",
+    "{http://creativecommons.org/ns#}Work",
+    "{http://purl.org/dc/elements/1.1/}format",
+    "{http://purl.org/dc/elements/1.1/}type",
+    "{http://purl.org/dc/elements/1.1/}title",
+    "{http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd}namedview",
+    "{http://www.inkscape.org/namespaces/inkscape}path-effect",
+    "{http://www.inkscape.org/namespaces/inkscape}perspective",
+    "{http://www.w3.org/1999/02/22-rdf-syntax-ns#}RDF",
+}
+# these tags are technically difficult or impossible to implement
+UNSUPPORTABLE_TAGS = {"text"}
+
+PathGroup = collections.namedtuple("PathGroup", ("id", "paths"))
+
+
+class SVGXMLParser:
+
+    def __init__(self):
+        self.groups = []
+        self.namespace = ""
+        self._emitted_tag_warnings = set()
+
+    def _append_svg_path(self, path: svg.path.Path):
+        if not self.groups:
+            self.groups.append(PathGroup(None, []))
+        self.groups[-1].paths.append(path)
+
+    @staticmethod
+    def _parse_svg_path_from_rectangle(x, y, dim_x, dim_y, rx, ry):
+        def get_line(start, end):
+            return svg.path.Line(complex(*start), complex(*end))
+
+        def get_small_clockwise_arc(start, radius, end):
+            # arc: we pick the small arc (<180 degrees)
+            # sweep: we use counter-clockwise direction
+            return svg.path.Arc(start=complex(*start), radius=complex(*radius),
+                                rotation=0, arc=False, sweep=False, end=complex(*end))
+
+        segments = []
+        if rx is None and ry is None:
+            # corners of the rectangle in counter-clockwise order
+            p1, p2, p3, p4 = (x, y), (x + dim_x, y), (x + dim_x, y + dim_y), (x, y + dim_y)
+            segments.append(get_line(p1, p2))
+            segments.append(get_line(p2, p3))
+            segments.append(get_line(p3, p4))
+            segments.append(get_line(p4, p1))
+        else:
+            # Positions within the rectangle in counter-clockwise order, where the straight lines
+            # and the arcs meet.
+            p_bottom1, p_bottom2 = (x + rx, y), (x + dim_x - rx, y)
+            p_right1, p_right2 = (x + dim_x, y + ry), (x + dim_x, y + dim_y - ry)
+            p_top1, p_top2 = (x + dim_x - rx, y + dim_y), (x + rx, y + dim_y)
+            p_left1, p_left2 = (x, y + dim_y - ry), (x, y + ry)
+            segments.append(get_line(p_bottom1, p_bottom2))
+            segments.append(get_small_clockwise_arc(p_bottom2, (rx, ry), p_right1))
+            segments.append(get_line(p_right1, p_right2))
+            segments.append(get_small_clockwise_arc(p_right2, (rx, ry), p_top1))
+            segments.append(get_line(p_top1, p_top2))
+            segments.append(get_small_clockwise_arc(p_top2, (rx, ry), p_left1))
+            segments.append(get_line(p_left1, p_left2))
+            segments.append(get_small_clockwise_arc(p_left2, (rx, ry), p_bottom1))
+        path = svg.path.Path(*segments)
+        path.closed = True
+        return path
+
+    def start(self, tag, attrib):
+        if tag.startswith(self.namespace):
+            tag = tag[len(self.namespace):]
+        if tag.endswith("}svg"):
+            self.namespace = tag[:-3]
+        elif tag == "g":
+            self.groups.append(PathGroup(attrib.get("id"), []))
+        elif tag == "path":
+            parsed_path = svg.path.parse_path(attrib["d"])
+            self._append_svg_path(parsed_path)
+        elif tag == "rect":
+            parsed_path = self._parse_svg_path_from_rectangle(
+                float(attrib["x"]), float(attrib["y"]),
+                float(attrib["width"]), float(attrib["height"]),
+                float(attrib.get("rx", 0)), float(attrib.get("ry", 0)))
+            self._append_svg_path(parsed_path)
+        elif tag in IGNORED_TAGS:
+            if tag not in self._emitted_tag_warnings:
+                log.debug("SVGImporter: ignoring irrelevant tag '<%s>'", tag)
+                self._emitted_tag_warnings.add(tag)
+        elif tag in UNSUPPORTABLE_TAGS:
+            if tag not in self._emitted_tag_warnings:
+                log.warning("SVGImporter: encountered the SVG tag '<%s>', which is not supported. "
+                            "Please convert this object into a path (e.g. with inkscape).", tag)
+                self._emitted_tag_warnings.add(tag)
+        else:
+            if tag not in self._emitted_tag_warnings:
+                log.warning(
+                    "SVGImporter: ignoring unsupported SVG element: <%s>. Please open an issue, "
+                    "if you think it is a basic element and should be supported.", tag)
+                self._emitted_tag_warnings.add(tag)
+
+    def end(self, tag):
+        pass
+
+    def data(self, data):
+        pass
+
+    def close(self):
+        pass
+
+
+def parse_path_groups_from_svg_file(filename, callback=None):
+    """ parse SVG data from a file and return the resulting svg.path objects grouped by layer """
+    if callback is None:
+        # we are not running interactively - use big chunks
+        read_chunk_size = 1 * 1024 ** 3
+    else:
+        # read smaller 16 KB chunks (improving responsiveness of the GUI)
+        read_chunk_size = 64 * 1024 ** 2
+    target = SVGXMLParser()
+    parser = xml.etree.ElementTree.XMLParser(target=target)
+    try:
+        with open_file_context(filename, "r", True) as svg_file:
+            while True:
+                chunk = svg_file.read(read_chunk_size)
+                if not chunk:
+                    break
+                parser.feed(chunk)
+                if callback and callback():
+                    raise AbortOperationException(
+                        "SVGImporter: load model operation was cancelled")
+    except IOError as exc:
+        log.error("SVGImporter: Failed to read svg file (%s): %s", filename, exc)
+        return
+    parser.close()
+    return target.groups
+
+
+def _get_polygons_from_svg_path(path: svg.path.Path, z, accuracy=0.1, min_interpolation_steps=5):
+    """ convert an svg.path.Path object into a list of pycam.Geometry.Polygon.Polygon
+
+    @param z: the wanted z value for all (flat by design) paths
+    """
+    polygons = []
+    previous_segment_end = None
+    for segment in path:
+        current_segment_start = segment.point(0)
+        current_segment_end = segment.point(1)
+        if (previous_segment_end is None) or (previous_segment_end != current_segment_start):
+            # create a new polygon
+            polygons.append(pycam.Geometry.Polygon.Polygon())
+        current_polygon = polygons[-1]
+        if isinstance(segment, svg.path.Line):
+            step_count = 1
+        else:
+            # we need to add points on the (non-straight) way
+            step_count = min(min_interpolation_steps, math.ceil(segment.length() / accuracy))
+        previous_path_point = None
+        for step_index in range(0, step_count + 1):
+            position = segment.point(step_index / step_count)
+            new_point = (position.real, position.imag, z)
+            if previous_path_point is not None:
+                line = pycam.Geometry.Line.Line(previous_path_point, new_point)
+                try:
+                    current_polygon.append(line)
+                except ValueError:
+                    if line.len < 0.0001:
+                        # zero-length line warnings are tolerable
+                        pass
+                    else:
+                        raise
+            previous_path_point = new_point
+        previous_segment_end = current_segment_end
+    # filter out all empty polygons
+    return [polygon for polygon in polygons if polygon]
+
+
+def get_polygons_from_path_groups(path_groups, z_level_map=None):
+    """ convert a list of PathGroup instances to a list of polygons
+
+    @param z_level_map: optional override of z levels for the different groups. Each group
+        without a defined level is assigned a height of zero, one, two and so forth.
+    """
+    if z_level_map is None:
+        z_level_map = {}
+    polygons = []
+    default_level = 0
+    for group in path_groups:
+        try:
+            level = z_level_map[group.id]
+        except KeyError:
+            level = default_level
+            default_level += 1
+        for path in group.paths:
+            polygons.extend(_get_polygons_from_svg_path(path, level))
+    return polygons
+
+
+def import_model(filename, callback=None, **kwargs):
+    path_groups = parse_path_groups_from_svg_file(filename, callback=callback)
+    model = pycam.Geometry.Model.ContourModel()
+    for polygon in get_polygons_from_path_groups(path_groups):
+        model.append(polygon)
+    return model
diff --git a/pycam/Importers/SVGImporter.py b/pycam/Importers/SVGImporter.py
index 22dd5de..655cd3b 100644
--- a/pycam/Importers/SVGImporter.py
+++ b/pycam/Importers/SVGImporter.py
@@ -1,5 +1,7 @@
-# -*- coding: utf-8 -*-
 """
+TODO: remove this obsolete SVGImporter
+see https://github.com/SebKuzminsky/pycam/issues/118
+
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
 This file is part of PyCAM.
@@ -22,9 +24,10 @@ import os
 import subprocess
 import tempfile
 
+from pycam.errors import AbortOperationException, LoadFileError
 import pycam.Importers.DXFImporter
-from pycam.Utils.locations import get_external_program_location
 import pycam.Utils
+from pycam.Utils.locations import create_named_temporary_file, get_external_program_location
 log = pycam.Utils.log.get_logger()
 
 
@@ -38,17 +41,14 @@ def convert_svg2eps(svg_filename, eps_filename, location=None):
                                    stderr=subprocess.PIPE,
                                    args=[location, "--export-area-page", "--export-eps",
                                          eps_filename, svg_filename])
-    except OSError as err_msg:
-        log.error("SVGImporter: failed to execute 'inkscape' (%s): %s%sMaybe you need to install "
-                  "Inkscape (http://inkscape.org)?", location, err_msg, os.linesep)
-        return False
+    except OSError as exc:
+        raise LoadFileError("SVGImporter: failed to execute 'inkscape' ({}): {}{}Maybe you need "
+                            "to install Inkscape (http://inkscape.org)?"
+                            .format(location, exc, os.linesep))
     returncode = process.wait()
-    if returncode == 0:
-        return True
-    else:
-        log.warn("SVGImporter: failed to convert SVG file (%s) to EPS file (%s): %s",
-                 svg_filename, eps_filename, process.stderr.read())
-        return False
+    if returncode != 0:
+        raise LoadFileError("SVGImporter: failed to convert SVG file ({}) to EPS file ({}): {}"
+                            .format(svg_filename, eps_filename, process.stderr.read()))
 
 
 def convert_eps2dxf(eps_filename, dxf_filename, location=None, unit="mm"):
@@ -66,9 +66,9 @@ def convert_eps2dxf(eps_filename, dxf_filename, location=None, unit="mm"):
         process = subprocess.Popen(stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE, args=args)
     except OSError as err_msg:
-        log.error("SVGImporter: failed to execute 'pstoedit' (%s): %s%sMaybe you need to install "
-                  "pstoedit (http://pstoedit.net)?", location, err_msg, os.linesep)
-        return False
+        raise LoadFileError("SVGImporter: failed to execute 'pstoedit' ({}): {}{}Maybe you need "
+                            "to install pstoedit (http://pstoedit.net)?"
+                            .format(location, err_msg, os.linesep))
     returncode = process.wait()
     if returncode == 0:
         try:
@@ -79,22 +79,19 @@ def convert_eps2dxf(eps_filename, dxf_filename, location=None, unit="mm"):
                 log.warn("SVGImporter: maybe there was a problem with the conversion from EPS "
                          "(%s) to DXF.\nProbably you need to install 'ghostscript' "
                          "(http://pages.cs.wisc.edu/~ghost).", str(eps_filename))
-            return True
         except OSError:
             # The dxf file was not created.
-            log.warn("SVGImporter: no DXF file was created, even though no error code was "
-                     "returned. This seems to be a bug of 'pstoedit'. Please send the original "
-                     "model file to the PyCAM developers. Thanks!")
-            return False
+            raise LoadFileError("SVGImporter: no DXF file was created, even though no error code "
+                                "was returned. This seems to be a bug of 'pstoedit'. Please send "
+                                "the original model file to the PyCAM developers. Thanks!")
     elif returncode == -11:
+        # just a warning - probably it worked fine
         log.warn("SVGImporter: maybe there was a problem with the conversion from EPS (%s) to "
                  "DXF.\n Users of Ubuntu 'lucid' should install the package 'libpstoedit0c2a' "
                  "from the 'maverick' repository to avoid this warning.", str(eps_filename))
-        return True
     else:
-        log.warn("SVGImporter: failed to convert EPS file (%s) to DXF file (%s): %s",
-                 eps_filename, dxf_filename, process.stderr.read())
-        return False
+        raise LoadFileError("SVGImporter: failed to convert EPS file ({}) to DXF file ({}): {}"
+                            .format(eps_filename, dxf_filename, process.stderr.read()))
 
 
 def import_model(filename, program_locations=None, unit="mm", callback=None, **kwargs):
@@ -144,11 +141,6 @@ def import_model(filename, program_locations=None, unit="mm", callback=None, **k
     # Sadly a bug in v0.47 breaks this:
     # https://bugs.launchpad.net/inkscape/+bug/511361
 
-    # convert svg to eps via inkscape
-    eps_file_handle, eps_file_name = tempfile.mkstemp(suffix=".eps")
-    os.close(eps_file_handle)
-    success = convert_svg2eps(filename, eps_file_name, location=inkscape_path)
-
     def remove_temp_file(filename):
         if os.path.isfile(filename):
             try:
@@ -157,33 +149,23 @@ def import_model(filename, program_locations=None, unit="mm", callback=None, **k
                 log.warn("SVGImporter: failed to remove temporary file (%s): %s",
                          filename, err_msg)
 
-    # remove the temporary file
-    if not local_file:
-        remove_temp_file(svg_file_name)
-    if not success:
-        remove_temp_file(eps_file_name)
-        return None
-    if callback and callback():
-        remove_temp_file(eps_file_name)
-        log.warn("SVGImporter: load model operation was cancelled")
-        return None
-    log.info("Successfully converted SVG file to EPS file")
-
-    # convert eps to dxf via pstoedit
-    dxf_file_handle, dxf_file_name = tempfile.mkstemp(suffix=".dxf")
-    os.close(dxf_file_handle)
-    success = convert_eps2dxf(eps_file_name, dxf_file_name, unit=unit, location=pstoedit_path)
-    # we don't need the eps file anymore
-    remove_temp_file(eps_file_name)
-    if not success:
-        result = None
-    elif callback and callback():
-        log.warn("SVGImporter: load model operation was cancelled")
-        result = None
-    else:
-        log.info("Successfully converted EPS file to DXF file")
-        result = pycam.Importers.DXFImporter.import_model(dxf_file_name, unit=unit,
-                                                          color_as_height=True, callback=callback)
-    # always remove the dxf file
-    remove_temp_file(dxf_file_name)
-    return result
+    # convert svg to eps via inkscape
+    with create_named_temporary_file(suffix=".eps") as eps_file_name:
+        convert_svg2eps(filename, eps_file_name, location=inkscape_path)
+
+        # remove the temporary file
+        if not local_file:
+            remove_temp_file(svg_file_name)
+        if callback and callback():
+            raise AbortOperationException("SVGImporter: load model operation was cancelled")
+        log.info("Successfully converted SVG file to EPS file")
+
+        # convert eps to dxf via pstoedit
+        with create_named_temporary_file(suffix=".dxf") as dxf_file_name:
+            convert_eps2dxf(eps_file_name, dxf_file_name, unit=unit, location=pstoedit_path)
+            if callback and callback():
+                raise AbortOperationException("SVGImporter: load model operation was cancelled")
+            else:
+                log.info("Successfully converted EPS file to DXF file")
+                return pycam.Importers.DXFImporter.import_model(
+                    dxf_file_name, unit=unit, color_as_height=True, callback=callback)
diff --git a/pycam/Importers/TestModel.py b/pycam/Importers/TestModel.py
index 5fcb683..b501c5a 100644
--- a/pycam/Importers/TestModel.py
+++ b/pycam/Importers/TestModel.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2009 Lode Leroy
 
diff --git a/pycam/Importers/ToolpathSettingsParser.py b/pycam/Importers/ToolpathSettingsParser.py
deleted file mode 100644
index 2808860..0000000
--- a/pycam/Importers/ToolpathSettingsParser.py
+++ /dev/null
@@ -1,88 +0,0 @@
-# -*- coding: utf-8 -*-
-"""
-Copyright 2010 Lars Kruse <devel@sumpfralle.de>
-
-This file is part of PyCAM.
-
-PyCAM is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-PyCAM is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
-"""
-
-import os
-import re
-import sys
-
-import pycam.Gui.Settings
-import pycam.Gui.Project
-import pycam.Utils.log
-import pycam.Utils
-
-COMMENT_CHARACTERS = r";#"
-REGEX_META_KEYWORDS = r"[%s]?%s (.*): (.*)$" % (COMMENT_CHARACTERS,
-                                                pycam.Gui.Project.ProjectGui.META_DATA_PREFIX)
-REGEX_SETTINGS_START = r"[%s]?%s$" % (COMMENT_CHARACTERS,
-                                      pycam.Gui.Settings.ToolpathSettings.META_MARKER_START)
-REGEX_SETTINGS_END = r"[%s]?%s$" % (COMMENT_CHARACTERS,
-                                    pycam.Gui.Settings.ToolpathSettings.META_MARKER_END)
-
-log = pycam.Utils.log.get_logger()
-
-
-def parse_toolpath_settings(filename):
-    """ parse potential PyCAM settings from a given file
-
-    This is mainly useful to retrieve task settings from a GCode file.
-    @value filename: the name of the file to be read
-    @type filename: str
-    @returns: a dictionary (of all setting names and values) and the content
-            of the 'comment' section (as a single string)
-    @rtype: tuple(dict, str)
-    """
-    keywords = {}
-    in_meta_zone = False
-    meta_content = []
-    if filename == "-":
-        # read from stdin, if the input filename is "-"
-        infile = sys.stdin
-        close_file = False
-    else:
-        # open the file
-        try:
-            infile = pycam.Utils.URIHandler(filename).open()
-        except IOError as err_msg:
-            log.warn("ToolpathSettingsParser: Failed to read file (%s): %s", filename, err_msg)
-            return None
-        close_file = True
-    for line in infile.readlines():
-        match = re.match(REGEX_META_KEYWORDS, line)
-        if match:
-            keywords[match.groups()[0]] = match.groups()[1].strip()
-        if in_meta_zone:
-            if re.match(REGEX_SETTINGS_END, line):
-                in_meta_zone = False
-            else:
-                if line and line[0] in COMMENT_CHARACTERS:
-                    meta_content[-1].append(line[1:].strip())
-        else:
-            if re.match(REGEX_SETTINGS_START, line):
-                in_meta_zone = True
-                meta_content.append([])
-    if close_file:
-        # only close the file if it was opened before (e.g. not stdin)
-        infile.close()
-    return keywords, [os.linesep.join(one_block) for one_block in meta_content]
-
-
-if __name__ == "__main__":
-    # for testing: output the parsed content of the given file (first argument)
-    print("\n#################\n".join(parse_toolpath_settings(sys.argv[1])[1]))
diff --git a/pycam/Importers/__init__.py b/pycam/Importers/__init__.py
index 05c69a7..d54ce4b 100644
--- a/pycam/Importers/__init__.py
+++ b/pycam/Importers/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008 Lode Leroy
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
@@ -35,18 +34,18 @@ def detect_file_type(filename, quiet=False):
     import pycam.Importers.DXFImporter
     import pycam.Importers.PSImporter
     import pycam.Importers.STLImporter
-    import pycam.Importers.SVGImporter
+    from pycam.Importers.SVGDirectImporter import import_model as import_model_from_svg
     # also accept URI input
     uri = pycam.Utils.URIHandler(filename)
     filename = uri.get_path()
     # check all listed importers
     # TODO: this should be done by evaluating the header of the file
     if filename.lower().endswith(".stl"):
-        return DetectedFileType("stl", pycam.Importers.STLImporter.ImportModel, uri)
+        return DetectedFileType("stl", pycam.Importers.STLImporter.import_model, uri)
     elif filename.lower().endswith(".dxf"):
         return DetectedFileType("dxf", pycam.Importers.DXFImporter.import_model, uri)
     elif filename.lower().endswith(".svg"):
-        return DetectedFileType("svg", pycam.Importers.SVGImporter.import_model, uri)
+        return DetectedFileType("svg", import_model_from_svg, uri)
     elif filename.lower().endswith(".eps") \
             or filename.lower().endswith(".ps"):
         return DetectedFileType("ps", pycam.Importers.PSImporter.import_model, uri)
diff --git a/pycam/PathGenerators/ContourFollow.py b/pycam/PathGenerators/ContourFollow.py
index 65215ab..e2ad07a 100644
--- a/pycam/PathGenerators/ContourFollow.py
+++ b/pycam/PathGenerators/ContourFollow.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -70,7 +69,7 @@ def _process_one_triangle(extra_args):
         return result, None
 
 
-class CollisionPaths(object):
+class CollisionPaths:
 
     def __init__(self):
         self.waterlines = []
@@ -189,7 +188,7 @@ class CollisionPaths(object):
         return result
 
 
-class ContourFollow(object):
+class ContourFollow:
 
     def __init__(self, path_processor):
         self.pa = path_processor
@@ -199,8 +198,8 @@ class ContourFollow(object):
     def _get_free_paths(self, cutter, models, p1, p2):
         return get_free_paths_triangles(models, cutter, p1, p2)
 
-    def GenerateToolPath(self, cutter, models, minx, maxx, miny, maxy, minz, maxz, dz,
-                         draw_callback=None):
+    def generate_toolpath(self, cutter, models, minx, maxx, miny, maxy, minz, maxz, dz,
+                          draw_callback=None):
         # reset the list of processed triangles
         self._processed_triangles = []
         # calculate the number of steps
@@ -231,15 +230,15 @@ class ContourFollow(object):
                     # cancel immediately
                     break
             self.pa.new_direction(0)
-            self.GenerateToolPathSlice(cutter, models[0], minx, maxx, miny, maxy, z, draw_callback,
-                                       progress_counter, num_of_triangles)
+            self.generate_toolpath_slice(cutter, models[0], minx, maxx, miny, maxy, z,
+                                         draw_callback, progress_counter, num_of_triangles)
             self.pa.end_direction()
             self.pa.finish()
             current_layer += 1
         return self.pa.paths
 
-    def GenerateToolPathSlice(self, cutter, model, minx, maxx, miny, maxy, z, draw_callback=None,
-                              progress_counter=None, num_of_triangles=None):
+    def generate_toolpath_slice(self, cutter, model, minx, maxx, miny, maxy, z, draw_callback=None,
+                                progress_counter=None, num_of_triangles=None):
         shifted_lines = self.get_potential_contour_lines(cutter, model, minx, maxx, miny, maxy, z,
                                                          progress_counter=progress_counter)
         if num_of_triangles is None:
diff --git a/pycam/PathGenerators/DropCutter.py b/pycam/PathGenerators/DropCutter.py
index 43ff8da..2c4954b 100644
--- a/pycam/PathGenerators/DropCutter.py
+++ b/pycam/PathGenerators/DropCutter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010-2011 Lars Kruse <devel@sumpfralle.de>
 Copyright 2008-2009 Lode Leroy
@@ -40,10 +39,10 @@ def _process_one_grid_line(extra_args):
     return get_max_height_dynamic(model, cutter, positions, minz, maxz)
 
 
-class DropCutter(object):
+class DropCutter:
 
-    def GenerateToolPath(self, cutter, models, motion_grid, minz=None, maxz=None,
-                         draw_callback=None):
+    def generate_toolpath(self, cutter, models, motion_grid, minz=None, maxz=None,
+                          draw_callback=None):
         path = []
         quit_requested = False
         model = pycam.Geometry.Model.get_combined_model(models)
diff --git a/pycam/PathGenerators/EngraveCutter.py b/pycam/PathGenerators/EngraveCutter.py
index bc56f79..df85c3f 100644
--- a/pycam/PathGenerators/EngraveCutter.py
+++ b/pycam/PathGenerators/EngraveCutter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 Copyright 2008-2009 Lode Leroy
@@ -24,10 +23,10 @@ import pycam.Utils.log
 log = pycam.Utils.log.get_logger()
 
 
-class EngraveCutter(object):
+class EngraveCutter:
 
-    def GenerateToolPath(self, cutter, models, motion_grid, minz=None, maxz=None,
-                         draw_callback=None):
+    def generate_toolpath(self, cutter, models, motion_grid, minz=None, maxz=None,
+                          draw_callback=None):
         quit_requested = False
 
         model = pycam.Geometry.Model.get_combined_model(models)
@@ -51,7 +50,7 @@ class EngraveCutter(object):
                 quit_requested = True
                 break
             # no callback: otherwise the status text gets lost
-            push_moves.extend(push_generator.GenerateToolPath(cutter, [model], [push_layer]))
+            push_moves.extend(push_generator.generate_toolpath(cutter, [model], [push_layer]))
             if draw_callback and draw_callback():
                 # cancel requested
                 quit_requested = True
@@ -66,6 +65,6 @@ class EngraveCutter(object):
         if draw_callback:
             draw_callback(
                 text="Engrave: processing layer %d/%d" % (current_layer + 1, num_of_layers))
-        drop_moves = drop_generator.GenerateToolPath(cutter, [model], drop_layers, minz=minz,
-                                                     maxz=maxz, draw_callback=draw_callback)
+        drop_moves = drop_generator.generate_toolpath(cutter, [model], drop_layers, minz=minz,
+                                                      maxz=maxz, draw_callback=draw_callback)
         return push_moves + drop_moves
diff --git a/pycam/PathGenerators/PushCutter.py b/pycam/PathGenerators/PushCutter.py
index 785497f..14eac34 100644
--- a/pycam/PathGenerators/PushCutter.py
+++ b/pycam/PathGenerators/PushCutter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 Copyright 2008-2009 Lode Leroy
@@ -38,14 +37,14 @@ def _process_one_line(extra_args):
     return points
 
 
-class PushCutter(object):
+class PushCutter:
 
     def __init__(self, waterlines=False):
         log.debug("Starting PushCutter")
         self.waterlines = waterlines
 
-    def GenerateToolPath(self, cutter, models, motion_grid, minz=None, maxz=None,
-                         draw_callback=None):
+    def generate_toolpath(self, cutter, models, motion_grid, minz=None, maxz=None,
+                          draw_callback=None):
         # Transfer the grid (a generator) into a list of lists and count the items.
         grid = []
         num_of_grid_positions = 0
@@ -75,8 +74,8 @@ class PushCutter(object):
 
             if self.waterlines:
                 self.pa.new_direction(0)
-            result = self.GenerateToolPathSlice(cutter, models, layer_grid, draw_callback,
-                                                progress_counter)
+            result = self.generate_toolpath_slice(cutter, models, layer_grid, draw_callback,
+                                                  progress_counter)
             if self.waterlines:
                 self.pa.end_direction()
                 self.pa.finish()
@@ -100,7 +99,7 @@ class PushCutter(object):
                     other_models = models[1:]
                     for p1, p2 in pairs:
                         free_points = get_free_paths_triangles(other_models, cutter, p1, p2)
-                        for index in range(len(free_points) / 2):
+                        for index in range(len(free_points) // 2):
                             result.append(MoveStraight(free_points[2 * index]))
                             result.append(MoveStraight(free_points[2 * index + 1]))
                             result.append(MoveSafety())
@@ -113,8 +112,8 @@ class PushCutter(object):
         else:
             return path
 
-    def GenerateToolPathSlice(self, cutter, models, layer_grid, draw_callback=None,
-                              progress_counter=None):
+    def generate_toolpath_slice(self, cutter, models, layer_grid, draw_callback=None,
+                                progress_counter=None):
         path = []
         # the ContourCutter pathprocessor does not work with combined models
         if self.waterlines:
@@ -132,7 +131,7 @@ class PushCutter(object):
                     for point in points:
                         self.pa.append(point)
                 else:
-                    for index in range(len(points) / 2):
+                    for index in range(len(points) // 2):
                         path.append(MoveStraight(points[2 * index]))
                         path.append(MoveStraight(points[2 * index + 1]))
                         path.append(MoveSafety())
diff --git a/pycam/PathGenerators/__init__.py b/pycam/PathGenerators/__init__.py
index abeb690..2a36f80 100644
--- a/pycam/PathGenerators/__init__.py
+++ b/pycam/PathGenerators/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 Copyright 2008 Lode Leroy
@@ -19,11 +18,14 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+import time
+
 from pycam.Geometry import epsilon, INFINITE
 from pycam.Geometry.PointUtils import pdist, pnorm, pnormalized, psub
+from pycam.Utils.events import get_event_handler
 
 
-class Hit(object):
+class Hit:
     def __init__(self, cl, cp, t, d, direction):
         self.cl = cl
         self.cp = cp
@@ -209,3 +211,38 @@ def get_max_height_dynamic(model, cutter, positions, minz, maxz):
         else:
             index += 1
     return points
+
+
+class UpdateToolView:
+    """ visualize the position of the tool and the partial toolpath during toolpath generation """
+
+    def __init__(self, callback, max_fps=1):
+        self.callback = callback
+        self.core = get_event_handler()
+        self.last_update_time = time.time()
+        self.max_fps = max_fps
+        self.last_tool_position = None
+        self.current_tool_position = None
+
+    def update(self, text=None, percent=None, tool_position=None, toolpath=None):
+        if toolpath is not None:
+            self.core.set("toolpath_in_progress", toolpath)
+        # always store the most recently reported tool_position for the next visualization
+        if tool_position is not None:
+            self.current_tool_position = tool_position
+        redraw_wanted = False
+        current_time = time.time()
+        if (current_time - self.last_update_time) > 1.0 / self.max_fps:
+            if self.current_tool_position != self.last_tool_position:
+                tool = self.core.get("current_tool")
+                if tool:
+                    tool.moveto(self.current_tool_position)
+                self.last_tool_position = self.current_tool_position
+                redraw_wanted = True
+            if self.core.get("show_toolpath_progress"):
+                redraw_wanted = True
+            self.last_update_time = current_time
+            if redraw_wanted:
+                self.core.emit_event("visual-item-updated")
+        # break the loop if someone clicked the "cancel" button
+        return self.callback(text=text, percent=percent)
diff --git a/pycam/PathProcessors/ContourCutter.py b/pycam/PathProcessors/ContourCutter.py
index 2aa6093..68c09dd 100644
--- a/pycam/PathProcessors/ContourCutter.py
+++ b/pycam/PathProcessors/ContourCutter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008-2010 Lode Leroy
 
@@ -26,7 +25,7 @@ from pycam.Toolpath import simplify_toolpath
 
 class ContourCutter(pycam.PathProcessors.BasePathProcessor):
     def __init__(self):
-        super(ContourCutter, self).__init__()
+        super().__init__()
         self.curr_path = None
         self.scanline = None
         self.polygon_extractor = None
diff --git a/pycam/PathProcessors/PolygonCutter.py b/pycam/PathProcessors/PolygonCutter.py
index 064cfc1..808b50a 100644
--- a/pycam/PathProcessors/PolygonCutter.py
+++ b/pycam/PathProcessors/PolygonCutter.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 Copyright 2008 Lode Leroy
@@ -27,7 +26,7 @@ from pycam.Toolpath import simplify_toolpath
 
 class PolygonCutter(pycam.PathProcessors.BasePathProcessor):
     def __init__(self, reverse=False):
-        super(PolygonCutter, self).__init__()
+        super().__init__()
         self.curr_path = None
         self.scanline = None
         self.polygon_extractor = PolygonExtractor(PolygonExtractor.MONOTONE)
@@ -58,7 +57,7 @@ class PolygonCutter(pycam.PathProcessors.BasePathProcessor):
             source_paths.extend(self.polygon_extractor.ver_path_list)
         for path in source_paths:
             points = path.points
-            for i in range(0, (len(points)+1)/2):
+            for i in range((len(points) + 1) // 2):
                 new_path = Path()
                 if i % 2 == 0:
                     new_path.append(points[i])
diff --git a/pycam/PathProcessors/__init__.py b/pycam/PathProcessors/__init__.py
index 58aa0ee..bcbdf8e 100644
--- a/pycam/PathProcessors/__init__.py
+++ b/pycam/PathProcessors/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008 Lode Leroy
 
@@ -19,7 +18,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
 
-class BasePathProcessor(object):
+class BasePathProcessor:
 
     def __init__(self):
         self.paths = []
diff --git a/pycam/Plugins/Bounds.py b/pycam/Plugins/Bounds.py
index 7d3197d..bf87a36 100644
--- a/pycam/Plugins/Bounds.py
+++ b/pycam/Plugins/Bounds.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,15 +17,15 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
-from pycam.Geometry import Box3D, Point3D
+from pycam.Flow.history import merge_history_and_block_events
 import pycam.Plugins
 # TODO: move Toolpath.Bounds here?
 import pycam.Toolpath
-from pycam.Utils import get_non_conflicting_name
+from pycam.workspace.data_models import (Boundary, BoundsSpecification, LimitSingle,
+                                         ToolBoundaryMode)
 
 
 _RELATIVE_UNIT = ("%", "mm")
-_BOUNDARY_MODES = ("inside", "along", "around")
 
 
 class Bounds(pycam.Plugins.ListPluginBase):
@@ -34,6 +33,7 @@ class Bounds(pycam.Plugins.ListPluginBase):
     UI_FILE = "bounds.ui"
     DEPENDS = ["Models"]
     CATEGORIES = ["Bounds"]
+    COLLECTION_ITEM_TYPE = Boundary
 
     # mapping of boundary types and GUI control elements
     CONTROL_BUTTONS = ("TypeRelativeMargin", "TypeCustom",
@@ -41,8 +41,6 @@ class Bounds(pycam.Plugins.ListPluginBase):
                        "BoundaryLowY", "BoundaryLowZ", "BoundaryHighX",
                        "BoundaryHighY", "BoundaryHighZ")
     CONTROL_SIGNALS = ("toggled", "value-changed", "changed")
-    CONTROL_GET = ("get_active", "get_value")
-    CONTROL_SET = ("set_active", "set_value")
 
     def setup(self):
         self._event_handlers = []
@@ -67,7 +65,7 @@ class Bounds(pycam.Plugins.ListPluginBase):
                                        self._bounds_new))
             # model selector
             self.models_control = pycam.Gui.ControlsGTK.InputTable(
-                [], change_handler=lambda *args: self.core.emit_event("bounds-changed"))
+                [], change_handler=lambda *args: self.core.emit_event("bounds-control-changed"))
             self.gui.get_object("ModelsViewPort").add(self.models_control.get_widget())
             # quickly adjust the bounds via buttons
             for obj_name in ("MarginIncreaseX", "MarginIncreaseY", "MarginIncreaseZ",
@@ -87,20 +85,20 @@ class Bounds(pycam.Plugins.ListPluginBase):
                 for value in ("Low", "High"):
                     obj_name = "Boundary%s%s" % (value, axis)
                     self._gtk_handlers.append((self.gui.get_object(obj_name), "value-changed",
-                                               "bounds-changed"))
+                                               "bounds-control-changed"))
             # register all controls
             for obj_name in self.CONTROL_BUTTONS:
                 obj = self.gui.get_object(obj_name)
                 if obj_name == "TypeRelativeMargin":
-                    self._gtk_handlers.append((obj, "toggled", self._switch_relative_custom))
+                    self._gtk_handlers.append((obj, "toggled", "bounds-control-changed"))
                 elif obj_name == "RelativeUnit":
-                    self._gtk_handlers.append((obj, "changed", self._switch_percent_absolute))
+                    self._gtk_handlers.append((obj, "changed", "bounds-control-changed"))
                 else:
                     for signal in self.CONTROL_SIGNALS:
                         try:
                             handler = obj.connect(signal, lambda *args: None)
                             obj.disconnect(handler)
-                            self._gtk_handlers.append((obj, signal, "bounds-changed"))
+                            self._gtk_handlers.append((obj, signal, "bounds-control-changed"))
                             break
                         except TypeError:
                             continue
@@ -108,17 +106,26 @@ class Bounds(pycam.Plugins.ListPluginBase):
                         self.log.info("Failed to connect to widget '%s'", str(obj_name))
                         continue
             self._gtk_handlers.append((self.gui.get_object("NameCell"), "edited",
-                                       self._edit_bounds_name))
+                                       self.edit_item_name))
+            # define cell renderers
+            self.gui.get_object("SizeColumn").set_cell_data_func(self.gui.get_object("SizeCell"),
+                                                                 self._render_bounds_size)
+            self.gui.get_object("NameColumn").set_cell_data_func(self.gui.get_object("NameCell"),
+                                                                 self.render_item_name)
             self._event_handlers.extend((
-                ("bounds-selection-changed", self._update_controls),
-                ("bounds-changed", self._store_bounds_settings),
-                ("bounds-changed", self._trigger_table_update),
-                ("model-list-changed", self._update_model_list)))
+                ("model-list-changed", self._update_model_list),
+                ("model-changed", self._update_model_list),
+                ("bounds-selection-changed", self._update_bounds_widgets),
+                ("bounds-changed", self._update_bounds_widgets),
+                ("bounds-list-changed", self._select_first_if_non_empty),
+                ("bounds-control-changed", self._transfer_controls_to_bounds)))
             self.register_gtk_handlers(self._gtk_handlers)
-            self._trigger_table_update()
             self._update_model_list()
-            self._update_controls()
-        self._event_handlers.append(("bounds-changed", "visual-item-updated"))
+            self._update_bounds_widgets()
+        # the models and the bounds itself may change the effective size of the boundary
+        for incoming_event in ("bounds-list-changed", "bounds-changed",
+                               "model-list-changed", "model-changed"):
+            self._event_handlers.append((incoming_event, self.force_gtk_modelview_refresh))
         self.register_event_handlers(self._event_handlers)
         self.register_state_item("bounds-list", self)
         self.core.register_namespace("bounds", pycam.Plugins.get_filter(self))
@@ -132,23 +139,15 @@ class Bounds(pycam.Plugins.ListPluginBase):
             self.unregister_gtk_handlers(self._gtk_handlers)
         self.unregister_event_handlers(self._event_handlers)
         self.core.set("bounds", None)
-        while len(self) > 0:
-            self.pop()
+        self.clear()
 
     def get_selected_models(self, index=False):
         return self.models_control.get_value()
 
     def select_models(self, models):
-        self.models_control.set_value(models)
+        self.models_control.set_value([model.get_id() for model in models])
 
-    def _get_current_bounds_box(self):
-        bounds = self.get_selected()
-        models = [m.model for m in bounds["parameters"]["Models"]]
-        if not models:
-            models = [m.model for m in self.core.get("models").get_visible()]
-        return pycam.Geometry.Model.get_combined_bounds(models)
-
-    def _render_bounds_size(self, column, cell, model, m_iter):
+    def _render_bounds_size(self, column, cell, model, m_iter, data):
         bounds = self.get_by_path(model.get_path(m_iter))
         if not bounds:
             return
@@ -159,212 +158,94 @@ class Bounds(pycam.Plugins.ListPluginBase):
             text = "%g x %g x %g" % tuple([box.upper[i] - box.lower[i] for i in range(3)])
         cell.set_property("text", text)
 
-    def _render_bounds_name(self, column, cell, model, m_iter):
-        bounds = self.get_by_path(model.get_path(m_iter))
-        cell.set_property("text", bounds["name"])
+    def _select_first_if_non_empty(self):
+        """ automatically select a bounds item if none is selected and the list is not empty
 
-    def _trigger_table_update(self):
-        self.gui.get_object("SizeColumn").set_cell_data_func(self.gui.get_object("SizeCell"),
-                                                             self._render_bounds_size)
-        self.gui.get_object("NameColumn").set_cell_data_func(self.gui.get_object("NameCell"),
-                                                             self._render_bounds_name)
+        Without this automatic selection the bounding box would not be visible directly after
+        startup.
+        """
+        if not self.get_selected() and (len(self.get_all()) > 0):
+            self.select(self.get_all()[0])
 
     def _update_model_list(self):
-        models = self.core.get("models")
         choices = []
-        for model in models:
-            choices.append((model["name"], model))
+        for model in self.core.get("models").get_all():
+            choices.append((model.get_application_value("name", model.get_id()), model))
         self.models_control.update_choices(choices)
-        self._update_controls()
 
-    def _store_bounds_settings(self, widget=None):
-        data = self.get_selected()
-        control_box = self.gui.get_object("BoundsSettingsControlsBox")
-        if data is not None:
-            for obj_name in self.CONTROL_BUTTONS:
-                obj = self.gui.get_object(obj_name)
-                for get_func in self.CONTROL_GET:
-                    if hasattr(obj, get_func):
-                        value = getattr(obj, get_func)()
-                        data["parameters"][obj_name] = value
-                        break
-                else:
-                    self.log.info("Failed to update value of control %s", obj_name)
-            data["parameters"]["Models"] = self.get_selected_models()
-            control_box.show()
-        self._update_controls()
-
-    def _switch_relative_custom(self, widget=None):
+    def _transfer_controls_to_bounds(self):
         bounds = self.get_selected()
-        if not bounds:
-            return
-        if self.gui.get_object("TypeRelativeMargin").get_active():
-            # no models are currently selected
-            func_low = lambda value, axis: 0
-            func_high = func_low
-        else:
-            # relative margins -> absolute coordinates
-            # calculate the model bounds
-            box = self._get_current_bounds_box()
-            if box is None:
-                # zero-sized models -> no action
-                return
-            dim = box.get_diagonal()
-            if self._is_percent():
-                func_low = lambda value, axis: box.lower[axis] - (value / 100.0 * dim[axis])
-                func_high = lambda value, axis: box.upper[axis] + (value / 100.0 * dim[axis])
+        if bounds:
+            bounds.set_value("reference_models",
+                             [model.get_id() for model in self.get_selected_models()])
+            is_percent = (self.gui.get_object("RelativeUnit").get_active() == 0)
+            # absolute bounds or margins around models
+            if self.gui.get_object("TypeRelativeMargin").get_active():
+                specification = BoundsSpecification.MARGINS
             else:
-                func_low = lambda value, axis: box.lower[axis] - value
-                func_high = lambda value, axis: box.upper[axis] + value
-            # absolute mode -> no models may be selected
-            self.select_models([])
-        for axis in "XYZ":
-            for func, name in ((func_low, "BoundaryLow"), (func_high, "BoundaryHigh")):
-                try:
-                    result = func(bounds["parameters"][name + axis], "XYZ".index(axis))
-                except ZeroDivisionError:
-                    # this happens for flat models
-                    result = 0
-                self.gui.get_object(name + axis).set_value(result)
-        self._update_controls()
-
-    def _switch_percent_absolute(self, widget=None):
-        """ re-calculate the values of the controls for the lower and upper
-        margin of each axis. This is only necessary, if there are referenced
-        models.
-        Switching between percent and absolute values changes only numbers,
-        but not the extend of margins.
-        """
-        bounds = self.get_selected()
-        if not bounds:
-            return
-        # calculate the model bounds
-        box = self._get_current_bounds_box()
-        if box is None:
-            # zero-sized models -> no action
-            return
-        dim = box.get_diagonal()
-        if self._is_percent():
-            # switched from absolute to percent
-            func = lambda value, axis_index: value / dim[axis_index] * 100.0
-        else:
-            func = lambda value, axis_index: (value / 100.0) * dim[axis_index]
-        for axis in "XYZ":
-            axis_index = "XYZ".index(axis)
-            for name in ("BoundaryLow", "BoundaryHigh"):
-                try:
-                    result = func(bounds["parameters"][name + axis], axis_index)
-                except ZeroDivisionError:
-                    # this happens for flat models
-                    result = 0
-                self.gui.get_object(name + axis).set_value(result)
-        # Make sure that the new state of %/mm is always stored - even if no
-        # control value has really changed (e.g. if all margins were zero).
-        self._store_bounds_settings()
-        self._update_controls()
-
-    def _adjust_bounds(self, widget, axis, change):
-        bounds = self.get_selected()
-        if not bounds:
-            return
-        axis_index = "XYZ".index(axis)
-        key_low = "BoundaryLow%s" % axis
-        key_high = "BoundaryHigh%s" % axis
-        change_factor = {"0": 0, "+": 1, "-": -1}[change]
-        if change == "0":
-            bounds["parameters"][key_low] = 0
-            bounds["parameters"][key_high] = 0
-        elif self._is_percent():
-            # % margin
-            percent_change_per_side = 10
-            # reduce the change value, if the boundary would turn negative afterwards
-            dim_percent = 100 + bounds["parameters"][key_low] + bounds["parameters"][key_high]
-            if (change_factor < 0) and (dim_percent < 2 * percent_change_per_side):
-                percent_change_per_side = dim_percent / 2
-            bounds["parameters"][key_low] += change_factor * percent_change_per_side
-            bounds["parameters"][key_high] += change_factor * percent_change_per_side
+                specification = BoundsSpecification.ABSOLUTE
+                # disallow percent values
+                is_percent = False
+            bounds.set_value("specification", specification.value)
+            # overwrite all limit values and set or remove their "relative" flags
+            for name, obj_keys in (("lower", ("BoundaryLowX", "BoundaryLowY", "BoundaryLowZ")),
+                                   ("upper", ("BoundaryHighX", "BoundaryHighY", "BoundaryHighZ"))):
+                limits = [LimitSingle(self.gui.get_object(name).get_value(), is_percent).export
+                          for name in obj_keys]
+                bounds.set_value(name, limits)
+            tool_limit_mode = {
+                0: ToolBoundaryMode.INSIDE,
+                1: ToolBoundaryMode.ALONG,
+                2: ToolBoundaryMode.AROUND}[self.gui.get_object("ToolLimit").get_active()]
+            bounds.set_value("tool_boundary", tool_limit_mode.value)
+
+    def _copy_from_bounds_to_controls(self, bounds):
+        self.select_models(bounds.get_value("reference_models"))
+        is_percent = False
+        lower = bounds.get_value("lower")
+        upper = bounds.get_value("upper")
+        for name, limit in (("BoundaryLowX", lower.x),
+                            ("BoundaryLowY", lower.y),
+                            ("BoundaryLowZ", lower.z),
+                            ("BoundaryHighX", upper.x),
+                            ("BoundaryHighY", upper.y),
+                            ("BoundaryHighZ", upper.z)):
+            # beware: the result is not perfect, if "is_relative" is not consistent for all axes
+            if limit.is_relative:
+                is_percent = True
+            factor = 100 if is_percent else 1
+            self.gui.get_object(name).set_value(limit.value * factor)
+        self.gui.get_object("RelativeUnit").set_active(0 if is_percent else 1)
+        is_absolute = (bounds.get_value("specification") == BoundsSpecification.ABSOLUTE)
+        if is_absolute:
+            self.gui.get_object("TypeCustom").set_active(True)
         else:
-            # absolute margin
-            model_box = self._get_current_bounds_box()
-            if model_box is None:
-                return
-            change_value = model_box.get_dimensions()[axis_index] * 0.1
-            dim = (model_box.get_dimensions()[axis_index]
-                   + bounds["parameters"][key_low] + bounds["parameters"][key_high])
-            if (change_factor < 0) and (dim < 2 * change_value):
-                change_value = dim / 2
-            bounds["parameters"][key_low] += change_value * change_factor
-            bounds["parameters"][key_high] += change_value * change_factor
-        self._update_controls()
-
-    def _is_percent(self):
-        return _RELATIVE_UNIT[self.gui.get_object("RelativeUnit").get_active()] == "%"
+            self.gui.get_object("TypeRelativeMargin").set_active(True)
+        tool_border_index = {ToolBoundaryMode.INSIDE: 0,
+                             ToolBoundaryMode.ALONG: 1,
+                             ToolBoundaryMode.AROUND: 2}[bounds.get_value("tool_boundary")]
+        self.gui.get_object("ToolLimit").set_active(tool_border_index)
 
     def _validate_bounds(self):
         """ check if any dimensions is below zero and fix these problems """
         bounds = self.get_selected()
-        if not bounds:
-            return
-        margins = bounds["parameters"]
-        for axis_index, axis in enumerate("XYZ"):
-            key_low = "BoundaryLow%s" % axis
-            key_high = "BoundaryHigh%s" % axis
-            if self._is_percent():
-                # % margin
-                dim_percent = margins[key_low] + margins[key_high]
-                if dim_percent < -100:
-                    # this dimension went below zero -> reduce the relative margins
-                    margins[key_low] /= dim_percent / -100
-                    margins[key_high] = 100 - margins[key_low]
-            else:
-                # absolute margin
-                model_box = self._get_current_bounds_box()
-                if model_box is None:
-                    return
-                dim = margins[key_low] + margins[key_high]
-                if dim < -model_box.get_dimensions()[axis_index]:
-                    if model_box.get_dimensions()[axis_index] > 0:
-                        margins[key_low] /= dim / -model_box.get_dimensions()[axis_index]
-                    else:
-                        margins[key_low] += -dim / 2
-                    margins[key_high] = -model_box.get_dimensions()[axis_index] - margins[key_low]
+        if bounds:
+            bounds.coerce_limits()
 
-    def _update_controls(self, widget=None):
+    def _update_bounds_widgets(self, widget=None):
         bounds = self.get_selected()
+        self.log.debug("Update Bounds controls: %s", bounds)
         control_box = self.gui.get_object("BoundsSettingsControlsBox")
         if not bounds:
             control_box.hide()
         else:
             self._validate_bounds()
-            self.unregister_gtk_handlers(self._gtk_handlers)
-            for obj_name, value in bounds["parameters"].iteritems():
-                if obj_name == "Models":
-                    self.select_models(value)
-                    continue
-                obj = self.gui.get_object(obj_name)
-                for set_func in self.CONTROL_SET:
-                    if hasattr(obj, set_func):
-                        if (value is False) and hasattr(obj, "get_group"):
-                            # no "False" for radio buttons
-                            pass
-                        else:
-                            getattr(obj, set_func)(value)
-                        break
-                else:
-                    self.log.info("Failed to set value of control: %s", obj_name)
-            self.register_gtk_handlers(self._gtk_handlers)
-            control_box.show()
-            # enable/disable margin controls for percent-style changes and zero-dimensions
-            box = self._get_current_bounds_box()
-            if box:
-                dim = box.get_diagonal()
-            for axis in "XYZ":
-                axis_index = "XYZ".index(axis)
-                for name in ("BoundaryLow", "BoundaryHigh"):
-                    # disallow editing the controls if percent fails to work with zero dimension
-                    percent_for_zero_dim = (self._is_percent()
-                                            and (box is None or (dim[axis_index] == 0)))
-                    self.gui.get_object(name + axis).set_sensitive(not percent_for_zero_dim)
+            with self.core.blocked_events({"bounds-control-changed"}):
+                self._copy_from_bounds_to_controls(bounds)
+                self._update_bounds_widgets_visibility()
+                control_box.show()
+
+    def _update_bounds_widgets_visibility(self):
         # show the proper descriptive label for the current margin type
         relative_label = self.gui.get_object("MarginTypeRelativeLabel")
         custom_label = self.gui.get_object("MarginTypeCustomLabel")
@@ -389,85 +270,33 @@ class Bounds(pycam.Plugins.ListPluginBase):
             controls_x.hide()
             controls_y.hide()
             controls_z.hide()
-        self.core.emit_event("bounds-changed")
-
-    def _bounds_new(self, *args):
-        name = get_non_conflicting_name("Bounds #%d", [bounds["name"] for bounds in self])
-        new_bounds = BoundsEntity(self.core, name)
-        self.append(new_bounds)
-        self.select(new_bounds)
 
-    def _edit_bounds_name(self, cell, path, new_text):
-        bounds = self.get_by_path(path)
-        if bounds and (new_text != bounds["name"]) and new_text:
-            bounds["name"] = new_text
-            self.core.emit_event("bounds-list-changed")
-
-
-class BoundsEntity(pycam.Plugins.ObjectWithAttributes):
-
-    def __init__(self, core, name, *args, **kwargs):
-        super(BoundsEntity, self).__init__("bounds", *args, **kwargs)
-        self["name"] = name
-        self["parameters"] = {}
-        self.core = core
-        self["parameters"].update({
-            "BoundaryLowX": 0,
-            "BoundaryLowY": 0,
-            "BoundaryLowZ": 0,
-            "BoundaryHighX": 0,
-            "BoundaryHighY": 0,
-            "BoundaryHighZ": 0,
-            "TypeRelativeMargin": True,
-            "TypeCustom": False,
-            "RelativeUnit": _RELATIVE_UNIT.index("%"),
-            "ToolLimit": _BOUNDARY_MODES.index("along"),
-            "Models": [],
-        })
-
-    def get_absolute_limits(self, tool_radius=None, models=None):
-        get_low_value = lambda axis: self["parameters"]["BoundaryLow%s" % "XYZ"[axis]]
-        get_high_value = lambda axis: self["parameters"]["BoundaryHigh%s" % "XYZ"[axis]]
-        if self["parameters"]["TypeRelativeMargin"]:
-            # choose the appropriate set of models
-            if self["parameters"]["Models"]:
-                # configured models always take precedence
-                models = self["parameters"]["Models"]
-            elif models:
-                # use the supplied models (e.g. for toolpath calculation)
-                pass
-            else:
-                # use all visible models -> for live visualization
-                models = self.core.get("models").get_visible()
-            model_box = pycam.Geometry.Model.get_combined_bounds([model.model for model in models])
-            if model_box is None:
-                # zero-sized models -> no action
-                return None
-            is_percent = _RELATIVE_UNIT[self["parameters"]["RelativeUnit"]] == "%"
-            low, high = [], []
-            if is_percent:
-                for axis in range(3):
-                    dim = model_box.upper[axis] - model_box.lower[axis]
-                    low.append(model_box.lower[axis] - (get_low_value(axis) / 100.0 * dim))
-                    high.append(model_box.upper[axis] + (get_high_value(axis) / 100.0 * dim))
-            else:
-                for axis in range(3):
-                    low.append(model_box.lower[axis] - get_low_value(axis))
-                    high.append(model_box.upper[axis] + get_high_value(axis))
-        else:
-            low, high = [], []
-            for axis in range(3):
-                low.append(get_low_value(axis))
-                high.append(get_high_value(axis))
-        tool_limit = _BOUNDARY_MODES[self["parameters"]["ToolLimit"]]
-        # apply inside/along/outside if a tool is given
-        if tool_radius and (tool_limit != "along"):
-            if tool_limit == "inside":
-                offset = -tool_radius
+    def _adjust_bounds(self, widget, axis, change_target):
+        bounds = self.get_selected()
+        if not bounds:
+            return
+        axis_index = "XYZ".index(axis)
+        change_factor = {"0": 0, "+": 1, "-": -1}[change_target]
+        is_margin = self.gui.get_object("TypeRelativeMargin").get_active()
+        is_percent = (self.gui.get_object("RelativeUnit").get_active() == 0)
+        change_value = change_factor * (0.1 if is_percent else 1)
+        change_vector = {"lower": [0, 0, 0], "upper": [0, 0, 0]}
+        change_vector["lower"][axis_index] = change_value if is_margin else -change_value
+        change_vector["upper"][axis_index] = change_value
+        for key in ("lower", "upper"):
+            if change_target == "0":
+                limits = [LimitSingle(0 if (index == axis_index) else orig.value,
+                                      orig.is_relative).export
+                          for index, orig in enumerate(bounds.get_value(key))]
             else:
-                offset = tool_radius
-            # apply offset only for x and y
-            for index in range(2):
-                low[index] -= offset
-                high[index] += offset
-        return Box3D(Point3D(*low), Point3D(*high))
+                limits = [LimitSingle(orig.value + change, orig.is_relative).export
+                          for orig, change in zip(bounds.get_value(key), change_vector[key])]
+            bounds.set_value(key, limits)
+
+    def _bounds_new(self, widget=None):
+        with merge_history_and_block_events(self.core):
+            params = {"specification": "margins", "lower": [0, 0, 0], "upper": [0, 0, 0],
+                      "reference_models": []}
+            new_bounds = Boundary(None, data=params)
+            new_bounds.set_application_value("name", self.get_non_conflicting_name("Bounds #%d"))
+        self.select(new_bounds)
diff --git a/pycam/Plugins/Clipboard.py b/pycam/Plugins/Clipboard.py
index b356f61..9d17c5b 100644
--- a/pycam/Plugins/Clipboard.py
+++ b/pycam/Plugins/Clipboard.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,12 +17,7 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
-try:
-    # Python2 (load first - due to incompatible interface)
-    from StringIO import StringIO
-except ImportError:
-    # Python3
-    from io import StringIO
+from io import StringIO
 
 import pycam.Plugins
 from pycam.Utils.locations import get_all_program_locations
@@ -48,7 +42,7 @@ class Clipboard(pycam.Plugins.PluginBase):
             return False
         if self.gui:
             self._gtk_handlers = []
-            self.clipboard = self._gtk.clipboard_get()
+            self.clipboard = self._gtk.Clipboard.get(self._gdk.SELECTION_PRIMARY)
             self.core.set("clipboard-set", self._copy_text_to_clipboard)
             self._gtk_handlers.append((self.clipboard, "owner-change",
                                        self._update_clipboard_widget))
@@ -84,7 +78,7 @@ class Clipboard(pycam.Plugins.PluginBase):
         models = self.core.get("models").get_selected()
         exportable = []
         for model in models:
-            if model.model.is_export_supported():
+            if model.get_model().is_export_supported():
                 exportable.append(model)
         return exportable
 
@@ -111,9 +105,9 @@ class Clipboard(pycam.Plugins.PluginBase):
 
             if "svg" in "".join(targets).lower():
                 # Inkscape for Windows strictly requires the BITMAP type
-                clip_type = self._gtk.gdk.SELECTION_TYPE_BITMAP
+                clip_type = self._gdk.SELECTION_TYPE_BITMAP
             else:
-                clip_type = self._gtk.gdk.SELECTION_TYPE_STRING
+                clip_type = self._gdk.SELECTION_TYPE_STRING
             self.clipboard.set_with_data(clip_targets, get_func, lambda *args: None,
                                          (text, clip_type))
             self.clipboard.store()
@@ -129,11 +123,12 @@ class Clipboard(pycam.Plugins.PluginBase):
             return isinstance(m1, pycam.Geometry.Model.ContourModel) == \
                     isinstance(m2, pycam.Geometry.Model.ContourModel)
 
-        merged_model = models.pop(0).model
+        merged_model = models.pop(0).get_model()
         for model in models:
             # merge only 3D _or_ 2D models (don't mix them)
-            if same_type(merged_model, model.model):
-                merged_model += model.model
+            other_model = model.get_model()
+            if same_type(merged_model, other_model):
+                merged_model += other_model
         # TODO: add "comment=get_meta_data()" here
         merged_model.export(unit=self.core.get("unit")).write(text_buffer)
         text_buffer.seek(0)
@@ -151,7 +146,8 @@ class Clipboard(pycam.Plugins.PluginBase):
                                   (CLIPBOARD_TARGETS["ps"], "foo.ps"),
                                   (CLIPBOARD_TARGETS["dxf"], "foo.dxf")):
             for target in targets:
-                data = self.clipboard.wait_for_contents(target)
+                atom = self._gdk.Atom.intern(target, False)
+                data = self.clipboard.wait_for_contents(atom)
                 if data is not None:
                     detected_filetype = pycam.Importers.detect_file_type(filename)
                     if detected_filetype:
diff --git a/pycam/Plugins/EMCToolExport.py b/pycam/Plugins/EMCToolExport.py
index 3a42332..c467518 100644
--- a/pycam/Plugins/EMCToolExport.py
+++ b/pycam/Plugins/EMCToolExport.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -21,6 +20,8 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 import pycam.Plugins
 import pycam.Exporters.LinuxCNCToolExporter
+import pycam.workspace.data_models
+
 
 FILTER_LINUXCNC_TOOL = (("LinuxCNC tool files", "*.tbl"),)
 
@@ -54,7 +55,7 @@ class LinuxCNCToolExport(pycam.Plugins.PluginBase):
             self.unregister_event_handlers(self._event_handlers)
 
     def _update_emc_tool_button(self, widget=None):
-        exportable = len(self.core.get("tools")) > 0
+        exportable = len(pycam.workspace.data_models.Tool.get_collection()) > 0
         self.export_action.set_sensitive(exportable)
 
     def export_emc_tools(self, widget=None, filename=None):
diff --git a/pycam/Plugins/ExportSettings.py b/pycam/Plugins/ExportSettings.py
new file mode 100644
index 0000000..2318e2d
--- /dev/null
+++ b/pycam/Plugins/ExportSettings.py
@@ -0,0 +1,184 @@
+"""
+Copyright 2017 Lars Kruse <devel@sumpfralle.de>
+
+This file is part of PyCAM.
+
+PyCAM is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
+"""
+
+
+from pycam.Flow.history import merge_history_and_block_events
+import pycam.Plugins
+import pycam.workspace.data_models
+from pycam.workspace.data_models import ToolpathFilter
+
+
+class ExportSettings(pycam.Plugins.ListPluginBase):
+
+    UI_FILE = "export_settings.ui"
+    DEPENDS = ["Toolpaths", "ParameterGroupManager"]
+    CATEGORIES = ["Toolpath", "Export"]
+    COLLECTION_ITEM_TYPE = pycam.workspace.data_models.ExportSettings
+
+    def setup(self):
+        if self.gui:
+            list_box = self.gui.get_object("ExportSettingsBox")
+            list_box.unparent()
+            self.core.register_ui("main", "Export Settings", list_box, weight=50)
+            self._gtk_handlers = []
+            modelview = self.gui.get_object("ExportSettingTable")
+            self.set_gtk_modelview(modelview)
+            self.register_model_update(
+                lambda: self.core.emit_event("export-settings-list-changed"))
+            for action, obj_name in ((self.ACTION_UP, "ExportSettingMoveUp"),
+                                     (self.ACTION_DOWN, "ExportSettingMoveDown"),
+                                     (self.ACTION_DELETE, "ExportSettingDelete"),
+                                     (self.ACTION_CLEAR, "ExportSettingDeleteAll")):
+                self.register_list_action_button(action, self.gui.get_object(obj_name))
+            self._gtk_handlers.append((self.gui.get_object("ExportSettingNew"), "clicked",
+                                       self._export_setting_new))
+            # details of export settings
+            self.item_details_container = self.gui.get_object("ExportSettingHandlingNotebook")
+
+            def clear_item_details_container():
+                for index in range(self.item_details_container.get_n_pages()):
+                    self.item_details_container.remove_page(0)
+
+            def add_item_details_container(item, name):
+                self.item_details_container.append_page(item, self._gtk.Label(name))
+
+            self.core.register_ui_section("export_settings_handling", add_item_details_container,
+                                          clear_item_details_container)
+            # register UI sections for GCode settings
+            self.core.register_ui_section(
+                "gcode_preferences",
+                lambda item, name: self.core.register_ui("export_settings_handling", name, item),
+                lambda: self.core.clear_ui_section("export_settings_handling"))
+            general_widget = pycam.Gui.ControlsGTK.ParameterSection()
+            general_widget.get_widget().show()
+            self.core.register_ui_section("gcode_general_parameters", general_widget.add_widget,
+                                          general_widget.clear_widgets)
+            self.core.register_ui("gcode_preferences", "General", general_widget.get_widget())
+            self._profile_selector = pycam.Gui.ControlsGTK.InputChoice(
+                [], change_handler=lambda widget=None: self.core.emit_event(
+                    "toolpath-profiles-selection-changed"))
+            profile_widget = self._profile_selector.get_widget()
+            profile_widget.show()
+            self.core.register_ui("gcode_general_parameters", "GCode Profile", profile_widget)
+            self.core.get("register_parameter_group")(
+                "toolpath_profile", changed_set_event="toolpath-profiles-selection-changed",
+                changed_set_list_event="toolpath-profiles-list-changed",
+                get_related_parameter_names=self._get_selected_profile_parameter_names)
+            # handle table changes
+            self._gtk_handlers.extend((
+                (modelview, "row-activated", "export-settings-changed"),
+                (self.gui.get_object("ExportSettingNameCell"), "edited", self.edit_item_name)))
+            # handle selection changes
+            selection = modelview.get_selection()
+            self._gtk_handlers.append((selection, "changed", "export-settings-selection-changed"))
+            # define cell renderers
+            self.gui.get_object("ExportSettingNameColumn").set_cell_data_func(
+                self.gui.get_object("ExportSettingNameCell"), self.render_item_name)
+            self._event_handlers = (
+                ("toolpath-profiles-list-changed", self._update_profiles),
+                ("export-settings-selection-changed", self._transfer_settings_to_controls),
+                ("export-settings-selection-changed", "visual-item-updated"),
+                ("export-settings-changed", self._transfer_settings_to_controls),
+                ("export-settings-changed", self.force_gtk_modelview_refresh),
+                ("export-settings-changed", "visual-item-updated"),
+                ("export-settings-list-changed", self.force_gtk_modelview_refresh),
+                ("export-settings-list-changed", "visual-item-updated"),
+                ("export-settings-control-changed", self._transfer_controls_to_settings))
+            self.register_gtk_handlers(self._gtk_handlers)
+            self.register_event_handlers(self._event_handlers)
+            self._transfer_settings_to_controls()
+        self.core.set("export_settings", self)
+        return True
+
+    def teardown(self):
+        if self.gui and self._gtk:
+            self.core.unregister_ui("main", self.gui.get_object("ExportSettingsBox"))
+            self.core.get("unregister_parameter_group")("toolpath_profile")
+            self.unregister_gtk_handlers(self._gtk_handlers)
+            self.unregister_event_handlers(self._event_handlers)
+        self.core.set("export_settings", None)
+
+    def _export_setting_new(self, widget=None):
+        with merge_history_and_block_events(self.core):
+            params = {"gcode": self.core.get("get_default_parameter_values")("toolpath_profile")}
+            new_item = pycam.workspace.data_models.ExportSettings(None, data=params)
+            new_item.set_application_value("name", self.get_non_conflicting_name("Settings #%d"))
+        self.select(new_item)
+
+    def _transfer_settings_to_controls(self, widget=None):
+        """transfer the content of the currently selected setting item to the related widgets"""
+        settings = self.get_selected()
+        if settings is None:
+            self.item_details_container.hide()
+        else:
+            with self.core.blocked_events({"export-settings-control-changed"}):
+                gcode_settings = settings.get_settings_by_type("gcode")
+                if not gcode_settings or (ToolpathFilter.SAFETY_HEIGHT.value in gcode_settings):
+                    # it looks like a "milling" profile
+                    profile = "milling"
+                else:
+                    profile = "laser"
+                self.select_profile(profile)
+                self.core.get("set_parameter_values")("toolpath_profile", gcode_settings)
+                self.item_details_container.show()
+
+    def _transfer_controls_to_settings(self):
+        """the value of a control related to export settings was changed by by the user
+
+        The changed value needs to be transferred to the currently selected export settings.
+        """
+        settings = self.get_selected()
+        profile = self.get_selected_profile()
+        if settings and profile:
+            gcode_settings = settings.get_settings_by_type("gcode")
+            for key, value in self.core.get("get_parameter_values")("toolpath_profile").items():
+                gcode_settings[key] = value
+            settings.set_settings_by_type("gcode", gcode_settings)
+
+    def _update_profiles(self):
+        selected = self.get_selected_profile()
+        profiles = list(self.core.get("get_parameter_sets")("toolpath_profile").values())
+        choices = []
+        for profile in sorted(profiles, key=lambda item: item["weight"]):
+            choices.append((profile["label"], profile["name"]))
+        self._profile_selector.update_choices(choices)
+        if selected:
+            self.select_profile(selected)
+        elif profiles:
+            self.select_profile(None)
+        else:
+            pass
+
+    def _get_selected_profile_parameter_names(self):
+        profile = self.get_selected_profile()
+        return set() if profile is None else set(profile["parameters"].keys())
+
+    def get_selected_profile(self):
+        all_profiles = self.core.get("get_parameter_sets")("toolpath_profile")
+        current_name = self._profile_selector.get_value()
+        return all_profiles.get(current_name, None)
+
+    def select_profile(self, item=None):
+        if isinstance(item, str):
+            profile_name = item
+        elif item is None:
+            profile_name = None
+        else:
+            profile_name = item["name"]
+        self._profile_selector.set_value(profile_name)
diff --git a/pycam/Plugins/FilenameDialog.py b/pycam/Plugins/FilenameDialog.py
index 5e4a8d7..3b35184 100644
--- a/pycam/Plugins/FilenameDialog.py
+++ b/pycam/Plugins/FilenameDialog.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -69,9 +68,10 @@ class FilenameDialog(pycam.Plugins.PluginBase):
     def setup(self):
         if not self._gtk:
             return False
-        self.last_dirname = None
-        self.core.set("get_filename_func", self.get_filename_dialog)
-        return True
+        else:
+            self.last_dirname = None
+            self.core.set("get_filename_func", self.get_filename_dialog)
+            return True
 
     def teardown(self):
         self.core.set("get_filename_func", None)
@@ -79,26 +79,27 @@ class FilenameDialog(pycam.Plugins.PluginBase):
     def get_filename_dialog(self, title="Choose file ...", mode_load=False, type_filter=None,
                             filename_templates=None, filename_extension=None, parent=None,
                             extra_widget=None):
-        gtk = self._gtk
         if parent is None:
             parent = self.core.get("main_window")
         # we open a dialog
         if mode_load:
-            action = gtk.FILE_CHOOSER_ACTION_OPEN
-            stock_id_ok = gtk.STOCK_OPEN
+            action = self._gtk.FileChooserAction.OPEN
+            stock_id_ok = self._gtk.STOCK_OPEN
         else:
-            action = gtk.FILE_CHOOSER_ACTION_SAVE
-            stock_id_ok = gtk.STOCK_SAVE
-        dialog = gtk.FileChooserDialog(title=title, parent=parent, action=action,
-                                       buttons=(gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, stock_id_ok,
-                                                gtk.RESPONSE_OK))
+            action = self._gtk.FileChooserAction.SAVE
+            stock_id_ok = self._gtk.STOCK_SAVE
+        dialog = self._gtk.FileChooserDialog(title=title, parent=parent, action=action,
+                                             buttons=(self._gtk.STOCK_CANCEL,
+                                                      self._gtk.ResponseType.CANCEL,
+                                                      stock_id_ok,
+                                                      self._gtk.ResponseType.OK))
         # set the initial directory to the last one used
         if self.last_dirname and os.path.isdir(self.last_dirname):
             dialog.set_current_folder(self.last_dirname)
         # add extra parts
         if extra_widget:
             extra_widget.show_all()
-            dialog.get_content_area().pack_start(extra_widget, expand=False)
+            dialog.get_content_area().pack_start(extra_widget, expand=False, fill=False, padding=0)
         # add filter for files
         if type_filter:
             for file_filter in _get_filters_from_list(self._gtk, type_filter):
@@ -131,13 +132,9 @@ class FilenameDialog(pycam.Plugins.PluginBase):
                         # finish the loop
                         break
             dialog.select_filename(default_filename)
-            try:
-                dialog.set_current_name(os.path.basename(default_filename).encode("utf-8"))
-            except UnicodeError:
-                # ignore
-                pass
+            dialog.set_current_name(os.path.basename(default_filename))
         # add filter for all files
-        ext_filter = gtk.FileFilter()
+        ext_filter = self._gtk.FileFilter()
         ext_filter.set_name("All files")
         ext_filter.add_pattern("*")
         dialog.add_filter(ext_filter)
@@ -148,23 +145,24 @@ class FilenameDialog(pycam.Plugins.PluginBase):
             filename = dialog.get_filename()
             uri = pycam.Utils.URIHandler(filename)
             dialog.hide()
-            if response != gtk.RESPONSE_OK:
+            if response != self._gtk.ResponseType.OK:
                 dialog.destroy()
                 return None
             if not mode_load and filename:
                 # check if we want to add a default suffix
                 filename = _get_filename_with_suffix(filename, type_filter)
             if not mode_load and os.path.exists(filename):
-                overwrite_window = gtk.MessageDialog(
-                    parent, type=gtk.MESSAGE_WARNING, buttons=gtk.BUTTONS_YES_NO,
+                overwrite_window = self._gtk.MessageDialog(
+                    parent, type=self._gtk.MessageType.WARNING,
+                    buttons=self._gtk.ButtonsType.YES_NO,
                     message_format="This file exists. Do you want to overwrite it?")
                 overwrite_window.set_title("Confirm overwriting existing file")
                 response = overwrite_window.run()
                 overwrite_window.destroy()
-                done = (response == gtk.RESPONSE_YES)
+                done = (response == self._gtk.ResponseType.YES)
             elif mode_load and not uri.exists():
-                not_found_window = gtk.MessageDialog(
-                    parent, type=gtk.MESSAGE_ERROR, buttons=gtk.BUTTONS_OK,
+                not_found_window = self._gtk.MessageDialog(
+                    parent, type=self._gtk.MessageType.ERROR, buttons=self._gtk.ButtonsType.OK,
                     message_format="This file does not exist. Please choose a different filename.")
                 not_found_window.set_title("Invalid filename selected")
                 response = not_found_window.run()
diff --git a/pycam/Plugins/Fonts.py b/pycam/Plugins/Fonts.py
index 32f1632..ae3f665 100644
--- a/pycam/Plugins/Fonts.py
+++ b/pycam/Plugins/Fonts.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,14 +17,10 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+from io import StringIO
 import os
 import re
-try:
-    # Python2 (load first - due to incompatible interface)
-    from StringIO import StringIO
-except ImportError:
-    # Python3
-    from io import StringIO
+
 
 from pycam.Geometry.Letters import TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER, TEXT_ALIGN_RIGHT
 import pycam.Plugins
@@ -34,7 +29,6 @@ from pycam.Utils.locations import get_font_dir
 
 
 class Fonts(pycam.Plugins.PluginBase):
-
     UI_FILE = "fonts.ui"
     DEPENDS = ["Clipboard"]
     CATEGORIES = ["Fonts"]
@@ -58,9 +52,9 @@ class Fonts(pycam.Plugins.PluginBase):
                 (self.gui.get_object("FontDialogInputBuffer"), "changed",
                  self.update_font_dialog_preview),
                 (self.gui.get_object("FontDialogPreview"), "configure_event",
-                 self.update_font_dialog_preview),
-                (self.gui.get_object("FontDialogPreview"), "expose_event",
                  self.update_font_dialog_preview)]
+            # (self.gui.get_object("FontDialogPreview"), "expose_event",  FIXME
+            #  self.update_font_dialog_preview)]
             for objname in ("FontSideSkewValue", "FontCharacterSpacingValue",
                             "FontLineSpacingValue"):
                 obj = self.gui.get_object(objname)
@@ -167,7 +161,9 @@ class Fonts(pycam.Plugins.PluginBase):
     def import_from_font_dialog(self, widget=None):
         text_model = self.get_font_dialog_text_rendered()
         name = "Text " + re.sub(r"\W", "", self._get_text_from_input())[:10]
-        self.core.get("models").add_model(text_model, name=name)
+        # TODO: implement "get_dump" (or "serialize" or ...)
+        model_params = {"source": {"type": "object", "data": text_model.get_dump()}}
+        self.core.get("models").add_model(model_params, name=name)
         self.toggle_font_dialog_window()
 
     def export_from_font_dialog(self, widget=None):
@@ -200,7 +196,7 @@ class Fonts(pycam.Plugins.PluginBase):
         text_model = self.get_font_dialog_text_rendered()
         # always clean the background
         x, y, width, height = preview_widget.get_allocation()
-        drawing_area = self._gtk.gdk.Pixmap(final_drawing_area, width, height)
+        drawing_area = self._gdk.Pixmap(final_drawing_area, width, height)
         drawing_area.draw_rectangle(preview_widget.get_style().white_gc, True, 0, 0, width, height)
         # carefully check if there are lines in the rendered text
         if text_model and (text_model.maxx is not None) and (text_model.maxx > text_model.minx):
diff --git a/pycam/Plugins/GCodeParameters.py b/pycam/Plugins/GCodeParameters.py
index 8859338..e9e891f 100644
--- a/pycam/Plugins/GCodeParameters.py
+++ b/pycam/Plugins/GCodeParameters.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011-2012 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,68 +19,59 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 import pycam.Plugins
 import pycam.Gui.ControlsGTK
-import pycam.Toolpath.Filters as Filters
-from pycam.Toolpath import CORNER_STYLE_EXACT_PATH, CORNER_STYLE_EXACT_STOP, \
-        CORNER_STYLE_OPTIMIZE_SPEED, CORNER_STYLE_OPTIMIZE_TOLERANCE
+from pycam.Toolpath import ToolpathPathMode
 
 
 class GCodeSafetyHeight(pycam.Plugins.PluginBase):
 
-    DEPENDS = ["ToolpathProcessors"]
+    DEPENDS = ["ExportSettings"]
     CATEGORIES = ["GCode"]
 
     def setup(self):
         # TODO: update the current filters after a change
         self.control = pycam.Gui.ControlsGTK.InputNumber(
-            digits=1, change_handler=lambda *args: self.core.emit_event("visual-item-updated"))
-        self.core.get("register_parameter")("toolpath_processor", "safety_height", self.control)
+            digits=1,
+            change_handler=lambda *args: self.core.emit_event("export-settings-control-changed"))
+        self.core.get("register_parameter")("toolpath_profile", "safety_height", self.control)
         self.core.register_ui("gcode_general_parameters", "Safety Height",
                               self.control.get_widget(), weight=20)
-        self.core.register_chain("toolpath_filters", self.get_toolpath_filters)
         return True
 
     def teardown(self):
-        self.core.unregister_chain("toolpath_filters", self.get_toolpath_filters)
         self.core.unregister_ui("gcode_general_parameters", self.control.get_widget())
-        self.core.get("unregister_parameter")("toolpath_processor", "safety_height")
-
-    @Filters.toolpath_filter("settings", "safety_height")
-    def get_toolpath_filters(self, safety_height):
-        return [Filters.SafetyHeight(safety_height)]
+        self.core.get("unregister_parameter")("toolpath_profile", "safety_height")
 
 
 class GCodePlungeFeedrate(pycam.Plugins.PluginBase):
 
-    DEPENDS = ["ToolpathProcessors"]
+    DEPENDS = ["ExportSettings"]
     CATEGORIES = ["GCode"]
 
     def setup(self):
-        self.control = pycam.Gui.ControlsGTK.InputNumber(digits=1)
-        self.core.get("register_parameter")("toolpath_processor", "plunge_feedrate", self.control)
+        self.control = pycam.Gui.ControlsGTK.InputNumber(
+            digits=1,
+            change_handler=lambda *args: self.core.emit_event("export-settings-control-changed"))
+        self.core.get("register_parameter")("toolpath_profile", "plunge_feedrate", self.control)
         self.core.register_ui("gcode_general_parameters", "Plunge feedrate limit",
                               self.control.get_widget(), weight=25)
-        self.core.register_chain("toolpath_filters", self.get_toolpath_filters)
         return True
 
     def teardown(self):
-        self.core.unregister_chain("toolpath_filters", self.get_toolpath_filters)
         self.core.unregister_ui("gcode_general_parameters", self.control.get_widget())
-        self.core.get("unregister_parameter")("toolpath_processor", "plunge_feedrate")
-
-    @Filters.toolpath_filter("settings", "plunge_feedrate")
-    def get_toolpath_filters(self, plunge_feedrate):
-        return [Filters.PlungeFeedrate(plunge_feedrate)]
+        self.core.get("unregister_parameter")("toolpath_profile", "plunge_feedrate")
 
 
 # TODO: move to settings for ToolpathOutputDialects
 class GCodeFilenameExtension(pycam.Plugins.PluginBase):
 
-    DEPENDS = ["ToolpathProcessors"]
+    DEPENDS = ["ExportSettings"]
     CATEGORIES = ["GCode"]
 
     def setup(self):
-        self.control = pycam.Gui.ControlsGTK.InputString(max_length=6)
-        self.core.get("register_parameter")("toolpath_processor", "filename_extension",
+        self.control = pycam.Gui.ControlsGTK.InputString(
+            max_length=6,
+            change_handler=lambda *args: self.core.emit_event("export-settings-control-changed"))
+        self.core.get("register_parameter")("toolpath_profile", "filename_extension",
                                             self.control)
         self.core.register_ui("gcode_general_parameters", "Custom GCode filename extension",
                               self.control.get_widget(), weight=80)
@@ -89,17 +79,12 @@ class GCodeFilenameExtension(pycam.Plugins.PluginBase):
 
     def teardown(self):
         self.core.unregister_ui("gcode_general_parameters", self.control.get_widget())
-        self.core.get("unregister_parameter")("toolpath_processor", "filename_extension")
-
-    @Filters.toolpath_filter("settings", "filename_extension")
-    def get_toolpath_filters(self, safety_height):
-        # TODO: see above - move to ToolpathOutputDialects
-        return []
+        self.core.get("unregister_parameter")("toolpath_profile", "filename_extension")
 
 
 class GCodeStepWidth(pycam.Plugins.PluginBase):
 
-    DEPENDS = ["ToolpathProcessors"]
+    DEPENDS = ["ExportSettings"]
     CATEGORIES = ["GCode"]
 
     def setup(self):
@@ -109,77 +94,26 @@ class GCodeStepWidth(pycam.Plugins.PluginBase):
                                       self._table.clear_widgets)
         self.controls = []
         for key in "xyz":
-            control = pycam.Gui.ControlsGTK.InputNumber(digits=8, start=0.0001, increment=0.00005,
-                                                        lower=0.00000001)
+            control = pycam.Gui.ControlsGTK.InputNumber(
+                digits=8, start=0.0001, increment=0.00005, lower=0.00000001,
+                change_handler=lambda *args: self.core.emit_event(
+                    "export-settings-control-changed"))
             self.core.register_ui("gcode_step_width", key.upper(), control.get_widget(),
                                   weight="xyz".index(key))
-            self.core.get("register_parameter")("toolpath_processor", "step_width_%s" % key,
-                                                control)
+            self.core.get("register_parameter")("toolpath_profile", ("step_width", key), control)
             self.controls.append((key, control))
-        self.core.register_chain("toolpath_filters", self.get_toolpath_filters)
         return True
 
     def teardown(self):
-        self.core.unregister_chain("toolpath_filters", self.get_toolpath_filters)
         for key, control in self.controls:
             self.core.unregister_ui("gcode_step_width", control)
-            self.core.get("unregister_parameter")("toolpath_processor", "step_width_%s" % key)
+            self.core.get("unregister_parameter")("toolpath_profile", ("step_width", key))
         self.core.unregister_ui("gcode_general_parameters", self._table.get_widget())
 
-    @Filters.toolpath_filter("settings", ("step_width_x", "step_width_y", "step_width_z"))
-    def get_toolpath_filters(self, **kwargs):
-        return [Filters.StepWidth(**kwargs)]
-
-
-class GCodeSpindle(pycam.Plugins.PluginBase):
-
-    DEPENDS = ["ToolpathProcessors"]
-    CATEGORIES = ["GCode"]
-
-    def setup(self):
-        self._table = pycam.Gui.ControlsGTK.ParameterSection()
-        self.core.register_ui("gcode_preferences", "Spindle control", self._table.get_widget())
-        self.core.register_ui_section("gcode_spindle", self._table.add_widget,
-                                      self._table.clear_widgets)
-        self.spindle_delay = pycam.Gui.ControlsGTK.InputNumber(digits=1, lower=0)
-        self.core.register_ui("gcode_spindle", "Delay (in seconds) after start/stop",
-                              self.spindle_delay.get_widget(), weight=50)
-        self.core.get("register_parameter")("toolpath_processor", "spindle_delay",
-                                            self.spindle_delay)
-        self.spindle_enable = pycam.Gui.ControlsGTK.InputCheckBox(
-            change_handler=self.update_widgets)
-        self.core.register_ui("gcode_spindle", "Start / Stop Spindle (M3/M5)",
-                              self.spindle_enable.get_widget(), weight=10)
-        self.core.get("register_parameter")("toolpath_processor", "spindle_enable",
-                                            self.spindle_enable)
-        self.core.register_chain("toolpath_filters", self.get_toolpath_filters)
-        self.update_widgets()
-        return True
-
-    def teardown(self):
-        self.core.unregister_chain("toolpath_filters", self.get_toolpath_filters)
-        self.core.unregister_ui("gcode_spindle", self.spindle_delay.get_widget())
-        self.core.unregister_ui("gcode_spindle", self.spindle_enable.get_widget())
-        self.core.unregister_ui_section("gcode_spindle")
-        self.core.unregister_ui("gcode_preferences", self._table.get_widget())
-        self.core.get("unregister_parameter")("toolpath_processor", "spindle_enable")
-        self.core.get("unregister_parameter")("toolpath_processor", "spindle_delay")
-
-    def update_widgets(self, widget=None):
-        widget = self.spindle_delay.get_widget()
-        widget.set_sensitive(self.spindle_enable.get_value())
-
-    @Filters.toolpath_filter("settings", ("spindle_enable", "spindle_delay"))
-    def get_toolpath_filters(self, spindle_enable=False, spindle_delay=0):
-        if spindle_enable:
-            return [Filters.TriggerSpindle(spindle_delay)]
-        else:
-            return []
-
 
 class GCodeCornerStyle(pycam.Plugins.PluginBase):
 
-    DEPENDS = ["ToolpathProcessors"]
+    DEPENDS = ["ExportSettings"]
     CATEGORIES = ["GCode"]
 
     def setup(self):
@@ -187,46 +121,48 @@ class GCodeCornerStyle(pycam.Plugins.PluginBase):
         self.core.register_ui("gcode_preferences", "Corner style", self._table.get_widget())
         self.core.register_ui_section("gcode_corner_style", self._table.add_widget,
                                       self._table.clear_widgets)
-        self.motion_tolerance = pycam.Gui.ControlsGTK.InputNumber(digits=3, lower=0)
+        self.motion_tolerance = pycam.Gui.ControlsGTK.InputNumber(
+            digits=3, lower=0,
+            change_handler=lambda *args: self.core.emit_event("export-settings-control-changed"))
         self.core.register_ui("gcode_corner_style", "Motion blending tolerance",
                               self.motion_tolerance.get_widget(), weight=30)
-        self.core.get("register_parameter")("toolpath_processor", "motion_tolerance",
-                                            self.motion_tolerance)
-        self.naive_tolerance = pycam.Gui.ControlsGTK.InputNumber(digits=3, lower=0)
+        self.core.get("register_parameter")(
+            "toolpath_profile", ("corner_style", "motion_tolerance"), self.motion_tolerance)
+        self.naive_tolerance = pycam.Gui.ControlsGTK.InputNumber(
+            digits=3, lower=0,
+            change_handler=lambda *args: self.core.emit_event("export-settings-control-changed"))
         self.core.register_ui("gcode_corner_style", "Naive CAM tolerance",
                               self.naive_tolerance.get_widget(), weight=50)
-        self.core.get("register_parameter")("toolpath_processor", "naive_tolerance",
-                                            self.naive_tolerance)
-        self.path_mode = pycam.Gui.ControlsGTK.InputChoice((
-            ("Exact path mode (G61)", CORNER_STYLE_EXACT_PATH),
-            ("Exact stop mode (G61.1)", CORNER_STYLE_EXACT_STOP),
-            ("Continuous with maximum speed (G64)", CORNER_STYLE_OPTIMIZE_SPEED),
-            ("Continuous with tolerance (G64 P/Q)", CORNER_STYLE_OPTIMIZE_TOLERANCE)))
+        self.core.get("register_parameter")(
+            "toolpath_profile", ("corner_style", "naive_tolerance"), self.naive_tolerance)
+        self.path_mode = pycam.Gui.ControlsGTK.InputChoice(
+            (("Exact path mode (G61)", ToolpathPathMode.CORNER_STYLE_EXACT_PATH.value),
+             ("Exact stop mode (G61.1)", ToolpathPathMode.CORNER_STYLE_EXACT_STOP.value),
+             ("Continuous with maximum speed (G64)",
+              ToolpathPathMode.CORNER_STYLE_OPTIMIZE_SPEED.value),
+             ("Continuous with tolerance (G64 P/Q)",
+              ToolpathPathMode.CORNER_STYLE_OPTIMIZE_TOLERANCE.value)),
+            change_handler=lambda *args: self.core.emit_event("export-settings-control-changed"))
         self.path_mode.get_widget().connect("changed", self.update_widgets)
         self.core.register_ui("gcode_corner_style", "Path mode", self.path_mode.get_widget(),
                               weight=10)
-        self.core.get("register_parameter")("toolpath_processor", "path_mode", self.path_mode)
-        self.core.register_chain("toolpath_filters", self.get_toolpath_filters)
+        self.core.get("register_parameter")(
+            "toolpath_profile", ("corner_style", "mode"), self.path_mode)
         self.update_widgets()
         return True
 
     def teardown(self):
-        self.core.unregister_chain("toolpath_filters", self.get_toolpath_filters)
         self.core.unregister_ui("gcode_corner_style", self.motion_tolerance.get_widget())
         self.core.unregister_ui("gcode_corner_style", self.naive_tolerance.get_widget())
         self.core.unregister_ui("gcode_corner_style", self.path_mode.get_widget())
         self.core.unregister_ui_section("gcode_corner_style")
         self.core.unregister_ui("gcode_preferences", self._table.get_widget())
-        for name in ("motion_tolerance", "naive_tolerance", "path_mode"):
-            self.core.get("unregister_parameter")("toolpath_processor", name)
+        for name in ("motion_tolerance", "naive_tolerance", "mode"):
+            self.core.get("unregister_parameter")("toolpath_profile", ("corner_style", name))
 
     def update_widgets(self, widget=None):
-        enable_tolerances = (self.path_mode.get_value() == CORNER_STYLE_OPTIMIZE_TOLERANCE)
+        enable_tolerances = (self.path_mode.get_value()
+                             == ToolpathPathMode.CORNER_STYLE_OPTIMIZE_TOLERANCE)
         controls = (self.motion_tolerance, self.naive_tolerance)
         for control in controls:
             control.get_widget().set_sensitive(enable_tolerances)
-
-    @Filters.toolpath_filter("settings", ("path_mode", "motion_tolerance", "naive_tolerance"))
-    def get_toolpath_filters(self, path_mode=CORNER_STYLE_EXACT_PATH, motion_tolerance=0,
-                             naive_tolerance=0):
-        return [Filters.PathMode(path_mode, motion_tolerance, naive_tolerance)]
diff --git a/pycam/Plugins/GCodeTouchOff.py b/pycam/Plugins/GCodeTouchOff.py
index 2781f8f..7f9691a 100644
--- a/pycam/Plugins/GCodeTouchOff.py
+++ b/pycam/Plugins/GCodeTouchOff.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2017 Lars Kruse <devel@sumpfralle.de>
 
@@ -29,7 +28,7 @@ class GCodeTouchOff(pycam.Plugins.PluginBase):
     """ TODO: this plugin currently does not change the generated toolpath - it is just the UI part
     """
 
-    DEPENDS = ["ToolpathProcessors"]
+    DEPENDS = ["ExportSettings"]
     CATEGORIES = ["GCode"]
     CONTROL_MAP = {
         "on_startup": ("Touch off on startup (initializes coordinate system for Z)", False, 10,
@@ -49,7 +48,7 @@ class GCodeTouchOff(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.controls = {}
-        self.core.get("register_parameter")("toolpath_processor", "touch_off", None,
+        self.core.get("register_parameter")("toolpath_profile", "touch_off", None,
                                             get_func=self._get_control_values,
                                             set_func=self._set_control_values)
         self._table = pycam.Gui.ControlsGTK.ParameterSection()
@@ -72,7 +71,7 @@ class GCodeTouchOff(pycam.Plugins.PluginBase):
             self.core.unregister_ui("gcode_touch_off", control.get_widget())
         self.core.unregister_ui_section("gcode_touch_off")
         self.core.unregister_ui("gcode_preferences", self._table.get_widget())
-        self.core.get("unregister_parameter")("toolpath_processor", "touch_off", self.box)
+        self.core.get("unregister_parameter")("toolpath_profile", "touch_off", self.box)
 
     def _get_control_values(self):
         """ used by the parameter manager for retrieving the current state """
@@ -108,3 +107,4 @@ class GCodeTouchOff(pycam.Plugins.PluginBase):
         # disable/enable touch probe height
         for name in ("rapid_move_down", "slow_move_down", "slow_move_speed", "probe_level_z"):
             self.controls[name].set_visible(touch_off_enabled)
+        self.core.emit_event("export-settings-control-changed")
diff --git a/pycam/Plugins/GtkConsole.py b/pycam/Plugins/GtkConsole.py
index c153d30..a9154e7 100644
--- a/pycam/Plugins/GtkConsole.py
+++ b/pycam/Plugins/GtkConsole.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2012 Lars Kruse <devel@sumpfralle.de>
 
@@ -19,13 +18,8 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
 import code
+from io import StringIO
 import os
-try:
-    # Python2 (load first - due to incompatible interface)
-    from StringIO import StringIO
-except ImportError:
-    # Python3
-    from io import StringIO
 import sys
 
 import pycam.Plugins
@@ -168,7 +162,7 @@ class GtkConsole(pycam.Plugins.PluginBase):
             # ignore, if any modifier is pressed
             return False
         input_control = self.gui.get_object("CommandInput")
-        if (keyval == self._gtk.keysyms.Up):
+        if (keyval == self._gdk.KEY_Up):
             if self._history_position is None:
                 # store the current (new) line for later
                 self._history_lastline_backup = input_control.get_text()
@@ -179,7 +173,7 @@ class GtkConsole(pycam.Plugins.PluginBase):
             else:
                 # invalid -> no change
                 return True
-        elif (keyval == self._gtk.keysyms.Down):
+        elif (keyval == self._gdk.KEY_Down):
             if self._history_position is None:
                 return True
             self._history_position += 1
diff --git a/pycam/Plugins/Log.py b/pycam/Plugins/Log.py
index ab9ee69..e89c3c1 100644
--- a/pycam/Plugins/Log.py
+++ b/pycam/Plugins/Log.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -83,10 +82,9 @@ class Log(pycam.Plugins.PluginBase):
         timestamp = datetime.datetime.fromtimestamp(record.created).strftime("%H:%M")
         # avoid the ugly character for a linefeed
         message = " ".join(message.splitlines())
-        message = message.encode("utf-8", "ignore")
         self.log_model.append((timestamp, title, message))
         # update the status bar (if the GTK interface is still active)
-        if self.status_bar.window is not None:
+        if self.status_bar.get_parent() is not None:
             # remove the last message from the stack (probably not necessary)
             self.status_bar.pop(0)
             # push the new message
@@ -119,7 +117,7 @@ class Log(pycam.Plugins.PluginBase):
         checkbox_state = toggle_log_checkbox.get_active()
         if value is None:
             new_state = checkbox_state
-        elif isinstance(value, self._gtk.gdk.Event):
+        elif isinstance(value, self._gdk.Event):
             # someone clicked at the status bar -> toggle the window state
             new_state = not checkbox_state
         else:
diff --git a/pycam/Plugins/MemoryAnalyzer.py b/pycam/Plugins/MemoryAnalyzer.py
index 4cbfb5d..ef697fd 100644
--- a/pycam/Plugins/MemoryAnalyzer.py
+++ b/pycam/Plugins/MemoryAnalyzer.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2012 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,12 +19,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 
 import csv
-try:
-    # Python2 (load first - due to incompatible interface)
-    from StringIO import StringIO
-except ImportError:
-    # Python3
-    from io import StringIO
+from io import StringIO
 
 import pycam.Plugins
 import pycam.Utils.log
diff --git a/pycam/Plugins/ModelExport.py b/pycam/Plugins/ModelExport.py
index 547bc25..115baa1 100644
--- a/pycam/Plugins/ModelExport.py
+++ b/pycam/Plugins/ModelExport.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -104,7 +103,7 @@ class ModelExportTrimesh(pycam.Plugins.PluginBase):
     def export_trimesh(self, models):
         removal_list = []
         for index, model in enumerate(models):
-            if not hasattr(model.model, "triangles"):
+            if not hasattr(model.get_model(), "triangles"):
                 continue
             # determine the file type
             # TODO: this needs to be decided by the exporter code
@@ -126,7 +125,7 @@ class ModelExportTrimesh(pycam.Plugins.PluginBase):
                 file_in = open(uri.get_local_path(), "w")
                 # TODO: fill in "comment" with "meta_data"
                 # TODO: call a specific exporter
-                model.model.export(unit=self.core.get("unit")).write(file_in)
+                model.get_model().export(unit=self.core.get("unit")).write(file_in)
                 file_in.close()
                 removal_list.append(index)
             except IOError as err_msg:
@@ -152,7 +151,7 @@ class ModelExportContour(pycam.Plugins.PluginBase):
     def export_contour(self, models):
         removal_list = []
         for index, model in enumerate(models):
-            if not hasattr(model.model, "get_polygons"):
+            if not hasattr(model.get_model(), "get_polygons"):
                 continue
             # determine the file type
             # TODO: this needs to be decided by the exporter code
@@ -173,7 +172,7 @@ class ModelExportContour(pycam.Plugins.PluginBase):
                 file_in = open(uri.get_local_path(), "w")
                 # TODO: fill in "comment" with "meta_data"
                 # TODO: call a specific exporter
-                model.model.export(unit=self.core.get("unit")).write(file_in)
+                model.get_model().export(unit=self.core.get("unit")).write(file_in)
                 file_in.close()
                 removal_list.append(index)
             except IOError as err_msg:
diff --git a/pycam/Plugins/ModelExtrusion.py b/pycam/Plugins/ModelExtrusion.py
index f6840b9..58d3ff6 100644
--- a/pycam/Plugins/ModelExtrusion.py
+++ b/pycam/Plugins/ModelExtrusion.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -69,7 +68,7 @@ class ModelExtrusion(pycam.Plugins.PluginBase):
         models = self.core.get("models").get_selected()
         extrudables = []
         for model in models:
-            if (model is not None) and hasattr(model.model, "extrude"):
+            if (model is not None) and hasattr(model.get_model(), "extrude"):
                 extrudables.append(model)
         return extrudables
 
@@ -111,8 +110,8 @@ class ModelExtrusion(pycam.Plugins.PluginBase):
             progress.update(text="Extruding models")
             progress.set_multiple(len(selected_models), "Model")
             for model in selected_models:
-                new_model = model.model.extrude(stepping=grid_size, func=func,
-                                                callback=progress.update)
+                new_model = model.get_model().extrude(stepping=grid_size, func=func,
+                                                      callback=progress.update)
                 if new_model:
                     self.core.get("models").add_model(new_model,
                                                       name_template="Extruded model #%d")
diff --git a/pycam/Plugins/ModelPlaneMirror.py b/pycam/Plugins/ModelPlaneMirror.py
index 94cb86d..e22a666 100644
--- a/pycam/Plugins/ModelPlaneMirror.py
+++ b/pycam/Plugins/ModelPlaneMirror.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -57,19 +56,13 @@ class ModelPlaneMirror(pycam.Plugins.PluginBase):
         models = self.core.get("models").get_selected()
         if not models:
             return
-        self.core.emit_event("model-change-before")
-        progress = self.core.get("progress")
-        progress.update(text="Mirroring model")
-        progress.disable_cancel()
-        progress.set_multiple(len(models), "Model")
-        for plane in ("XY", "XZ", "YZ"):
+        for plane, matrix in (("XY", [[1, 0, 0], [0, 1, 0], [0, 0, -1]]),
+                              ("XZ", [[1, 0, 0], [0, -1, 0], [0, 0, 1]]),
+                              ("YZ", [[-1, 0, 0], [0, 1, 0], [0, 0, 1]])):
             if self.gui.get_object("MirrorPlane%s" % plane).get_active():
                 break
         else:
             assert False, "No mirror plane selected"
         for model in models:
-            model.model.transform_by_template("%s_mirror" % plane.lower(),
-                                              callback=progress.update)
-            progress.update_multiple()
-        progress.finish()
-        self.core.emit_event("model-change-after")
+            model.extend_value("transformations",
+                               [{"action": "multiply_matrix", "matrix": matrix}])
diff --git a/pycam/Plugins/ModelPolygons.py b/pycam/Plugins/ModelPolygons.py
index 9ef0f58..ca8604f 100644
--- a/pycam/Plugins/ModelPolygons.py
+++ b/pycam/Plugins/ModelPolygons.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -34,9 +33,10 @@ class ModelPolygons(pycam.Plugins.PluginBase):
             polygon_frame.unparent()
             self.core.register_ui("model_handling", "Polygons", polygon_frame, 0)
             self._gtk_handlers = (
-                (self.gui.get_object("ToggleModelDirectionButton"), "clicked",
-                 self._toggle_direction),
-                (self.gui.get_object("DirectionsGuessButton"), "clicked", self._revise_directions))
+                (self.gui.get_object("ToggleModelDirectionButton"),
+                 "clicked", self._adjust_polygons, "toggle_polygon_directions"),
+                (self.gui.get_object("DirectionsGuessButton"),
+                 "clicked", self._adjust_polygons, "revise_polygon_directions"))
             self._event_handlers = (
                 ("model-change-after", self._update_polygon_controls),
                 ("model-selection-changed", self._update_polygon_controls))
@@ -54,7 +54,7 @@ class ModelPolygons(pycam.Plugins.PluginBase):
     def _get_polygon_models(self):
         models = []
         for model in self.core.get("models").get_selected():
-            if model and hasattr(model.model, "reverse_directions"):
+            if model and hasattr(model.get_model(), "reverse_directions"):
                 models.append(model)
         return models
 
@@ -66,30 +66,7 @@ class ModelPolygons(pycam.Plugins.PluginBase):
         else:
             frame.hide()
 
-    def _toggle_direction(self, widget=None):
+    def _adjust_polygons(self, widget=None, action=None):
         models = self._get_polygon_models()
-        if not models:
-            return
-        self.core.emit_event("model-change-before")
-        progress = self.core.get("progress")
-        progress.update(text="Reversing directions of contour model")
-        progress.set_multiple(len(models), "Model")
         for model in models:
-            model.model.reverse_directions(callback=progress.update)
-            progress.update_multiple()
-        progress.finish()
-        self.core.emit_event("model-change-after")
-
-    def _revise_directions(self, widget=None):
-        models = self._get_polygon_models()
-        if not models:
-            return
-        self.core.emit_event("model-change-before")
-        progress = self.core.get("progress")
-        progress.update(text="Analyzing directions of contour model")
-        progress.set_multiple(len(models), "Model")
-        for model in models:
-            model.model.revise_directions(callback=progress.update)
-            progress.update_multiple()
-        progress.finish()
-        self.core.emit_event("model-change-after")
+            model.extend_value("transformations", [{"action": action}])
diff --git a/pycam/Plugins/ModelPosition.py b/pycam/Plugins/ModelPosition.py
index caddd30..3f7aba2 100644
--- a/pycam/Plugins/ModelPosition.py
+++ b/pycam/Plugins/ModelPosition.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -76,48 +75,28 @@ class ModelPosition(pycam.Plugins.PluginBase):
         models = self.core.get("models").get_selected()
         if not models:
             return
-        self.core.emit_event("model-change-before")
-        progress = self.core.get("progress")
-        progress.update(text="Aligning model")
-        progress.disable_cancel()
-        progress.set_multiple(len(models), "Model")
-        shift = [self.gui.get_object("ShiftPosition%s" % axis).get_value() for axis in "XYZ"]
+        axes = [self.gui.get_object("ShiftPosition%s" % axis).get_value() for axis in "XYZ"]
+        shift_operation = {"action": "shift", "shift_target": "distance", "axes": axes}
         for model in models:
-            model.model.shift(shift[0], shift[1], shift[2], callback=progress.update)
-            progress.update_multiple()
-        progress.finish()
-        self.core.emit_event("model-change-after")
+            model.extend_value("transformations", [shift_operation])
 
     def _align_model(self, widget=None):
         models = self.core.get("models").get_selected()
         if not models:
             return
-        self.core.emit_event("model-change-before")
-        dest = [self.gui.get_object("AlignPosition%s" % axis).get_value() for axis in "XYZ"]
-        progress = self.core.get("progress")
-        progress.update(text="Shifting model")
-        progress.disable_cancel()
-        progress.set_multiple(len(models), "Model")
-        for model_dict in models:
-            model = model_dict.model
-            shift_values = []
-            for axis in "XYZ":
-                dest = self.gui.get_object("AlignPosition%s" % axis).get_value()
-                alignments = ("Min", "Center", "Max")
-                for alignment in alignments:
-                    objname = "AlignPosition%s%s" % (axis, alignment)
-                    min_axis = getattr(model, "min%s" % axis.lower())
-                    max_axis = getattr(model, "max%s" % axis.lower())
-                    if self.gui.get_object(objname).get_active():
-                        if alignment == "Min":
-                            shift = dest - min_axis
-                        elif alignment == "Center":
-                            shift = dest - (min_axis + max_axis) / 2.0
-                        else:
-                            shift = dest - max_axis
-                        shift_values.append(shift)
-            model.shift(shift_values[0], shift_values[1], shift_values[2],
-                        callback=progress.update)
-            progress.update_multiple()
-        progress.finish()
-        self.core.emit_event("model-change-after")
+        transformations = []
+        # collect transformations for min/center/max alignments
+        # Each alignment transformation is only added, if it was selected for at least one axis.
+        for obj_name_suffix, shift_target in (("Min", "align_min"),
+                                              ("Center", "center"),
+                                              ("Max", "align_max")):
+            axes = [None, None, None]
+            for index, axis in enumerate("XYZ"):
+                objname = "AlignPosition%s%s" % (axis, obj_name_suffix)
+                if self.gui.get_object(objname).get_active():
+                    axes[index] = self.gui.get_object("AlignPosition%s" % axis).get_value()
+            if any(axis is not None for axis in axes):
+                transformations.append(
+                    {"action": "shift", "shift_target": shift_target, "axes": axes})
+        for model in models:
+            model.extend_value("transformations", transformations)
diff --git a/pycam/Plugins/ModelProjection.py b/pycam/Plugins/ModelProjection.py
index 63ecc4e..63458c1 100644
--- a/pycam/Plugins/ModelProjection.py
+++ b/pycam/Plugins/ModelProjection.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,7 +19,6 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 
 import pycam.Plugins
-from pycam.Geometry.Plane import Plane
 
 
 class ModelProjection(pycam.Plugins.PluginBase):
@@ -54,7 +52,7 @@ class ModelProjection(pycam.Plugins.PluginBase):
         models = self.core.get("models").get_selected()
         projectables = []
         for model in models:
-            if (model is not None) and hasattr(model.model, "get_waterline_contour"):
+            if (model is not None) and hasattr(model.get_model(), "get_waterline_contour"):
                 projectables.append(model)
         return projectables
 
@@ -70,25 +68,16 @@ class ModelProjection(pycam.Plugins.PluginBase):
         models = self._get_projectable_models()
         if not models:
             return
-        progress = self.core.get("progress")
-        progress.update(text="Calculating 2D projection")
-        progress.set_multiple(len(models), "Model")
-        for model_dict in models:
-            model = model_dict.model
-            for objname, z_level in (("ProjectionModelTop", model.maxz),
-                                     ("ProjectionModelMiddle", (model.minz + model.maxz) / 2.0),
-                                     ("ProjectionModelBottom", model.minz),
-                                     ("ProjectionModelCustom",
-                                      self.gui.get_object("ProjectionZLevel").get_value())):
+        for model_obj in models:
+            model = model_obj.get_model()
+            for objname, z_level in (
+                    ("ProjectionModelTop", model.maxz),
+                    ("ProjectionModelMiddle", (model.minz + model.maxz) / 2.0),
+                    ("ProjectionModelBottom", model.minz),
+                    ("ProjectionModelCustom",
+                     self.gui.get_object("ProjectionZLevel").get_value())):
                 if self.gui.get_object(objname).get_active():
-                    plane = Plane((0, 0, z_level), (0, 0, 1, 'v'))
-                    self.log.info("Projecting 3D model at level z=%g", plane.p[2])
-                    new_model = model.get_waterline_contour(plane, callback=progress.update)
-                    if new_model:
-                        self.core.get("models").add_model(new_model,
-                                                          name_template="Projected model #%d")
-                    else:
-                        self.log.warn("The 2D projection at z=%g is empty. Aborted.", plane.p[2])
-                    break
-            progress.update_multiple()
-        progress.finish()
+                    center = [0, 0, z_level]
+                    vector = [0, 0, 1]
+            model_obj.extend_value("transformations",
+                                   [{"action": "projection", "center": center, "vector": vector}])
diff --git a/pycam/Plugins/ModelRotation.py b/pycam/Plugins/ModelRotation.py
index 9ece298..0e4c8c8 100644
--- a/pycam/Plugins/ModelRotation.py
+++ b/pycam/Plugins/ModelRotation.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,7 +19,6 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 
 import pycam.Plugins
-import pycam.Geometry.Matrix
 
 
 class ModelRotation(pycam.Plugins.PluginBase):
@@ -59,11 +57,11 @@ class ModelRotation(pycam.Plugins.PluginBase):
         models = self.core.get("models").get_selected()
         if not models:
             return
-        self.core.emit_event("model-change-before")
+        center = [0, 0, 0]
         for axis in "XYZ":
             if self.gui.get_object("RotationAxis%s" % axis).get_active():
                 break
-        axis_vector = {"X": (1, 0, 0), "Y": (0, 1, 0), "Z": (0, 0, 1)}[axis]
+        axis_vector = {"X": [1, 0, 0], "Y": [0, 1, 0], "Z": [0, 0, 1]}[axis]
         for control, angle in (("RotationAngle90CCKW", -90),
                                ("RotationAngle90CKW", 90),
                                ("RotationAngle180", 180),
@@ -71,14 +69,6 @@ class ModelRotation(pycam.Plugins.PluginBase):
                                 self.gui.get_object("RotationAngle").get_value())):
             if self.gui.get_object(control).get_active():
                 break
-        matrix = pycam.Geometry.Matrix.get_rotation_matrix_axis_angle(axis_vector, angle,
-                                                                      use_radians=False)
-        progress = self.core.get("progress")
-        progress.update(text="Rotating model")
-        progress.disable_cancel()
-        progress.set_multiple(len(models), "Model")
         for model in models:
-            model.model.transform_by_matrix(matrix, callback=progress.update)
-            progress.update_multiple()
-        self.core.emit_event("model-change-after")
-        progress.finish()
+            model.extend_value("transformations", [{"action": "rotate", "center": center,
+                                                    "vector": axis_vector, "angle": angle}])
diff --git a/pycam/Plugins/ModelScaling.py b/pycam/Plugins/ModelScaling.py
index 5cb1209..657a47e 100644
--- a/pycam/Plugins/ModelScaling.py
+++ b/pycam/Plugins/ModelScaling.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -86,12 +85,13 @@ class ModelScaling(pycam.Plugins.PluginBase):
             scale_button = self.gui.get_object("ScaleSelectedAxisButton")
             scale_value = self.gui.get_object("ScaleDimensionControl")
             index = axis_control.get_active()
-            # TODO: get dimension of multiple models
-            model = models[0].model
-            dims = (model.maxx - model.minx, model.maxy - model.miny, model.maxz - model.minz)
-            value = dims[index]
-            non_zero_dimensions = [i for i, dim in enumerate(dims) if dim > 0]
-            enable_controls = index in non_zero_dimensions
+            enable_controls = False
+            for model_dict in models:
+                model = model_dict.get_model()
+                dims = (model.maxx - model.minx, model.maxy - model.miny, model.maxz - model.minz)
+                value = dims[index]
+                non_zero_dimensions = [i for i, dim in enumerate(dims) if dim > 0]
+                enable_controls = enable_controls or (index in non_zero_dimensions)
             scale_button.set_sensitive(enable_controls)
             scale_value.set_sensitive(enable_controls)
             scale_value.set_value(value)
@@ -105,16 +105,10 @@ class ModelScaling(pycam.Plugins.PluginBase):
         factor = percent / 100.0
         if (factor <= 0) or (factor == 1):
             return
-        self.core.emit_event("model-change-before")
-        progress = self.core.get("progress")
-        progress.update(text="Scaling model")
-        progress.disable_cancel()
-        progress.set_multiple(len(models), "Model")
+        axes = [factor] * 3
         for model in models:
-            model.model.scale(factor, callback=progress.update)
-            progress.update_multiple()
-        progress.finish()
-        self.core.emit_event("model-change-after")
+            model.extend_value("transformations",
+                               [{"action": "scale", "scale_target": "factor", "axes": axes}])
 
     def _scale_model_axis_fit(self, widget=None, proportionally=False):
         models = self.core.get("models").get_selected()
@@ -122,32 +116,11 @@ class ModelScaling(pycam.Plugins.PluginBase):
             return
         value = self.gui.get_object("ScaleDimensionValue").get_value()
         index = self.gui.get_object("ScaleDimensionAxis").get_active()
-        axes = "xyz"
-        axis_suffix = axes[index]
-        # TODO: use dimension of multiple models
-        model = models[0].model
-        factor = (value / (getattr(model, "max" + axis_suffix)
-                           - getattr(model, "min" + axis_suffix)))
-        self.core.emit_event("model-change-before")
-        progress = self.core.get("progress")
-        progress.update(text="Scaling model")
-        progress.disable_cancel()
-        progress.set_multiple(len(models), "Model")
+        if proportionally:
+            axes = [value] * 3
+        else:
+            axes = [None, None, None]
+            axes[index] = value
         for model in models:
-            # TODO: use different scaling for multiple models
-            if proportionally:
-                model.model.scale(factor, callback=progress.update)
-            else:
-                factor_x, factor_y, factor_z = (1, 1, 1)
-                if index == 0:
-                    factor_x = factor
-                elif index == 1:
-                    factor_y = factor
-                elif index == 2:
-                    factor_z = factor
-                else:
-                    return
-                model.model.scale(factor_x, factor_y, factor_z, callback=progress.update)
-            progress.update_multiple()
-        progress.finish()
-        self.core.emit_event("model-change-after")
+            model.extend_value("transformations",
+                               [{"action": "scale", "scale_target": "size", "axes": axes}])
diff --git a/pycam/Plugins/ModelSupport.py b/pycam/Plugins/ModelSupport.py
index e24f833..1724781 100644
--- a/pycam/Plugins/ModelSupport.py
+++ b/pycam/Plugins/ModelSupport.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -21,6 +20,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 import pycam.Geometry.Model
 import pycam.Plugins
+import pycam.workspace.data_models
 
 
 class ModelSupport(pycam.Plugins.PluginBase):
@@ -28,6 +28,7 @@ class ModelSupport(pycam.Plugins.PluginBase):
     UI_FILE = "model_support.ui"
     DEPENDS = ["Models"]
     CATEGORIES = ["Model", "Support bridges"]
+    MODEL_NAME_TEMPLATE = "Support Model #%d"
 
     def setup(self):
         if self.gui:
@@ -74,7 +75,7 @@ class ModelSupport(pycam.Plugins.PluginBase):
             container = self.gui.get_object("SupportAddOnContainer")
             self.core.register_ui_section(
                 "support_model_settings",
-                lambda obj, name: container.pack_start(obj, expand=False),
+                lambda obj, name: container.pack_start(obj, expand=False, fill=False, padding=0),
                 clear_support_model_settings)
             # TODO: remove public settings
             self.core.add_item("support_model_type", get_support_model_type,
@@ -131,9 +132,9 @@ class ModelSupport(pycam.Plugins.PluginBase):
             create_button.set_sensitive(True)
 
     def _add_support_model(self, widget=None):
-        models = self.core.get("current_support_models")
-        for model in models:
-            self.core.get("models").add_model(model, name_template="Support model #%d",
+        for model_object in self.core.get("current_support_models"):
+            self.core.get("models").add_model(model_object.get_dict(),
+                                              name_template=self.MODEL_NAME_TEMPLATE,
                                               color=self.core.get("color_support_preview"))
         # Disable the support model type -> avoid confusing visualization.
         # (this essentially removes the support grid from the 3D view)
@@ -142,9 +143,12 @@ class ModelSupport(pycam.Plugins.PluginBase):
     def get_draw_dimension(self, low, high):
         if not self.core.get("show_support_preview"):
             return
-        support_models = self.core.get("current_support_models")
-        if not support_models:
-            return
+        support_model_objects = self.core.get("current_support_models", [])
+        support_models = []
+        for model_object in support_model_objects:
+            support_model = model_object.get_model()
+            if support_model:
+                support_models.append(support_model)
         model_box = pycam.Geometry.Model.get_combined_bounds(support_models)
         if model_box is None:
             return
@@ -155,17 +159,17 @@ class ModelSupport(pycam.Plugins.PluginBase):
                 high[index] = mhigh
 
     def update_support_model(self, widget=None):
-        old_support_models = self.core.get("current_support_models")
+        old_support_model_objects = self.core.get("current_support_models")
         selected_models = self.core.get("models").get_selected()
         grid_type = self.core.get("support_model_type")
-        new_support_models = []
+        new_support_model_objects = []
         if (grid_type == "none") or (not selected_models):
-            new_support_models = []
+            new_support_model_objects = []
         else:
             # update the support model
-            self.core.call_chain("get_support_models", selected_models, new_support_models)
-        if old_support_models != new_support_models:
-            self.core.set("current_support_models", new_support_models)
+            self.core.call_chain("get_support_models", selected_models, new_support_model_objects)
+        if old_support_model_objects != new_support_model_objects:
+            self.core.set("current_support_models", new_support_model_objects)
             self.core.emit_event("visual-item-updated")
         # show/hide controls
         self._update_widgets()
diff --git a/pycam/Plugins/ModelSupportDistributed.py b/pycam/Plugins/ModelSupportDistributed.py
index 1e39801..9d937d4 100644
--- a/pycam/Plugins/ModelSupportDistributed.py
+++ b/pycam/Plugins/ModelSupportDistributed.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,6 +19,8 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 
 import pycam.Plugins
+from pycam.workspace import DistributionStrategy, SupportBridgesLayout, SourceType
+import pycam.workspace.data_models
 
 
 class ModelSupportDistributed(pycam.Plugins.PluginBase):
@@ -81,20 +82,30 @@ class ModelSupportDistributed(pycam.Plugins.PluginBase):
         grid_type = self.core.get("support_model_type")
         if grid_type in ("distributed_edges", "distributed_corners"):
             s = self.core
-            while models:
-                model = models.pop(0)
-                if (model.model
+            for model in models:
+                if (model.get_model()
                         and (s.get("support_grid_thickness") > 0)
                         and (s.get("support_grid_height") > 0)
                         and (s.get("support_grid_average_distance") > 0)
                         and (s.get("support_grid_minimum_bridges") > 0)):
-                    # get the minimum z value of the bounding box
-                    minz = model.model.minz
-                    corner_start = (grid_type == "distributed_corners")
-                    support_model = pycam.Toolpath.SupportGrid.get_support_distributed(
-                        model.model, minz, s.get("support_grid_average_distance"),
-                        s.get("support_grid_minimum_bridges"), s.get("support_grid_thickness"),
-                        s.get("support_grid_height"), s.get("support_grid_length"),
-                        start_at_corners=corner_start)
-                    if support_model:
-                        support_models.append(support_model)
+                    if grid_type == "distributed_corners":
+                        distribution = DistributionStrategy.CORNERS
+                    else:
+                        distribution = DistributionStrategy.EVENLY
+                    model_definition = {
+                        "source": {
+                            "type": SourceType.SUPPORT_BRIDGES,
+                            "layout": SupportBridgesLayout.DISTRIBUTED,
+                            "models": tuple(model.get_id() for model in models),
+                            "average_distance": s.get("support_grid_average_distance"),
+                            "shape": {"height": s.get("support_grid_height"),
+                                      "width": s.get("support_grid_thickness"),
+                                      "length": s.get("support_grid_length")},
+                            "minimum_count": s.get("support_grid_minimum_bridges"),
+                            "distribution": distribution,
+                        }
+                    }
+                    support_models.append(pycam.workspace.data_models.Model(
+                        "support", model_definition, add_to_collection=False))
+            # all models are processed -> wipe the input list
+            models.clear()
diff --git a/pycam/Plugins/ModelSupportGrid.py b/pycam/Plugins/ModelSupportGrid.py
index 367a1c9..4c371f0 100644
--- a/pycam/Plugins/ModelSupportGrid.py
+++ b/pycam/Plugins/ModelSupportGrid.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -22,6 +21,8 @@ from pycam.Geometry import Box3D, Point3D
 import pycam.Geometry.Model
 import pycam.Plugins
 import pycam.Toolpath.SupportGrid
+from pycam.workspace import SupportBridgesLayout, SourceType
+import pycam.workspace.data_models
 
 
 class ModelSupportGrid(pycam.Plugins.PluginBase):
@@ -31,7 +32,7 @@ class ModelSupportGrid(pycam.Plugins.PluginBase):
     CATEGORIES = ["Model", "Support bridges"]
 
     def setup(self):
-        if self.gui and self._gtk:
+        if self.gui:
             grid_box = self.gui.get_object("SupportModelGridBox")
             grid_box.unparent()
             self.core.register_ui("support_model_type_selector", "Grid", "grid", weight=-10)
@@ -40,6 +41,7 @@ class ModelSupportGrid(pycam.Plugins.PluginBase):
                 self.core.emit_event("support-model-changed")
             self._gtk_handlers = []
             # support grid
+            # TODO: remove these adjustments
             self.grid_adjustments_x = []
             self.grid_adjustments_y = []
             self.grid_adjustment_axis_x_last = True
@@ -86,7 +88,8 @@ class ModelSupportGrid(pycam.Plugins.PluginBase):
             self.grid_adjustment_value = self.gui.get_object("SupportGridPositionManualAdjustment")
             self.grid_adjustment_value_control = self.gui.get_object(
                 "SupportGridPositionManualShiftControl")
-            self.grid_adjustment_value_control.set_update_policy(self._gtk.UPDATE_DISCONTINUOUS)
+            # FIXME
+            # self.grid_adjustment_value_control.set_update_policy(self._gtk.UPDATE_DISCONTINUOUS)
             self._gtk_handlers.extend((
                 (self.grid_adjustment_value_control, "move-slider",
                  self.update_support_grid_manual_adjust),
@@ -137,7 +140,6 @@ class ModelSupportGrid(pycam.Plugins.PluginBase):
         if (grid_type == "grid") and models:
             # we create exactly one support model for all input models
             s = self.core
-            support_grid = None
             box = self._get_bounds(models)
             if (box is not None
                     and (s.get("support_grid_thickness") > 0)
@@ -148,20 +150,26 @@ class ModelSupportGrid(pycam.Plugins.PluginBase):
                     and ((s.get("support_grid_distance_y") == 0)
                          or (s.get("support_grid_distance_y") > s.get("support_grid_thickness")))
                     and (s.get("support_grid_height") > 0)):
-                support_grid = pycam.Toolpath.SupportGrid.get_support_grid(
-                    box.lower.x, box.upper.x, box.lower.y, box.upper.y, box.lower.z,
-                    s.get("support_grid_distance_x"),
-                    s.get("support_grid_distance_y"),
-                    s.get("support_grid_thickness"),
-                    s.get("support_grid_height"),
-                    offset_x=s.get("support_grid_offset_x"),
-                    offset_y=s.get("support_grid_offset_y"),
-                    adjustments_x=self.grid_adjustments_x,
-                    adjustments_y=self.grid_adjustments_y)
+                # TODO: allow explicit configuration of bridge length
+                bridge_length = max(s.get("support_grid_thickness"), s.get("support_grid_height"))
+                model_definition = {
+                    "source": {
+                        "type": SourceType.SUPPORT_BRIDGES,
+                        "layout": SupportBridgesLayout.GRID,
+                        "models": tuple(model.get_id() for model in models),
+                        "grid": {"distances": {"x": s.get("support_grid_distance_x"),
+                                               "y": s.get("support_grid_distance_y")},
+                                 "offsets": {"x": [s.get("support_grid_offset_x")],
+                                             "y": [s.get("support_grid_offset_y")]}},
+                        "shape": {"height": s.get("support_grid_height"),
+                                  "width": s.get("support_grid_thickness"),
+                                  "length": bridge_length},
+                    }
+                }
+                support_models.append(pycam.workspace.data_models.Model(
+                    "support", model_definition, add_to_collection=False))
             # all models are processed -> wipe the input list
-            while models:
-                models.pop()
-            support_models.append(support_grid)
+            models.clear()
 
     def update_support_controls(self, widget=None):
         grid_type = self.core.get("support_model_type")
@@ -275,7 +283,7 @@ class ModelSupportGrid(pycam.Plugins.PluginBase):
     def _get_bounds(self, models=None):
         if not models:
             models = self.core.get("models").get_selected()
-        models = [m.model for m in models]
+        models = [m.get_model() for m in models]
         box = pycam.Geometry.Model.get_combined_bounds(models)
         if box is None:
             return None
diff --git a/pycam/Plugins/ModelSwapAxes.py b/pycam/Plugins/ModelSwapAxes.py
index ecdb8a7..5532508 100644
--- a/pycam/Plugins/ModelSwapAxes.py
+++ b/pycam/Plugins/ModelSwapAxes.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -58,18 +57,13 @@ class ModelSwapAxes(pycam.Plugins.PluginBase):
         models = self.core.get("models").get_selected()
         if not models:
             return
-        self.core.emit_event("model-change-before")
-        for axes, template in (("XY", "x_swap_y"), ("XZ", "x_swap_z"), ("YZ", "y_swap_z")):
+        for axes, matrix in (("XY", [[0, 1, 0], [1, 0, 0], [0, 0, 1]]),
+                             ("XZ", [[0, 0, 1], [0, 1, 0], [1, 0, 0]]),
+                             ("YZ", [[1, 0, 0], [0, 0, 1], [0, 1, 0]])):
             if self.gui.get_object("SwapAxes%s" % axes).get_active():
                 break
         else:
             assert False, "No axis selected"
-        progress = self.core.get("progress")
-        progress.update(text="Swap axes of model")
-        progress.disable_cancel()
-        progress.set_multiple(len(models), "Model")
         for model in models:
-            model.model.transform_by_template(template, callback=progress.update)
-            progress.update_multiple()
-        progress.finish()
-        self.core.emit_event("model-change-after")
+            model.extend_value("transformations",
+                               [{"action": "multiply_matrix", "matrix": matrix}])
diff --git a/pycam/Plugins/Models.py b/pycam/Plugins/Models.py
index a7decc7..4ab71a8 100644
--- a/pycam/Plugins/Models.py
+++ b/pycam/Plugins/Models.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,8 +17,12 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+import copy
+import random
+
+from pycam.Flow.history import merge_history_and_block_events, rollback_history_on_failure
 import pycam.Plugins
-from pycam.Utils import get_non_conflicting_name
+import pycam.workspace.data_models
 
 
 _GTK_COLOR_MAX = 65535.0
@@ -31,9 +34,10 @@ class Models(pycam.Plugins.ListPluginBase):
     CATEGORIES = ["Model"]
     ICONS = {"visible": "visible.svg", "hidden": "visible_off.svg"}
     FALLBACK_COLOR = {"red": 0.5, "green": 0.5, "blue": 1.0, "alpha": 1.0}
+    COLLECTION_ITEM_TYPE = pycam.workspace.data_models.Model
 
     def setup(self):
-        if self.gui and self._gtk:
+        if self.gui:
             self.model_frame = self.gui.get_object("ModelBox")
             self.model_frame.unparent()
             self.core.register_ui("main", "Models", self.model_frame, weight=-50)
@@ -59,30 +63,32 @@ class Models(pycam.Plugins.ListPluginBase):
             self._gtk_handlers = []
             self._gtk_handlers.extend((
                 (self.gui.get_object("ModelColorButton"), "color-set",
-                 self._set_colors_of_selected_models),
-                (self._modelview, "row-activated", self._toggle_visibility),
-                (self.gui.get_object("NameCell"), "edited", self._edit_model_name)))
+                 self._store_colors_of_selected_models),
+                (self._modelview, "row-activated", self.toggle_item_visibility),
+                (self.gui.get_object("NameCell"), "edited", self.edit_item_name)))
             self._treemodel = self.gui.get_object("ModelList")
             self._treemodel.clear()
             selection = self._modelview.get_selection()
-            selection.set_mode(self._gtk.SELECTION_MULTIPLE)
+            selection.set_mode(self._gtk.SelectionMode.MULTIPLE)
             self._gtk_handlers.append((selection, "changed", "model-selection-changed"))
+            # define cell renderers
+            self.gui.get_object("NameColumn").set_cell_data_func(
+                self.gui.get_object("NameCell"), self.render_item_name)
+            self.gui.get_object("VisibleColumn").set_cell_data_func(
+                self.gui.get_object("VisibleSymbol"), self.render_item_visible_state)
             self._event_handlers = (
-                ("model-selection-changed", self._get_colors_of_selected_models),
-                ("model-list-changed", self._trigger_table_update))
+                ("model-selection-changed", self._apply_colors_of_selected_models),
+                ("model-list-changed", self.force_gtk_modelview_refresh))
             self.register_gtk_handlers(self._gtk_handlers)
             self.register_event_handlers(self._event_handlers)
-            self._get_colors_of_selected_models()
+            self._apply_colors_of_selected_models()
             # update the model list
             self.core.emit_event("model-list-changed")
-        self.core.register_namespace("models", pycam.Plugins.get_filter(self))
         self.core.set("models", self)
-        self.register_state_item("models", self)
         return True
 
     def teardown(self):
         self.clear_state_items()
-        self.core.unregister_namespace("models")
         if self.gui and self._gtk:
             self.core.unregister_ui_section("model_handling")
             self.core.unregister_ui("main", self.gui.get_object("ModelBox"))
@@ -90,93 +96,72 @@ class Models(pycam.Plugins.ListPluginBase):
             self.unregister_gtk_handlers(self._gtk_handlers)
             self.unregister_event_handlers(self._event_handlers)
         self.core.set("models", None)
-        while len(self) > 0:
-            self.pop()
+        self.clear()
         return True
 
-    def _get_colors_of_selected_models(self, widget=None):
+    def _get_model_gdk_color(self, color_dict):
+        return self._gdk.Color(red=int(color_dict["red"] * _GTK_COLOR_MAX),
+                               green=int(color_dict["green"] * _GTK_COLOR_MAX),
+                               blue=int(color_dict["blue"] * _GTK_COLOR_MAX))
+
+    def _apply_model_color_to_button(self, model, color_button):
+        color = model.get_application_value("color")
+        if color is not None:
+            color_button.set_color(self._get_model_gdk_color(color))
+            color_button.set_alpha(int(color["alpha"] * _GTK_COLOR_MAX))
+
+    def _apply_colors_of_selected_models(self, widget=None):
         color_button = self.gui.get_object("ModelColorButton")
         models = self.get_selected()
-        color_button.set_sensitive(bool(models))
+        color_button.set_sensitive(len(models) > 0)
         if models:
-            # use the color of the first model
-            col = models[0]["color"]
-            color_button.set_color(self._gtk.gdk.Color(
-                red=int(col["red"] * _GTK_COLOR_MAX),
-                green=int(col["green"] * _GTK_COLOR_MAX),
-                blue=int(col["blue"] * _GTK_COLOR_MAX)))
-            color_button.set_alpha(int(col["alpha"] * _GTK_COLOR_MAX))
-
-    def _set_colors_of_selected_models(self, widget=None):
-        color_button = self.gui.get_object("ModelColorButton")
-        color = color_button.get_color()
-        models = self.get_selected()
-        for model in models:
-            model["color"] = {"red": color.red / _GTK_COLOR_MAX,
-                              "green": color.green / _GTK_COLOR_MAX,
-                              "blue": color.blue / _GTK_COLOR_MAX,
-                              "alpha": color_button.get_alpha() / _GTK_COLOR_MAX}
-        self.core.emit_event("visual-item-updated")
-
-    def _trigger_table_update(self):
-        self.gui.get_object("NameColumn").set_cell_data_func(
-            self.gui.get_object("NameCell"), self._visualize_model_name)
-        self.gui.get_object("VisibleColumn").set_cell_data_func(
-            self.gui.get_object("VisibleSymbol"), self._visualize_visible_state)
+            # use the color of the first model, if it exists
+            self._apply_model_color_to_button(models[0], color_button)
 
-    def _edit_model_name(self, cell, path, new_text):
-        model = self.get_by_path(path)
-        if model and (new_text != model["name"]) and new_text:
-            model["name"] = new_text
-            self.core.emit_event("model-list-changed")
-
-    def _visualize_model_name(self, column, cell, model, m_iter):
-        model_obj = self.get_by_path(model.get_path(m_iter))
-        cell.set_property("text", model_obj["name"])
-
-    def _visualize_visible_state(self, column, cell, model, m_iter):
-        model_dict = self.get_by_path(model.get_path(m_iter))
-        visible = model_dict["visible"]
-        if visible:
-            cell.set_property("pixbuf", self.ICONS["visible"])
-        else:
-            cell.set_property("pixbuf", self.ICONS["hidden"])
-        color = model_dict["color"]
-        cell.set_property("cell-background-gdk", self._gtk.gdk.Color(
-            red=int(color["red"] * _GTK_COLOR_MAX),
-            green=int(color["green"] * _GTK_COLOR_MAX),
-            blue=int(color["blue"] * _GTK_COLOR_MAX)))
-
-    def _toggle_visibility(self, treeview, path, clicked_column):
-        model = self.get_by_path(path)
-        model["visible"] = not model["visible"]
+    def _store_colors_of_selected_models(self, widget=None):
+        color_button = self.gui.get_object("ModelColorButton")
+        color = self.gui.get_object("ModelColorButton").get_color()
+        for model in self.get_selected():
+            model.set_application_value("color", {
+                "red": color.red / _GTK_COLOR_MAX,
+                "green": color.green / _GTK_COLOR_MAX,
+                "blue": color.blue / _GTK_COLOR_MAX,
+                "alpha": color_button.get_alpha() / _GTK_COLOR_MAX})
         self.core.emit_event("visual-item-updated")
 
-    def get_visible(self):
-        return [model for model in self if model["visible"]]
-
-    def get_by_uuid(self, uuid):
-        for model in self:
-            if model["uuid"] == uuid:
-                return model
-        return None
-
-    def add_model(self, model, name=None, name_template="Model #%d", color=None):
-        model_dict = ModelEntity(model)
-        if not name:
-            name = get_non_conflicting_name(name_template, [m["name"] for m in self])
-        model_dict["name"] = name
+    def render_visible_state(self, column, cell, model, m_iter, data):
+        item, cell = super().render_visible_state(column, cell, model, m_iter, data)
+        color = self._get_or_create_model_application_color(item)
+        if color is not None:
+            cell.set_property("cell-background-gdk", self._get_model_gdk_color(color))
+
+    def _get_or_create_model_application_color(self, model):
+        color = model.get_application_value("color")
+        if color is None:
+            # TODO: use a proper palette instead of random values
+            color = {"red": random.random(),
+                     "green": random.random(),
+                     "blue": random.random(),
+                     "alpha": 0.8}
+            model.set_application_value("color", color)
+        return color
+
+    def add_model(self, model_params, name=None, color=None, name_template="Model #%d"):
+        """
+
+        @param model_params: a dictionary describing the model, e.g.:
+            {"source": {"type": "object", "data": FOO}}
+        """
+        self.log.info("Adding new model: %s", name)
         if not color:
             color = self.core.get("color_model")
         if not color:
             color = self.FALLBACK_COLOR.copy()
-        model_dict["color"] = color
-        model_dict["visible"] = True
-        self.append(model_dict)
-
-
-class ModelEntity(pycam.Plugins.ObjectWithAttributes):
-
-    def __init__(self, model):
-        super(ModelEntity, self).__init__("model")
-        self.model = model
+        if name is None:
+            name = self.get_non_conflicting_name(name_template)
+        with rollback_history_on_failure(self.core):
+            with merge_history_and_block_events(self.core):
+                new_model = pycam.workspace.data_models.Model(None, copy.deepcopy(model_params))
+                new_model.set_application_value("name", name)
+                new_model.set_application_value("color", color)
+                new_model.set_application_value("visible", True)
diff --git a/pycam/Plugins/OpenGLViewAxes.py b/pycam/Plugins/OpenGLViewAxes.py
index 97ac6aa..507ec32 100644
--- a/pycam/Plugins/OpenGLViewAxes.py
+++ b/pycam/Plugins/OpenGLViewAxes.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -28,8 +27,6 @@ class OpenGLViewAxes(pycam.Plugins.PluginBase):
     CATEGORIES = ["Visualization", "OpenGL"]
 
     def setup(self):
-        import OpenGL.GL
-        self._GL = OpenGL.GL
         self.core.register_event("visualize-items", self.draw_axes)
         self.core.get("register_display_item")("show_axes", "Show Coordinate System", 50)
         self.core.emit_event("visual-item-updated")
diff --git a/pycam/Plugins/OpenGLViewBounds.py b/pycam/Plugins/OpenGLViewBounds.py
index 7f92b4d..21c138b 100644
--- a/pycam/Plugins/OpenGLViewBounds.py
+++ b/pycam/Plugins/OpenGLViewBounds.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -27,17 +26,19 @@ class OpenGLViewBounds(pycam.Plugins.PluginBase):
     CATEGORIES = ["Bounds", "Visualization", "OpenGL"]
 
     def setup(self):
-        import OpenGL.GL
-        self._GL = OpenGL.GL
+        self._event_handlers = []
         self.core.get("register_color")("color_bounding_box", "Bounding box", 40)
         self.core.get("register_display_item")("show_bounding_box", "Show Bounding Box", 40)
         self.core.register_chain("get_draw_dimension", self.get_draw_dimension)
-        self.core.register_event("visualize-items", self.draw_bounds)
+        self._event_handlers.extend((("visualize-items", self.draw_bounds),
+                                     ("bounds-list-changed", "visual-item-updated"),
+                                     ("bounds-changed", "visual-item-updated")))
+        self.register_event_handlers(self._event_handlers)
         self.core.emit_event("visual-item-updated")
         return True
 
     def teardown(self):
-        self.core.unregister_event("visualize-items", self.draw_bounds)
+        self.unregister_event_handlers(self._event_handlers)
         self.core.unregister_chain("get_draw_dimension", self.get_draw_dimension)
         self.core.get("unregister_color")("color_bounding_box")
         self.core.get("unregister_display_item")("show_bounding_box")
diff --git a/pycam/Plugins/OpenGLViewDimension.py b/pycam/Plugins/OpenGLViewDimension.py
index e577509..db66a68 100644
--- a/pycam/Plugins/OpenGLViewDimension.py
+++ b/pycam/Plugins/OpenGLViewDimension.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -31,27 +30,9 @@ class OpenGLViewDimension(pycam.Plugins.PluginBase):
 
     def setup(self):
         if self.gui:
-            import pango
             self.core.register_ui("opengl_window", "Dimension",
                                   self.gui.get_object("DimensionTable"), weight=20)
             self.core.get("register_display_item")("show_dimensions", "Show Dimensions", 60)
-            # Color the dimension value according to the axes.
-            # For "y" axis: 100% green is too bright on light background - we
-            # reduce it a bit.
-            for color, names in (
-                    (pango.AttrForeground(65535, 0, 0, 0, 100),
-                     ("model_dim_x_label", "model_dim_x", "ModelCornerXMax", "ModelCornerXMin",
-                      "ModelCornerXSpaces")),
-                    (pango.AttrForeground(0, 50000, 0, 0, 100),
-                     ("model_dim_y_label", "model_dim_y", "ModelCornerYMax", "ModelCornerYMin",
-                      "ModelCornerYSpaces")),
-                    (pango.AttrForeground(0, 0, 65535, 0, 100),
-                     ("model_dim_z_label", "model_dim_z", "ModelCornerZMax", "ModelCornerZMin",
-                      "ModelCornerZSpaces"))):
-                attributes = pango.AttrList()
-                attributes.insert(color)
-                for name in names:
-                    self.gui.get_object(name).set_attributes(attributes)
             self._event_handlers = (
                 ("model-change-after", self.update_model_dimensions),
                 ("visual-item-updated", self.update_model_dimensions),
@@ -67,7 +48,7 @@ class OpenGLViewDimension(pycam.Plugins.PluginBase):
 
     def update_model_dimensions(self, widget=None):
         dimension_bar = self.gui.get_object("DimensionTable")
-        models = [m.model for m in self.core.get("models").get_visible()]
+        models = [m.get_model() for m in self.core.get("models").get_visible()]
         model_box = pycam.Geometry.Model.get_combined_bounds(models)
         if model_box is None:
             model_box = Box3D(Point3D(0, 0, 0), Point3D(0, 0, 0))
diff --git a/pycam/Plugins/OpenGLViewGrid.py b/pycam/Plugins/OpenGLViewGrid.py
index 7929f33..afab56f 100644
--- a/pycam/Plugins/OpenGLViewGrid.py
+++ b/pycam/Plugins/OpenGLViewGrid.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -36,8 +35,6 @@ class OpenGLViewGrid(pycam.Plugins.PluginBase):
             self.box = self.gui.get_object("GridSizeBox")
             self.core.register_ui("opengl_window", "Grid", self.box, weight=30)
             self.core.register_event("visual-item-updated", self._update_widget_state)
-        import OpenGL.GL
-        self._GL = OpenGL.GL
         self.core.register_event("visualize-items", self.draw_grid)
         self.core.get("register_display_item")("show_grid", "Show Base Grid", 80)
         self.core.get("register_color")("color_grid", "Base Grid", 80)
diff --git a/pycam/Plugins/OpenGLViewModel.py b/pycam/Plugins/OpenGLViewModel.py
index 978de97..c5ab65e 100644
--- a/pycam/Plugins/OpenGLViewModel.py
+++ b/pycam/Plugins/OpenGLViewModel.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,8 +17,9 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
-import pycam.Plugins
+from pycam.errors import InvalidDataError
 from pycam.Geometry.PointUtils import padd, pdot, pmul, pnormalized
+import pycam.Plugins
 
 
 GTK_COLOR_MAX = 65535.0
@@ -31,8 +31,6 @@ class OpenGLViewModel(pycam.Plugins.PluginBase):
     CATEGORIES = ["Model", "Visualization", "OpenGL"]
 
     def setup(self):
-        import OpenGL.GL
-        self._GL = OpenGL.GL
         self._event_handlers = (("visualize-items", self.draw_model),
                                 ("model-changed", "visual-item-updated"),
                                 ("model-list-changed", "visual-item-updated"))
@@ -64,22 +62,29 @@ class OpenGLViewModel(pycam.Plugins.PluginBase):
 
     def get_draw_dimension(self, low, high):
         if self._is_visible():
-            model_box = pycam.Geometry.Model.get_combined_bounds(
-                [m.model for m in self.core.get("models").get_visible()])
-            if model_box is None:
-                return
-            for index, (mlow, mhigh) in enumerate(zip(model_box.lower, model_box.upper)):
-                if (low[index] is None) or (mlow < low[index]):
-                    low[index] = mlow
-                if (high[index] is None) or (mhigh > high[index]):
-                    high[index] = mhigh
+            for model_dict in self.core.get("models").get_visible():
+                try:
+                    model_box = model_dict.get_model().get_bounds().get_bounds()
+                except InvalidDataError as exc:
+                    self.log.warning("Failed to visualize model: %s", exc)
+                    continue
+                for index, (mlow, mhigh) in enumerate(zip(model_box.lower, model_box.upper)):
+                    if (low[index] is None) or ((mlow is not None) and (mlow < low[index])):
+                        low[index] = mlow
+                    if (high[index] is None) or ((mhigh is not None) and (mhigh > high[index])):
+                        high[index] = mhigh
 
     def draw_model(self):
         GL = self._GL
         if self._is_visible():
+            fallback_color = self.core.get("models").FALLBACK_COLOR
             for model_dict in self.core.get("models").get_visible():
-                model = model_dict.model
-                col = model_dict["color"]
+                try:
+                    model = model_dict.get_model()
+                except InvalidDataError as exc:
+                    self.log.warning("Failed to visualize model: %s", exc)
+                    continue
+                col = model_dict.get_application_value("color", default=fallback_color)
                 color = (col["red"], col["green"], col["blue"], col["alpha"])
                 GL.glColor4f(*color)
                 # reset the material color
@@ -121,8 +126,6 @@ class OpenGLViewModelTriangle(pycam.Plugins.PluginBase):
     CATEGORIES = ["Model", "Visualization", "OpenGL"]
 
     def setup(self):
-        import OpenGL.GL
-        self._GL = OpenGL.GL
         self.core.register_chain("draw_models", self.draw_triangle_model, 10)
         return True
 
@@ -184,8 +187,8 @@ class OpenGLViewModelGeneric(pycam.Plugins.PluginBase):
         for index, model in enumerate(models):
             for item in next(model):
                 # ignore invisible things like the normal of a ContourModel
-                if hasattr(item, "to_OpenGL"):
-                    item.to_OpenGL(show_directions=self.core.get("show_directions"))
+                if hasattr(item, "to_opengl"):
+                    item.to_opengl(show_directions=self.core.get("show_directions"))
             removal_list.append(index)
         removal_list.reverse()
         for index in removal_list:
diff --git a/pycam/Plugins/OpenGLViewSupportModelPreview.py b/pycam/Plugins/OpenGLViewSupportModelPreview.py
index 680e854..38783d7 100644
--- a/pycam/Plugins/OpenGLViewSupportModelPreview.py
+++ b/pycam/Plugins/OpenGLViewSupportModelPreview.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -19,6 +18,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
 import pycam.Plugins
+import pycam.workspace.data_models
 
 
 class OpenGLViewSupportModelPreview(pycam.Plugins.PluginBase):
@@ -27,9 +27,6 @@ class OpenGLViewSupportModelPreview(pycam.Plugins.PluginBase):
     CATEGORIES = ["Visualization", "OpenGL", "Support bridges"]
 
     def setup(self):
-        import OpenGL.GL
-        import OpenGL.GLUT
-        self._GL = OpenGL.GL
         self.core.register_event("visualize-items", self.draw_support_preview)
         self.core.get("register_display_item")("show_support_preview",
                                                "Show Support Model Preview", 30)
@@ -46,7 +43,11 @@ class OpenGLViewSupportModelPreview(pycam.Plugins.PluginBase):
     def draw_support_preview(self):
         if not self.core.get("show_support_preview"):
             return
-        models = self.core.get("current_support_models")[:]
+        models = []
+        for model_object in (self.core.get("current_support_models") or []):
+            model = model_object.get_model()
+            if model:
+                models.append(model)
         if not models:
             return
         GL = self._GL
diff --git a/pycam/Plugins/OpenGLViewTool.py b/pycam/Plugins/OpenGLViewTool.py
index f3712dd..76037c3 100644
--- a/pycam/Plugins/OpenGLViewTool.py
+++ b/pycam/Plugins/OpenGLViewTool.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2017 Lars Kruse <devel@sumpfralle.de>
 
@@ -27,8 +26,6 @@ class OpenGLViewTool(pycam.Plugins.PluginBase):
     CATEGORIES = ["Visualization", "OpenGL", "Tool"]
 
     def setup(self):
-        import OpenGL.GL
-        self._GL = OpenGL.GL
         self.core.register_event("visualize-items", self.draw_tool)
         self.core.get("register_display_item")("show_tool", "Show Tool", 70)
         self.core.get("register_color")("color_tool", "Tool", 50)
@@ -49,4 +46,4 @@ class OpenGLViewTool(pycam.Plugins.PluginBase):
                 GL = self._GL
                 GL.glColor4f(color["red"], color["green"], color["blue"], color["alpha"])
                 GL.glFinish()
-                tool.to_OpenGL()
+                tool.to_opengl()
diff --git a/pycam/Plugins/OpenGLViewToolpath.py b/pycam/Plugins/OpenGLViewToolpath.py
index b000dce..1918b98 100644
--- a/pycam/Plugins/OpenGLViewToolpath.py
+++ b/pycam/Plugins/OpenGLViewToolpath.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -29,20 +28,22 @@ class OpenGLViewToolpath(pycam.Plugins.PluginBase):
     CATEGORIES = ["Toolpath", "Visualization", "OpenGL"]
 
     def setup(self):
-        import OpenGL.GL
-        self._GL = OpenGL.GL
-        self.core.register_event("visualize-items", self.draw_toolpaths)
         self.core.get("register_color")("color_toolpath_cut", "Toolpath cut", 60)
         self.core.get("register_color")("color_toolpath_return", "Toolpath rapid", 70)
         self.core.register_chain("get_draw_dimension", self.get_draw_dimension)
         self.core.get("register_display_item")("show_toolpath", "Show Toolpath", 30)
         self.core.set("draw_toolpath_moves_func", self._draw_toolpath_moves)
+        self._event_handlers = (
+            ("toolpath-list-changed", "visual-item-updated"),
+            ("toolpath-changed", "visual-item-updated"),
+            ("visualize-items", self.draw_toolpaths))
+        self.register_event_handlers(self._event_handlers)
         self.core.emit_event("visual-item-updated")
         return True
 
     def teardown(self):
         self.core.unregister_chain("get_draw_dimension", self.get_draw_dimension)
-        self.core.unregister_event("visualize-items", self.draw_toolpaths)
+        self.unregister_event_handlers(self._event_handlers)
         self.core.get("unregister_color")("color_toolpath_cut")
         self.core.get("unregister_color")("color_toolpath_return")
         self.core.get("unregister_display_item")("show_toolpath")
@@ -52,16 +53,18 @@ class OpenGLViewToolpath(pycam.Plugins.PluginBase):
     def get_draw_dimension(self, low, high):
         if self._is_visible():
             toolpaths = self.core.get("toolpaths").get_visible()
-            for tp in toolpaths:
-                mlow = tp.minx, tp.miny, tp.minz
-                mhigh = tp.maxx, tp.maxy, tp.maxz
-                if None in mlow or None in mhigh:
-                    continue
-                for index in range(3):
-                    if (low[index] is None) or (mlow[index] < low[index]):
-                        low[index] = mlow[index]
-                    if (high[index] is None) or (mhigh[index] > high[index]):
-                        high[index] = mhigh[index]
+            for toolpath_dict in toolpaths:
+                tp = toolpath_dict.get_toolpath()
+                if tp:
+                    mlow = tp.minx, tp.miny, tp.minz
+                    mhigh = tp.maxx, tp.maxy, tp.maxz
+                    if None in mlow or None in mhigh:
+                        continue
+                    for index in range(3):
+                        if (low[index] is None) or (mlow[index] < low[index]):
+                            low[index] = mlow[index]
+                        if (high[index] is None) or (mhigh[index] > high[index]):
+                            high[index] = mhigh[index]
 
     def _is_visible(self):
         return self.core.get("show_toolpath") \
@@ -71,21 +74,19 @@ class OpenGLViewToolpath(pycam.Plugins.PluginBase):
     def draw_toolpaths(self):
         toolpath_in_progress = self.core.get("toolpath_in_progress")
         if toolpath_in_progress is None and self.core.get("show_toolpath"):
-            # TODO: this is ugly copy'n'paste from pycam.Plugins.ToolpathExport (_export_toolpaths)
-            # KEEP IN SYNC
-            processor = self.core.get("toolpath_processors").get_selected()
-            if not processor:
-                self.log.warn("No toolpath processor selected")
-                return
-            filter_func = processor["func"]
-            filter_params = self.core.get("get_parameter_values")("toolpath_processor")
-            settings_filters = filter_func(filter_params)
-            for toolpath in self.core.get("toolpaths").get_visible():
-                # TODO: enable the VBO code for speedup!
-                # moves = toolpath.get_moves_for_opengl(self.core.get("gcode_safety_height"))
-                # self._draw_toolpath_moves2(moves)
-                moves = toolpath.get_basic_moves(filters=settings_filters)
-                self._draw_toolpath_moves(moves)
+            settings_filters = []
+            # Use the currently selected export settings for an intuitive behaviour.
+            selected_export_settings = self.core.get("export_settings").get_selected()
+            if selected_export_settings:
+                settings_filters.extend(selected_export_settings.get_toolpath_filters())
+            for toolpath_dict in self.core.get("toolpaths").get_visible():
+                toolpath = toolpath_dict.get_toolpath()
+                if toolpath:
+                    # TODO: enable the VBO code for speedup!
+                    # moves = toolpath.get_moves_for_opengl(self.core.get("gcode_safety_height"))
+                    # self._draw_toolpath_moves2(moves)
+                    moves = toolpath.get_basic_moves(filters=settings_filters)
+                    self._draw_toolpath_moves(moves)
         elif toolpath_in_progress is not None:
             if self.core.get("show_simulation") or self.core.get("show_toolpath_progress"):
                 self._draw_toolpath_moves(toolpath_in_progress)
diff --git a/pycam/Plugins/OpenGLWindow.py b/pycam/Plugins/OpenGLWindow.py
index ee8bb3b..0a36bd1 100644
--- a/pycam/Plugins/OpenGLWindow.py
+++ b/pycam/Plugins/OpenGLWindow.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,17 +19,6 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 import math
 
-# careful import
-try:
-    import gtk.gtkgl
-    import OpenGL.GL as GL
-    import OpenGL.GLU as GLU
-    import OpenGL.GLUT as GLUT
-    GL_ENABLED = True
-except (ImportError, RuntimeError):
-    GL_ENABLED = False
-
-
 from pycam.Geometry import number, sqrt
 from pycam.Geometry.PointUtils import pcross, pmul, pnormalized
 import pycam.Geometry.Matrix as Matrix
@@ -56,12 +44,6 @@ VIEWS = {
              "up": (0.0, 0.0, 1.0), "znear": 0.01, "zfar": 10000.0, "fovy": 30.0},
 }
 
-# buttons for rotating, moving and zooming the model view window
-BUTTON_ROTATE = gtk.gdk.BUTTON1_MASK
-BUTTON_MOVE = gtk.gdk.BUTTON2_MASK
-BUTTON_ZOOM = gtk.gdk.BUTTON3_MASK
-BUTTON_RIGHT = 3
-
 # floating point color values are only available since gtk 2.16
 GTK_COLOR_MAX = 65535.0
 
@@ -72,18 +54,32 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
     CATEGORIES = ["Visualization", "OpenGL"]
 
     def setup(self):
-        if not GL_ENABLED:
-            self.log.error("Failed to initialize the interactive 3D model view.\nPlease install "
-                           "'python-gtkglext1' to enable it.")
+        if not self._GL:
+            self.log.error("Failed to initialize the interactive 3D model view.\nPlease verify "
+                           "that all requirements (especially the Python package for 'OpenGL' - "
+                           "e.g. 'python3-opengl') are installed.")
+            return False
+        # test support for GLArea (since GTK v3.16)
+        try:
+            self._gtk.GLArea
+        except AttributeError:
+            self.log.error("Failed to initialize the interactive 3D model view probably due to an "
+                           "outdated version of GTK (required: v3.16).")
             return False
         if self.gui:
+            # buttons for rotating, moving and zooming the model view window
+            self.BUTTON_ROTATE = self._gdk.ModifierType.BUTTON1_MASK
+            self.BUTTON_MOVE = self._gdk.ModifierType.BUTTON2_MASK
+            self.BUTTON_ZOOM = self._gdk.ModifierType.BUTTON3_MASK
+            self.BUTTON_RIGHT = 3
             self.context_menu = self._gtk.Menu()
             self.window = self.gui.get_object("OpenGLWindow")
+            self.window.insert_action_group(self.core.get("gtk_action_group_prefix"),
+                                            self.core.get("gtk_action_group"))
             drag_n_drop_func = self.core.get("configure-drag-drop-func")
             if drag_n_drop_func:
                 drag_n_drop_func(self.window)
             self.initialized = False
-            self.busy = False
             self.is_visible = False
             self._last_view = VIEWS["reset"]
             self._position = [200, 200]
@@ -115,9 +111,9 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
             def add_widget_to_window(item, name):
                 if len(detail_box.get_children()) > 0:
                     sep = self._gtk.HSeparator()
-                    detail_box.pack_start(sep)
+                    detail_box.pack_start(sep, fill=True, expand=True, padding=0)
                     sep.show()
-                detail_box.pack_start(item)
+                detail_box.pack_start(item, fill=True, expand=True, padding=0)
                 item.show()
 
             self.core.register_ui_section("opengl_window", add_widget_to_window, clear_window)
@@ -167,31 +163,31 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
             # key binding
             self._gtk_handlers.append((self.window, "key-press-event", self.key_handler))
             # OpenGL stuff
-            glconfig = self._gtk.gdkgl.Config(mode=(self._gtk.gdkgl.MODE_RGBA
-                                                    | self._gtk.gdkgl.MODE_DEPTH
-                                                    | self._gtk.gdkgl.MODE_DOUBLE))
-            self.area = self._gtk.gtkgl.DrawingArea(glconfig)
+            self.area = self._gtk.GLArea(auto_render=False, has_alpha=True, has_depth_buffer=True)
+            self.area.show()
             # first run; might also be important when doing other fancy
-            # gtk/gdk stuff
-#           self.area.connect_after('realize', self.paint)
             # called when a part of the screen is uncovered
-            self._gtk_handlers.append((self.area, 'expose-event', self.paint))
+            self._gtk_handlers.append((self.area, 'render', self.paint))
             # resize window
-            self._gtk_handlers.append((self.area, 'configure-event', self._resize_window))
+            self._gtk_handlers.append((self.area, "resize", self._resize_window))
             # catch mouse events
-            self.area.set_events((self._gtk.gdk.MOUSE
-                                  | self._gtk.gdk.POINTER_MOTION_HINT_MASK
-                                  | self._gtk.gdk.BUTTON_PRESS_MASK
-                                  | self._gtk.gdk.BUTTON_RELEASE_MASK
-                                  | self._gtk.gdk.SCROLL_MASK))
+            self.area.set_events((self._gdk.InputSource.MOUSE
+                                  | self._gdk.EventMask.POINTER_MOTION_MASK
+                                  | self._gdk.EventMask.BUTTON_PRESS_MASK
+                                  | self._gdk.EventMask.BUTTON_RELEASE_MASK
+                                  | self._gdk.EventMask.SCROLL_MASK))
             self._gtk_handlers.extend((
                 (self.area, "button-press-event", self.mouse_press_handler),
                 (self.area, "motion-notify-event", self.mouse_handler),
                 (self.area, "button-release-event", self.context_menu_handler),
                 (self.area, "scroll-event", self.scroll_handler)))
-            self.gui.get_object("OpenGLBox").pack_end(self.area)
-            self.camera = Camera(self.core, lambda: (self.area.allocation.width,
-                                                     self.area.allocation.height))
+            self.gui.get_object("OpenGLBox").pack_end(self.area, fill=True, expand=True, padding=0)
+
+            def get_area_allocation(self=self):
+                allocation = self.area.get_allocation()
+                return allocation.width, allocation.height
+
+            self.camera = Camera(self.core, get_area_allocation, self._GL, self._GLU)
             self._event_handlers = (("visual-item-updated", self.update_view),
                                     ("visualization-state-changed", self._update_widgets),
                                     ("model-list-changed", self._restore_latest_view))
@@ -241,7 +237,7 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
 
     def update_view(self, widget=None, data=None):
         if self.is_visible:
-            self.paint()
+            self.trigger_rendering()
 
     def _update_widgets(self):
         self.unregister_gtk_handlers(self._gtk_handlers)
@@ -256,27 +252,71 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
         #  - a checkbox for the preferences window
         #  - a tool item for the drop-down list in the 3D window
         #  - a menu item for the context menu in the 3D window
-        action = self._gtk.ToggleAction(name, label, "Show/hide %s" % label, None)
-        action.connect("toggled", lambda widget: self.core.emit_event("visual-item-updated"))
-        checkbox = self._gtk.CheckButton(label)
-        action.connect_proxy(checkbox)
-        tool_item = action.create_tool_item()
-        menu_item = action.create_menu_item()
-        widgets = (checkbox, tool_item, menu_item)
+        # the string value will be interpreted by the callback as the most recently updated widget
+        action_name = ".".join((self.core.get("gtk_action_group_prefix"), name))
+        action = self._gio.SimpleAction.new_stateful(name, self._glib.VariantType.new("s"),
+                                                     self._glib.Variant.new_string("0"))
+        widgets = []
+        for index, item in enumerate((self._gtk.CheckButton(),
+                                      self._gtk.ToggleToolButton(),
+                                      self._gtk.CheckMenuItem())):
+            item.insert_action_group(self.core.get("gtk_action_group_prefix"),
+                                     self.core.get("gtk_action_group"))
+            item.set_label(label)
+            item.set_action_target_value(self._glib.Variant.new_string(str(index)))
+            item.set_action_name(action_name)
+            # The "target value" (the stringified widget index) is used by GTK for guessing the
+            # sensitivity of a control.  This approach differs from ours - we ignore it.
+            item.set_sensitive(True)
+            widgets.append(item)
         self._display_items[name] = {"name": name, "label": label, "weight": weight,
                                      "widgets": widgets, "action": action}
-        self.core.add_item(name, action.get_active, action.set_active)
-        self._rebuild_display_items()
+
+        def synchronize_widgets(action, widget_index_variant, widgets=widgets, is_blocked=[],
+                                name=name):
+            """ copy the state of the most recently changed ("activated") control to the others
+
+            widget_index_variant: GLib.Variant containing the stringified index of the changed
+                widget (0, 1 or 2) - based on the widgets list
+            widgets: the three associated widgets
+            is_blocked: we need to avoid pseudo-recursive calls of this function after every
+                programmatic change of a control
+            """
+            widget_index = int(widget_index_variant.get_string())
+            if not is_blocked:
+                is_blocked.append(True)
+                current_widget = widgets[widget_index]
+                current_value = current_widget.get_active()
+                for index, widget in enumerate(widgets):
+                    if widget_index != index:
+                        if hasattr(widget, "set_active"):
+                            widget.set_active(current_value)
+                        else:
+                            widget.set_state(current_value)
+                    widget.set_sensitive(True)
+                self.core.set(name, current_value)
+                self.core.emit_event("visual-item-updated")
+                is_blocked.clear()
+
+        action.connect("activate", synchronize_widgets)
+        self.core.get("gtk_action_group").add_action(action)
+        self.core.add_item(name, set_func=widgets[0].set_active)
         # add this item to the state handler
-        self.register_state_item("settings/view/items/%s" % name, action.get_active,
-                                 action.set_active)
+        self.register_state_item("settings/view/items/%s" % name,
+                                 widgets[0].get_active, widgets[0].set_active)
+        # synchronize the widgets
+        synchronize_widgets(None, self._glib.Variant.new_string("0"))
+        self._rebuild_display_items()
 
     def unregister_display_item(self, name):
         if name not in self._display_items:
-            self.log.debug("Failed to unregister unknown display item: %s", name)
+            self.log.info("Failed to unregister unknown display item: %s", name)
             return
-        action = self._display_items[name]["action"]
-        self.unregister_state_item(name, action.get_active, action.set_active)
+        first_widget = self._display_items[name]["widgets"][0]
+        self.unregister_state_item("settings/view/items/%s" % name,
+                                   first_widget.get_active, first_widget.set_active)
+        action_name = ".".join((self.core.get("gtk_action_group_prefix"), name))
+        self.core.get("gtk_action_group").remove(action_name)
         del self._display_items[name]
         self._rebuild_display_items()
 
@@ -286,15 +326,16 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
         for parent in pref_box, self.context_menu, toolbar:
             for child in parent.get_children():
                 parent.remove(child)
-        items = self._display_items.values()
+        items = list(self._display_items.values())
         items.sort(key=lambda item: item["weight"])
         for item in items:
-            pref_box.pack_start(item["widgets"][0], expand=False)
+            pref_box.pack_start(item["widgets"][0], expand=True, fill=True, padding=0)
             toolbar.add(item["widgets"][1])
             self.context_menu.add(item["widgets"][2])
-        pref_box.show_all()
-        toolbar.show_all()
-        self.context_menu.show_all()
+        for parent in (pref_box, toolbar, self.context_menu):
+            parent.show_all()
+            parent.insert_action_group(self.core.get("gtk_action_group_prefix"),
+                                       self.core.get("gtk_action_group"))
 
     def register_color_setting(self, name, label, weight=100):
         if name in self._color_settings:
@@ -313,9 +354,9 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
 
         def set_color_wrapper(obj):
             def set_gtk_color_by_dict(color):
-                obj.set_color(self._gtk.gdk.Color(int(color["red"] * GTK_COLOR_MAX),
-                                                  int(color["green"] * GTK_COLOR_MAX),
-                                                  int(color["blue"] * GTK_COLOR_MAX)))
+                obj.set_color(self._gdk.Color(int(color["red"] * GTK_COLOR_MAX),
+                                              int(color["green"] * GTK_COLOR_MAX),
+                                              int(color["blue"] * GTK_COLOR_MAX)))
                 obj.set_alpha(int(color["alpha"] * GTK_COLOR_MAX))
             return set_gtk_color_by_dict
 
@@ -334,7 +375,7 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
             self.log.debug("Failed to unregister unknown color item: %s", name)
             return
         wrappers = self._color_settings[name]["wrappers"]
-        self.unregister_state_item(name, *wrappers)
+        self.unregister_state_item("settings/view/colors/%s" % name, *wrappers)
         del self._color_settings[name]
         self._rebuild_color_settings()
 
@@ -342,15 +383,13 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
         color_table = self.gui.get_object("ColorTable")
         for child in color_table.get_children():
             color_table.remove(child)
-        items = self._color_settings.values()
+        items = list(self._color_settings.values())
         items.sort(key=lambda item: item["weight"])
         for index, item in enumerate(items):
             label = self._gtk.Label("%s:" % item["label"])
             label.set_alignment(0.0, 0.5)
-            color_table.attach(label, 0, 1, index, index + 1, xoptions=self._gtk.FILL,
-                               yoptions=self._gtk.FILL)
-            color_table.attach(item["widget"], 1, 2, index, index + 1, xoptions=self._gtk.FILL,
-                               yoptions=self._gtk.FILL)
+            color_table.attach(label, 0, index, 1, 1)
+            color_table.attach(item["widget"], 1, index, 1, 1)
         color_table.show_all()
 
     def toggle_3d_view(self, widget=None, value=None):
@@ -391,10 +430,10 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
             return
         # define arrow keys and "vi"-like navigation keys
         move_keys_dict = {
-            self._gtk.keysyms.Left: (1, 0),
-            self._gtk.keysyms.Down: (0, -1),
-            self._gtk.keysyms.Up: (0, 1),
-            self._gtk.keysyms.Right: (-1, 0),
+            self._gdk.KEY_Left: (1, 0),
+            self._gdk.KEY_Down: (0, -1),
+            self._gdk.KEY_Up: (0, 1),
+            self._gdk.KEY_Right: (-1, 0),
             ord("h"): (1, 0),
             ord("j"): (0, -1),
             ord("k"): (0, 1),
@@ -409,7 +448,7 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
             names = ["reset", "front", "back", "left", "right", "top", "bottom"]
             index = '1234567'.index(key_string)
             self.rotate_view(view=VIEWS[names[index]])
-            self._paint_ignore_busy()
+            self.trigger_rendering()
         elif key_string in ('i', 'm', 's', 'p'):
             if key_string == 'i':
                 key = "view_light"
@@ -425,18 +464,18 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
             self.core.set(key, not self.core.get(key))
             # re-init gl settings
             self.glsetup()
-            self.paint()
+            self.trigger_rendering()
         elif key_string in ("+", "-"):
             self._last_view = None
             if key_string == "+":
                 self.camera.zoom_in()
             else:
                 self.camera.zoom_out()
-            self.paint()
+            self.trigger_rendering()
         elif keyval in move_keys_dict.keys():
             self._last_view = None
             move_x, move_y = move_keys_dict[keyval]
-            if get_state() & self._gtk.gdk.SHIFT_MASK:
+            if get_state() & self._gdk.ModifierType.SHIFT_MASK:
                 # shift key pressed -> rotation
                 base = 0
                 factor = 10
@@ -445,46 +484,13 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
             else:
                 # no shift key -> moving
                 self.camera.shift_view(x_dist=move_x, y_dist=move_y)
-            self.paint()
+            self.trigger_rendering()
         else:
-            # see dir(gtk.keysyms)
             self.log.debug("Unhandled key pressed: %s (%s)", keyval, get_state())
 
-    def check_busy(func):
-        def check_busy_wrapper(self, *args, **kwargs):
-            if self.busy:
-                return
-            self.busy = True
-            result = func(self, *args, **kwargs)
-            self.busy = False
-            return result
-        return check_busy_wrapper
-
-    def gtkgl_refresh(func):
-        def gtkgl_refresh_wrapper(self, *args, **kwargs):
-            prev_mode = GL.glGetIntegerv(GL.GL_MATRIX_MODE)
-            GL.glMatrixMode(GL.GL_MODELVIEW)
-            # clear the background with the configured color
-            bg_col = self.core.get("color_background")
-            GL.glClearColor(bg_col["red"], bg_col["green"], bg_col["blue"], 0.0)
-            GL.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)
-            result = func(self, *args, **kwargs)
-            self.camera.position_camera()
-            # adjust Light #2
-            v = self.camera.view
-            lightpos = (v["center"][0] + v["distance"][0],
-                        v["center"][1] + v["distance"][1],
-                        v["center"][2] + v["distance"][2])
-            GL.glLightfv(GL.GL_LIGHT1, GL.GL_POSITION, lightpos)
-            # trigger the visualization of all items
-            self.core.emit_event("visualize-items")
-            GL.glMatrixMode(prev_mode)
-            GL.glFlush()
-            self.area.get_gl_drawable().swap_buffers()
-            return result
-        return gtkgl_refresh_wrapper
-
     def glsetup(self, widget=None):
+        GL = self._GL
+        GLUT = self._GLUT
         if not GLUT.glutInit:
             self.log.error("Failed to execute 'GLUT.glutInit': probably you need to install the"
                            "C library providing GLUT functions (e.g. 'freeglut3-dev' or "
@@ -499,7 +505,7 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
         # use vertex normals for smooth rendering
         GL.glShadeModel(GL.GL_SMOOTH)
         bg_col = self.core.get("color_background")
-        GL.glClearColor(bg_col["red"], bg_col["green"], bg_col["blue"], 0.0)
+        GL.glClearColor(bg_col["red"], bg_col["green"], bg_col["blue"], 1.0)
         GL.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT, GL.GL_NICEST)
         GL.glMatrixMode(GL.GL_MODELVIEW)
         # enable blending/transparency (alpha) for colors
@@ -533,7 +539,7 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
         GL.glLoadIdentity()
         GL.glMatrixMode(GL.GL_PROJECTION)
         GL.glLoadIdentity()
-        GL.glViewport(0, 0, self.area.allocation.width, self.area.allocation.height)
+        GL.glViewport(0, 0, self.area.get_allocation().width, self.area.get_allocation().height)
         # lighting
         GL.glLightModeli(GL.GL_LIGHT_MODEL_LOCAL_VIEWER, GL.GL_TRUE)
         # Light #1
@@ -578,47 +584,27 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
         # don't close the window
         return True
 
-    def gtkgl_functionwrapper(function):
-        def gtkgl_functionwrapper_function(self, *args, **kwords):
-            gldrawable = self.area.get_gl_drawable()
-            if not gldrawable:
-                return
-            glcontext = self.area.get_gl_context()
-            if not gldrawable.gl_begin(glcontext):
-                return
-            if not self.initialized:
-                self.glsetup()
-                self.initialized = True
-            result = function(self, *args, **kwords)
-            gldrawable.gl_end()
-            return result
-        return gtkgl_functionwrapper_function
-
     def _restore_latest_view(self):
         """ this function is called whenever the model list changes
 
         The function will restore the latest selected view - including
         automatic distance adjustment. The latest view is always reset to
         None, if any manual change (e.g. panning via mouse or keyboard)
-        occoured.
+        occurred.
         """
         if self._last_view:
             self.rotate_view(view=self._last_view)
 
-    @check_busy
-    @gtkgl_functionwrapper
     def context_menu_handler(self, widget, event):
-        if (event.button == self.mouse["pressed_button"] == BUTTON_RIGHT) \
-                and self.context_menu \
-                and (event.get_time() - self.mouse["pressed_timestamp"] < 300) \
-                and (abs(event.x - self.mouse["pressed_pos"][0]) < 3) \
-                and (abs(event.y - self.mouse["pressed_pos"][1]) < 3):
+        if ((event.button == self.mouse["pressed_button"] == self.BUTTON_RIGHT)
+                and self.context_menu
+                and (event.get_time() - self.mouse["pressed_timestamp"] < 300)
+                and (abs(event.x - self.mouse["pressed_pos"][0]) < 3)
+                and (abs(event.y - self.mouse["pressed_pos"][1]) < 3)):
             # A quick press/release cycle with the right mouse button
             # -> open the context menu.
-            self.context_menu.popup(None, None, None, event.button, int(event.get_time()))
+            self.context_menu.popup(None, None, None, None, event.button, int(event.get_time()))
 
-    @check_busy
-    @gtkgl_functionwrapper
     def scroll_handler(self, widget, event):
         """ handle events of the scroll wheel
 
@@ -632,33 +618,33 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
         except AttributeError:
             # this should probably never happen
             return
-        control_pressed = modifier_state & self._gtk.gdk.CONTROL_MASK
-        shift_pressed = modifier_state & self._gtk.gdk.SHIFT_MASK
-        if ((event.direction == self._gtk.gdk.SCROLL_RIGHT)
-                or ((event.direction == self._gtk.gdk.SCROLL_UP) and shift_pressed)):
+        control_pressed = modifier_state & self._gdk.ModifierType.CONTROL_MASK
+        shift_pressed = modifier_state & self._gdk.ModifierType.SHIFT_MASK
+        if ((event.direction == self._gdk.ScrollDirection.RIGHT)
+                or ((event.direction == self._gdk.ScrollDirection.UP) and shift_pressed)):
             # horizontal move right
             self.camera.shift_view(x_dist=-1)
-        elif (event.direction == self._gtk.gdk.SCROLL_LEFT) \
-                or ((event.direction == self._gtk.gdk.SCROLL_DOWN) and shift_pressed):
+        elif ((event.direction == self._gdk.ScrollDirection.LEFT)
+                or ((event.direction == self._gdk.ScrollDirection.DOWN) and shift_pressed)):
             # horizontal move left
             self.camera.shift_view(x_dist=1)
-        elif (event.direction == self._gtk.gdk.SCROLL_UP) and control_pressed:
+        elif (event.direction == self._gdk.ScrollDirection.UP) and control_pressed:
             # zoom in
             self.camera.zoom_in()
-        elif event.direction == self._gtk.gdk.SCROLL_UP:
+        elif event.direction == self._gdk.ScrollDirection.UP:
             # vertical move up
             self.camera.shift_view(y_dist=1)
-        elif (event.direction == self._gtk.gdk.SCROLL_DOWN) and control_pressed:
+        elif (event.direction == self._gdk.ScrollDirection.DOWN) and control_pressed:
             # zoom out
             self.camera.zoom_out()
-        elif event.direction == self._gtk.gdk.SCROLL_DOWN:
+        elif event.direction == self._gdk.ScrollDirection.DOWN:
             # vertical move down
             self.camera.shift_view(y_dist=-1)
         else:
             # no interesting event -> no re-painting
             self._last_view = remember_last_view
             return
-        self._paint_ignore_busy()
+        self.trigger_rendering()
 
     def mouse_press_handler(self, widget, event):
         self.mouse["pressed_timestamp"] = event.get_time()
@@ -666,12 +652,12 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
         self.mouse["pressed_pos"] = event.x, event.y
         self.mouse_handler(widget, event)
 
-    @check_busy
-    @gtkgl_functionwrapper
     def mouse_handler(self, widget, event):
         x, y, state = event.x, event.y, event.state
         if self.mouse["button"] is None:
-            if (state & BUTTON_ZOOM) or (state & BUTTON_ROTATE) or (state & BUTTON_MOVE):
+            if ((state & self.BUTTON_ZOOM)
+                    or (state & self.BUTTON_ROTATE)
+                    or (state & self.BUTTON_MOVE)):
                 self.mouse["button"] = state
                 self.mouse["start_pos"] = [x, y]
         else:
@@ -679,7 +665,7 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
             # a decent visualization).
             if event.get_time() - self.mouse["event_timestamp"] < 40:
                 return
-            elif state & self.mouse["button"] & BUTTON_ZOOM:
+            elif state & self.mouse["button"] & self.BUTTON_ZOOM:
                 self._last_view = None
                 # the start button is still active: update the view
                 start_x, start_y = self.mouse["start_pos"]
@@ -694,74 +680,86 @@ class OpenGLWindow(pycam.Plugins.PluginBase):
                 elif scale > 100:
                     scale = 100
                 self.camera.scale_distance(scale)
-                self._paint_ignore_busy()
-            elif (state & self.mouse["button"] & BUTTON_MOVE) \
-                    or (state & self.mouse["button"] & BUTTON_ROTATE):
+                self.trigger_rendering()
+            elif ((state & self.mouse["button"] & self.BUTTON_MOVE)
+                    or (state & self.mouse["button"] & self.BUTTON_ROTATE)):
                 self._last_view = None
                 start_x, start_y = self.mouse["start_pos"]
                 self.mouse["start_pos"] = [x, y]
-                if (state & BUTTON_MOVE):
+                if (state & self.BUTTON_MOVE):
                     # Determine the biggest dimension (x/y/z) for moving the
                     # screen's center in relation to this value.
-                    obj_dim = []
                     low, high = [None, None, None], [None, None, None]
                     self.core.call_chain("get_draw_dimension", low, high)
-                    for index in range(3):
-                        if high[index] is None:
-                            high[index] = 10
-                        if low[index] is None:
-                            low[index] = 0
-                        obj_dim.append(high[index] - low[index])
-                    max_dim = max(obj_dim)
+                    # use zero as fallback for undefined axes (None)
+                    max_dim = max((v_high or 0) - (v_low or 0) for v_high, v_low in zip(high, low))
+                    if max_dim == 0:
+                        # some arbitrary value if there are no visible objects
+                        max_dim = 10
                     self.camera.move_camera_by_screen(x - start_x, y - start_y, max_dim)
                 else:
                     # BUTTON_ROTATE
                     # update the camera position according to the mouse movement
                     self.camera.rotate_camera_by_screen(start_x, start_y, x, y)
-                self._paint_ignore_busy()
+                self.trigger_rendering()
             else:
                 # button was released
                 self.mouse["button"] = None
-                self._paint_ignore_busy()
+                self.trigger_rendering()
         self.mouse["event_timestamp"] = event.get_time()
 
-    @check_busy
-    @gtkgl_functionwrapper
-    @gtkgl_refresh
     def rotate_view(self, widget=None, view=None):
         if view:
             self._last_view = view.copy()
         self.camera.set_view(view)
+        self.trigger_rendering()
 
     def reset_view(self):
         self.rotate_view(view=None)
+        self.trigger_rendering()
 
-    @check_busy
-    @gtkgl_functionwrapper
-    @gtkgl_refresh
-    def _resize_window(self, widget, data=None):
-        GL.glViewport(0, 0, self.area.allocation.width, self.area.allocation.height)
+    def _resize_window(self, widget, width, height, data=None):
+        self.trigger_rendering()
 
-    @check_busy
-    @gtkgl_functionwrapper
-    @gtkgl_refresh
     def paint(self, widget=None, data=None):
-        # the decorators take care for redraw
-        pass
+        if not self.initialized:
+            self.glsetup()
+            self.initialized = True
+        # draw the items
+        GL = self._GL
+        prev_mode = GL.glGetIntegerv(GL.GL_MATRIX_MODE)
+        GL.glMatrixMode(GL.GL_MODELVIEW)
+        # clear the background with the configured color
+        bg_col = self.core.get("color_background")
+        GL.glClearColor(bg_col["red"], bg_col["green"], bg_col["blue"], 1.0)
+        GL.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT)
+        self.camera.position_camera()
+        # adjust Light #2
+        v = self.camera.view
+        lightpos = (v["center"][0] + v["distance"][0],
+                    v["center"][1] + v["distance"][1],
+                    v["center"][2] + v["distance"][2])
+        GL.glLightfv(GL.GL_LIGHT1, GL.GL_POSITION, lightpos)
+        # trigger the visualization of all items
+        self.core.emit_event("visualize-items")
+        GL.glMatrixMode(prev_mode)
+        GL.glFlush()
+        # Return "True" in order to propagate the "render" signal.
+        return True
 
-    @gtkgl_functionwrapper
-    @gtkgl_refresh
-    def _paint_ignore_busy(self, widget=None):
-        pass
+    def trigger_rendering(self):
+        self.area.queue_render()
 
 
-class Camera(object):
+class Camera:
 
-    def __init__(self, core, get_dim_func, view=None):
+    def __init__(self, core, get_dim_func, import_gl, import_glu):
+        self._GL = import_gl
+        self._GLU = import_glu
         self.view = None
         self.core = core
         self._get_dim_func = get_dim_func
-        self.set_view(view)
+        self.set_view(self.view)
 
     def set_view(self, view=None):
         if view is None:
@@ -789,7 +787,7 @@ class Camera(object):
     def auto_adjust_distance(self):
         v = self.view
         # adjust the distance to get a view of the whole object
-        low_high = zip(*self._get_low_high_dims())
+        low_high = list(zip(*self._get_low_high_dims()))
         if (None, None) in low_high:
             return
         max_dim = max([high - low for low, high in low_high])
@@ -880,6 +878,8 @@ class Camera(object):
         self.view["up"] = new_up
 
     def position_camera(self):
+        GL = self._GL
+        GLU = self._GLU
         width, height = self._get_screen_dimensions()
         prev_mode = GL.glGetIntegerv(GL.GL_MATRIX_MODE)
         GL.glMatrixMode(GL.GL_PROJECTION)
diff --git a/pycam/Plugins/ParallelProcessing.py b/pycam/Plugins/ParallelProcessing.py
index 3b8c52c..815446c 100644
--- a/pycam/Plugins/ParallelProcessing.py
+++ b/pycam/Plugins/ParallelProcessing.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -24,6 +23,7 @@ import random
 import string
 
 import pycam.Plugins
+from pycam.Utils.events import get_mainloop
 import pycam.Utils.threading
 
 
@@ -142,7 +142,7 @@ class ParallelProcessing(pycam.Plugins.PluginBase):
         self.gui.get_object("ProcessPoolConnectedWorkersValue").set_text(str(len(stats)))
         details = pycam.Utils.threading.get_task_statistics()
         detail_text = os.linesep.join(["%s: %s" % (key, value)
-                                       for (key, value) in details.iteritems()])
+                                       for (key, value) in details.items()])
         self.gui.get_object("ProcessPoolDetails").set_text(detail_text)
         current_interval = int(max(1,
                                    self.gui.get_object("ProcessPoolRefreshInterval").get_value()))
@@ -200,8 +200,7 @@ class ParallelProcessing(pycam.Plugins.PluginBase):
         # prevent any further actions while the connection is established
         complete_area.set_sensitive(False)
         # wait for the above "set_sensitive" to finish
-        while self._gtk.events_pending():
-            self._gtk.main_iteration()
+        get_mainloop().update()
         enable_parallel = self.enable_parallel_processes.get_active()
         enable_server_obj = self.gui.get_object("EnableServerMode")
         enable_server = enable_server_obj.get_active()
@@ -213,12 +212,13 @@ class ParallelProcessing(pycam.Plugins.PluginBase):
             remote = None
         local_port = int(self.server_port_local_obj.get_value())
         auth_key = self.auth_key_obj.get_text()
+        auth_key = None if auth_key is None else auth_key.encode("utf-8")
         if not auth_key and enable_parallel and enable_server:
             self.log.error("You need to provide a password for this connection.")
             enable_server_obj.set_active(False)
         elif enable_parallel:
             if enable_server and \
-                    (pycam.Utils.get_platform() == pycam.Utils.PLATFORM_WINDOWS):
+                    (pycam.Utils.get_platform() == pycam.Utils.OSPlatform.WINDOWS):
                 if self.number_of_processes.get_value() > 0:
                     self.log.warn("Mixed local and remote processes are currently not available "
                                   "on the Windows platform. Setting the number of local processes "
@@ -243,6 +243,6 @@ class ParallelProcessing(pycam.Plugins.PluginBase):
             info = self._gtk.stock_lookup(self._gtk.STOCK_DISCONNECT)
         else:
             info = self._gtk.stock_lookup(self._gtk.STOCK_CONNECT)
-        enable_server_obj.set_label(info[0])
+        enable_server_obj.set_label(info.label)
         complete_area.set_sensitive(True)
         self.update_parallel_processes_settings()
diff --git a/pycam/Plugins/ParameterGroupManager.py b/pycam/Plugins/ParameterGroupManager.py
index ef6368f..40a7d97 100644
--- a/pycam/Plugins/ParameterGroupManager.py
+++ b/pycam/Plugins/ParameterGroupManager.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,8 +17,10 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+import copy
 
 import pycam.Plugins
+from pycam.Utils import MultiLevelDictionaryAccess
 
 
 class ParameterGroupManager(pycam.Plugins.PluginBase):
@@ -30,6 +31,7 @@ class ParameterGroupManager(pycam.Plugins.PluginBase):
         self._groups = {}
         self.core.set("get_parameter_values", self.get_parameter_values)
         self.core.set("set_parameter_values", self.set_parameter_values)
+        self.core.set("get_default_parameter_values", self.get_default_parameter_values)
         self.core.set("get_parameter_sets", self.get_parameter_sets)
         self.core.set("register_parameter_group", self.register_parameter_group)
         self.core.set("register_parameter_set", self.register_parameter_set)
@@ -47,12 +49,12 @@ class ParameterGroupManager(pycam.Plugins.PluginBase):
             self.core.set(name, None)
 
     def register_parameter_group(self, name, changed_set_event=None, changed_set_list_event=None,
-                                 get_current_set_func=None):
+                                 get_related_parameter_names=None):
         if name in self._groups:
             self.log.debug("Registering parameter group '%s' again", name)
         self._groups[name] = {"changed_set_event": changed_set_event,
                               "changed_set_list_event": changed_set_list_event,
-                              "get_current_set_func": get_current_set_func,
+                              "get_related_parameter_names": get_related_parameter_names,
                               "sets": {},
                               "parameters": {}}
         if changed_set_event:
@@ -60,16 +62,9 @@ class ParameterGroupManager(pycam.Plugins.PluginBase):
 
     def _update_widgets_visibility(self, group_name):
         group = self._groups[group_name]
-        current_set_func = group["get_current_set_func"]
-        if not current_set_func:
-            return
-        current_set = current_set_func()
-        if current_set:
-            active_parameters = current_set["parameters"]
-        else:
-            active_parameters = []
+        related_parameter_names = group["get_related_parameter_names"]()
         for param in group["parameters"].values():
-            is_visible = param["name"] in active_parameters
+            is_visible = param["name"] in related_parameter_names
             control = param["control"]
             if control is None:
                 pass
@@ -88,14 +83,16 @@ class ParameterGroupManager(pycam.Plugins.PluginBase):
         if name in group["sets"]:
             self.log.debug("Registering parameter set '%s' again", name)
         if parameters is None:
-            parameters = []
+            parameters = {}
         group["sets"][name] = {"name": name, "label": label, "func": func,
-                               "parameters": parameters, "weight": weight}
+                               "parameters": copy.deepcopy(parameters), "weight": weight}
         event = group["changed_set_list_event"]
         if event:
             self.core.emit_event(event)
 
     def register_parameter(self, group_name, name, control, get_func=None, set_func=None):
+        if isinstance(name, (list, tuple)):
+            name = tuple(name)
         if group_name not in self._groups:
             self.log.info("Unknown parameter group: %s", group_name)
             return
@@ -109,14 +106,55 @@ class ParameterGroupManager(pycam.Plugins.PluginBase):
         group["parameters"][name] = {"name": name, "control": control, "get_func": get_func,
                                      "set_func": set_func}
 
+    def get_default_parameter_values(self, group_name, set_name=None):
+        """ retrieve the default values of a given parameter group
+
+        @param group_name: name of the parameter group
+        """
+        result = {}
+        if group_name not in self._groups:
+            self.log.info("Default Parameter Values: unknown parameter group: %s", group_name)
+            return result
+        group = self._groups[group_name]
+        if not group["sets"]:
+            self.log.info("Default Parameter Values: missing parameter sets in group: %s",
+                          group_name)
+            return result
+        multi_level_access = MultiLevelDictionaryAccess(result)
+        if set_name is None:
+            default_set = sorted(group["sets"].values(), key=lambda item: item["weight"])[0]
+        else:
+            try:
+                default_set = group["sets"][set_name]
+            except KeyError:
+                self.log.warning("Default Parameter Values: failed to find request set: %s",
+                                 set_name)
+                return result
+        for key, value in default_set["parameters"].items():
+            try:
+                multi_level_access.set_value(key, value)
+            except TypeError as exc:
+                self.log.error("Failed to get default parameter '%s' for group '%s': %s",
+                               key, group_name, exc)
+        return result
+
     def get_parameter_values(self, group_name):
         if group_name not in self._groups:
             self.log.info("Unknown parameter group: %s", group_name)
             return {}
         result = {}
+        multi_level_access = MultiLevelDictionaryAccess(result)
         group = self._groups[group_name]
+        related_parameter_names = group["get_related_parameter_names"]()
         for parameter in group["parameters"].values():
-            result[parameter["name"]] = parameter["get_func"]()
+            key = parameter["name"]
+            if key in related_parameter_names:
+                value = parameter["get_func"]()
+                try:
+                    multi_level_access.set_value(key, value)
+                except TypeError as exc:
+                    self.log.error("Failed to get parameter '%s' for group '%s': %s",
+                                   key, group_name, exc)
         return result
 
     def set_parameter_values(self, group_name, value_dict):
@@ -124,9 +162,19 @@ class ParameterGroupManager(pycam.Plugins.PluginBase):
             self.log.info("Unknown parameter group: %s", group_name)
             return
         group = self._groups[group_name]
+        multi_level_access = MultiLevelDictionaryAccess(value_dict)
         for parameter in group["parameters"].values():
-            if parameter["name"] in value_dict:
-                parameter["set_func"](value_dict[parameter["name"]])
+            try:
+                value = multi_level_access.get_value(parameter["name"])
+            except KeyError:
+                # the incoming value dictionary does not contain the key - we can skip it
+                pass
+            except TypeError as exc:
+                # this should not happen: the value dictionary is malformed
+                self.log.error("Failed to get parameter '%s' for group '%s': %s",
+                               parameter["name"], group_name, exc)
+            else:
+                parameter["set_func"](value)
 
     def get_parameter_sets(self, group_name):
         if group_name not in self._groups:
@@ -172,6 +220,8 @@ class ParameterGroupManager(pycam.Plugins.PluginBase):
             self.core.emit_event(event)
 
     def unregister_parameter(self, group_name, name):
+        if isinstance(name, (list, tuple)):
+            name = tuple(name)
         if group_name not in self._groups:
             self.log.debug("Tried to unregister parameter '%s' from a non-existing parameter "
                            "group: %s", name, group_name)
diff --git a/pycam/Plugins/PathParameters.py b/pycam/Plugins/PathParameters.py
index 2baece1..3100c59 100644
--- a/pycam/Plugins/PathParameters.py
+++ b/pycam/Plugins/PathParameters.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -33,7 +32,7 @@ class PathParamOverlap(pycam.Plugins.PluginBase):
         # configure the input/output converter
         self.control = pycam.Gui.ControlsGTK.InputNumber(
             lower=0, upper=99, digits=0, increment=10,
-            change_handler=lambda widget=None: self.core.emit_event("process-changed"))
+            change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.control.set_conversion(
             set_conv=lambda float_value: int(float_value * 100.0),
             get_conv=lambda percent: percent / 100.0)
@@ -55,7 +54,7 @@ class PathParamStepDown(pycam.Plugins.PluginBase):
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputNumber(
             lower=0.01, digits=2, start=1,
-            change_handler=lambda widget=None: self.core.emit_event("process-changed"))
+            change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("process", "step_down", self.control)
         self.core.register_ui("process_path_parameters", "Step down", self.control.get_widget(),
                               weight=20)
@@ -74,7 +73,7 @@ class PathParamMaterialAllowance(pycam.Plugins.PluginBase):
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputNumber(
             start=0, lower=0, digits=2,
-            change_handler=lambda widget=None: self.core.emit_event("process-changed"))
+            change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("process", "material_allowance", self.control)
         self.core.register_ui("process_path_parameters", "Material allowance",
                               self.control.get_widget(), weight=30)
@@ -92,10 +91,10 @@ class PathParamMillingStyle(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputChoice(
-            (("ignore", pycam.Toolpath.MotionGrid.MillingStyle.IGNORE),
-             ("climb / down", pycam.Toolpath.MotionGrid.MillingStyle.CLIMB),
-             ("conventional / up", pycam.Toolpath.MotionGrid.MillingStyle.CONVENTIONAL)),
-            change_handler=lambda widget=None: self.core.emit_event("process-changed"))
+            (("ignore", pycam.Toolpath.MotionGrid.MillingStyle.IGNORE.value),
+             ("climb / down", pycam.Toolpath.MotionGrid.MillingStyle.CLIMB.value),
+             ("conventional / up", pycam.Toolpath.MotionGrid.MillingStyle.CONVENTIONAL.value)),
+            change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("path_pattern", "milling_style", self.control)
         self.core.get("register_parameter")("process", "milling_style", self.control)
         self.core.register_ui("process_path_parameters", "Milling style",
@@ -115,10 +114,10 @@ class PathParamGridDirection(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputChoice(
-            (("x", pycam.Toolpath.MotionGrid.GridDirection.X),
-             ("y", pycam.Toolpath.MotionGrid.GridDirection.Y),
-             ("xy", pycam.Toolpath.MotionGrid.GridDirection.XY)),
-            change_handler=lambda widget=None: self.core.emit_event("process-changed"))
+            (("x", pycam.Toolpath.MotionGrid.GridDirection.X.value),
+             ("y", pycam.Toolpath.MotionGrid.GridDirection.Y.value),
+             ("xy", pycam.Toolpath.MotionGrid.GridDirection.XY.value)),
+            change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("path_pattern", "grid_direction", self.control)
         self.core.get("register_parameter")("process", "grid_direction", self.control)
         self.core.register_ui("process_path_parameters", "Direction", self.control.get_widget(),
@@ -140,7 +139,7 @@ class PathParamSpiralDirection(pycam.Plugins.PluginBase):
         self.control = pycam.Gui.ControlsGTK.InputChoice(
             (("outside -> center", pycam.Toolpath.MotionGrid.SpiralDirection.IN),
              ("center -> outside", pycam.Toolpath.MotionGrid.SpiralDirection.OUT)),
-            change_handler=lambda widget=None: self.core.emit_event("process-changed"))
+            change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("path_pattern", "spiral_direction", self.control)
         self.core.register_ui("process_path_parameters", "Direction", self.control.get_widget(),
                               weight=40)
@@ -159,57 +158,27 @@ class PathParamPattern(pycam.Plugins.PluginBase):
     def setup(self):
         self.choices = []
         self.control = pycam.Gui.ControlsGTK.InputChoice(
-            [], change_handler=lambda widget=None: self.core.emit_event("process-changed"))
-        self.control.set_conversion(set_conv=self._set_value_converter,
-                                    get_conv=self._get_value_converter)
+            [], change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("process", "path_pattern", self.control)
         self.core.get("register_parameter_group")(
             "path_pattern", changed_set_event="process-path-pattern-changed",
             changed_set_list_event="process-path-pattern-list-changed",
-            get_current_set_func=self._get_pattern)
+            get_related_parameter_names=self._get_pattern_parameter_names)
         self.core.register_ui("process_path_parameters", "Pattern", self.control.get_widget(),
                               weight=5)
-        self.control.get_widget().connect(
-            "changed", lambda widget: self.core.emit_event("process-path-pattern-changed"))
         self._event_handlers = (
-            ("process-path-pattern-list-changed", self._update_selector),
+            ("process-path-pattern-list-changed", self._update_pattern_list_widget),
             ("process-changed", "process-path-pattern-changed"))
         self.register_event_handlers(self._event_handlers)
         return True
 
-    def _get_value_converter(self, value):
-        if value:
-            pattern_sets = self.core.get("get_parameter_sets")("path_pattern")
-            try:
-                current_pattern_set = pattern_sets[value]
-            except KeyError:
-                return None
-            parameter_keys = current_pattern_set["parameters"].keys()
-            all_parameters = self.core.get("get_parameter_values")("path_pattern")
-            result = {"name": value, "parameters": {}}
-            for parameter_key in parameter_keys:
-                result["parameters"][parameter_key] = all_parameters[parameter_key]
-            return result
-        else:
-            return None
-
-    def _set_value_converter(self, value):
-        if value:
-            self.core.get("set_parameter_values")("path_pattern", value["parameters"])
-            return value["name"]
-        elif self.choices:
-            # use the first entry as the default value
-            return self.choices[0][1]
-        else:
-            return None
-
     def teardown(self):
         self.core.unregister_ui("process_path_parameters", self.control.get_widget())
         self.unregister_event_handlers(self._event_handlers)
         self.core.get("unregister_parameter")("process", "path_pattern")
         self.core.get("unregister_parameter_group")("path_pattern")
 
-    def _update_selector(self):
+    def _update_pattern_list_widget(self):
         patterns = list(self.core.get("get_parameter_sets")("path_pattern").values())
         patterns.sort(key=lambda item: item["weight"])
         self.choices = []
@@ -219,12 +188,16 @@ class PathParamPattern(pycam.Plugins.PluginBase):
         if not self.control.get_value() and self.choices:
             self.control.set_value({"name": self.choices[0][1], "parameters": {}})
 
-    def _get_pattern(self):
-        pattern_set = self.control.get_value()
-        if pattern_set:
-            return self.core.get("get_parameter_sets")("path_pattern")[pattern_set["name"]]
+    def _get_pattern_parameter_names(self):
+        pattern_name = self.control.get_value()
+        # The path pattern is not used for all process strategies. Thus we need to check, whether
+        # we are currently in use (i.e. visible).
+        is_visible = self.control.is_visible()
+        if pattern_name and is_visible:
+            pattern = self.core.get("get_parameter_sets")("path_pattern")[pattern_name]
+            return set(pattern["parameters"].keys())
         else:
-            return None
+            return set()
 
 
 class PathParamRoundedSpiralCorners(pycam.Plugins.PluginBase):
@@ -234,7 +207,7 @@ class PathParamRoundedSpiralCorners(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputCheckBox(
-            change_handler=lambda widget=None: self.core.emit_event("process-changed"))
+            change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("path_pattern", "rounded_corners", self.control)
         self.core.register_ui("process_path_parameters", "Rounded corners",
                               self.control.get_widget(), weight=80)
@@ -252,7 +225,7 @@ class PathParamRadiusCompensation(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputCheckBox(
-            change_handler=lambda widget=None: self.core.emit_event("process-changed"))
+            change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("process", "radius_compensation", self.control)
         self.core.register_ui("process_path_parameters", "Radius compensation",
                               self.control.get_widget(), weight=80)
@@ -270,26 +243,12 @@ class PathParamTraceModel(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputTable(
-            [], change_handler=lambda widget=None: self.core.emit_event("process-changed"))
-
-        def get_converter(model_refs):
-            models_dict = {}
-            for model in self.core.get("models"):
-                models_dict[id(model)] = model
-            models = []
-            for model_ref in model_refs:
-                if model_ref in models_dict:
-                    models.append(models_dict[model_ref])
-            return models
-
-        def set_converter(models):
-            return [id(model) for model in models]
-
-        self.control.set_conversion(set_conv=set_converter, get_conv=get_converter)
+            [], change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("process", "trace_models", self.control)
         self.core.register_ui("process_path_parameters", "Trace models (2D)",
                               self.control.get_widget(), weight=5)
         self.core.register_event("model-list-changed", self._update_models)
+        self.core.register_event("model-changed", self._update_models)
         return True
 
     def teardown(self):
@@ -299,10 +258,10 @@ class PathParamTraceModel(pycam.Plugins.PluginBase):
 
     def _update_models(self):
         choices = []
-        models = self.core.get("models")
-        for model in models:
-            if hasattr(model.model, "get_polygons"):
-                choices.append((model["name"], model))
+        for model in self.core.get("models").get_all():
+            if hasattr(model.get_model(), "get_polygons"):
+                choices.append((model.get_application_value("name", model.get_id()),
+                                model.get_id()))
         self.control.update_choices(choices)
 
 
@@ -313,10 +272,10 @@ class PathParamPocketingType(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputChoice(
-            (("none", pycam.Toolpath.MotionGrid.PocketingType.NONE),
-             ("holes", pycam.Toolpath.MotionGrid.PocketingType.HOLES),
-             ("material", pycam.Toolpath.MotionGrid.PocketingType.MATERIAL)),
-            change_handler=lambda widget=None: self.core.emit_event("process-changed"))
+            (("none", pycam.Toolpath.MotionGrid.PocketingType.NONE.value),
+             ("holes", pycam.Toolpath.MotionGrid.PocketingType.HOLES.value),
+             ("material", pycam.Toolpath.MotionGrid.PocketingType.MATERIAL.value)),
+            change_handler=lambda widget=None: self.core.emit_event("process-control-changed"))
         self.core.get("register_parameter")("process", "pocketing_type", self.control)
         self.core.register_ui("process_path_parameters", "Pocketing", self.control.get_widget(),
                               weight=60)
diff --git a/pycam/Plugins/PathPatterns.py b/pycam/Plugins/PathPatterns.py
index 67a798b..58b8961 100644
--- a/pycam/Plugins/PathPatterns.py
+++ b/pycam/Plugins/PathPatterns.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -33,19 +32,13 @@ class PathPatternSpiral(pycam.Plugins.PluginBase):
         parameters = {"milling_style": pycam.Toolpath.MotionGrid.MillingStyle.IGNORE,
                       "spiral_direction": None,
                       "rounded_corners": False}
-        self.core.get("register_parameter_set")("path_pattern", "spiral", "Spiral",
-                                                self.get_grid_generator, parameters=parameters,
-                                                weight=30)
+        self.core.get("register_parameter_set")("path_pattern", "spiral", "Spiral", None,
+                                                parameters=parameters, weight=30)
         return True
 
     def teardown(self):
         self.core.get("unregister_parameter_set")("path_pattern", "spiral")
 
-    def get_grid_generator(self, pattern):
-        kwargs = pattern["parameters"]
-        func = pycam.Toolpath.MotionGrid.get_spiral
-        return func, kwargs
-
 
 class PathPatternGrid(pycam.Plugins.PluginBase):
 
@@ -57,14 +50,8 @@ class PathPatternGrid(pycam.Plugins.PluginBase):
         parameters = {"milling_style": pycam.Toolpath.MotionGrid.MillingStyle.IGNORE,
                       "grid_direction": pycam.Toolpath.MotionGrid.GridDirection.X}
         self.core.get("register_parameter_set")("path_pattern", "grid", "Grid",
-                                                self.get_grid_generator, parameters=parameters,
-                                                weight=10)
+                                                None, parameters=parameters, weight=10)
         return True
 
     def teardown(self):
         self.core.get("unregister_parameter_set")("path_pattern", "grid")
-
-    def get_grid_generator(self, pattern):
-        kwargs = pattern["parameters"]
-        func = pycam.Toolpath.MotionGrid.get_fixed_grid
-        return func, kwargs
diff --git a/pycam/Plugins/PluginSelector.py b/pycam/Plugins/PluginSelector.py
index 4e12555..7cda71c 100644
--- a/pycam/Plugins/PluginSelector.py
+++ b/pycam/Plugins/PluginSelector.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -63,7 +62,7 @@ class PluginSelector(pycam.Plugins.PluginBase):
         if self.gui:
             self.plugin_window.hide()
             action = self.gui.get_object("TogglePluginWindow")
-            self.core.register_ui("view_menu", action)
+            self.core.unregister_ui("view_menu", action)
             self.core.unregister_event("plugin-list-changed", self._update_plugin_model)
             self.unregister_gtk_handlers(self._gtk_handlers)
 
@@ -85,7 +84,7 @@ class PluginSelector(pycam.Plugins.PluginBase):
         # don't destroy the window with a "destroy" event
         return True
 
-    def _filter_set_visible(self, model, m_iter):
+    def _filter_set_visible(self, model, m_iter, data):
         manager = self.core.get("plugin-manager")
         status_filter = self.gui.get_object("StatusFilter")
         status_index = status_filter.get_active()
@@ -148,7 +147,7 @@ class PluginSelector(pycam.Plugins.PluginBase):
         self.gui.get_object("PluginsDescriptionColumn").queue_resize()
         self.gui.get_object("PluginsTable").queue_resize()
         # update the category filter
-        categories = categories.keys()
+        categories = list(categories.keys())
         categories.sort()
         categories.insert(0, "All categories")
         model = self.gui.get_object("CategoryList")
diff --git a/pycam/Plugins/ProcessStrategies.py b/pycam/Plugins/ProcessStrategies.py
index f6c9874..2c80c16 100644
--- a/pycam/Plugins/ProcessStrategies.py
+++ b/pycam/Plugins/ProcessStrategies.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,16 +19,9 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 
 import pycam.Plugins
-import pycam.PathGenerators.DropCutter
-import pycam.PathGenerators.EngraveCutter
-import pycam.PathGenerators.PushCutter
 import pycam.Toolpath.MotionGrid
 
 
-def _get_line_distance(radius, overlap):
-    return 2 * radius * (1.0 - overlap)
-
-
 class ProcessStrategySlicing(pycam.Plugins.PluginBase):
 
     DEPENDS = ["ParameterGroupManager", "PathParamOverlap", "PathParamStepDown",
@@ -41,23 +33,12 @@ class ProcessStrategySlicing(pycam.Plugins.PluginBase):
                       "step_down": 1.0,
                       "material_allowance": 0,
                       "path_pattern": None}
-        self.core.get("register_parameter_set")("process", "slicing", "Slice removal",
-                                                self.run_process, parameters=parameters, weight=10)
+        self.core.get("register_parameter_set")("process", "slice", "Slice removal", None,
+                                                parameters=parameters, weight=10)
         return True
 
     def teardown(self):
-        self.core.get("unregister_parameter_set")("process", "slicing")
-
-    def run_process(self, process, tool_radius, box):
-        line_distance = _get_line_distance(tool_radius, process["parameters"]["overlap"])
-        path_generator = pycam.PathGenerators.PushCutter.PushCutter(waterlines=False)
-        path_pattern = process["parameters"]["path_pattern"]
-        path_get_func = self.core.get("get_parameter_sets")(
-            "path_pattern")[path_pattern["name"]]["func"]
-        grid_func, kwargs = path_get_func(path_pattern)
-        motion_grid = grid_func(box, process["parameters"]["step_down"],
-                                line_distance=line_distance, **kwargs)
-        return path_generator, motion_grid
+        self.core.get("unregister_parameter_set")("process", "slice")
 
 
 class ProcessStrategyContour(pycam.Plugins.PluginBase):
@@ -71,23 +52,13 @@ class ProcessStrategyContour(pycam.Plugins.PluginBase):
                       "material_allowance": 0,
                       "overlap": 0.8,
                       "milling_style": pycam.Toolpath.MotionGrid.MillingStyle.IGNORE}
-        self.core.get("register_parameter_set")("process", "contour", "Waterline",
-                                                self.run_process, parameters=parameters, weight=20)
+        self.core.get("register_parameter_set")("process", "contour", "Waterline", None,
+                                                parameters=parameters, weight=20)
         return True
 
     def teardown(self):
         self.core.get("unregister_parameter_set")("process", "contour")
 
-    def run_process(self, process, tool_radius, box):
-        line_distance = _get_line_distance(tool_radius, process["parameters"]["overlap"])
-        path_generator = pycam.PathGenerators.PushCutter.PushCutter(waterlines=True)
-        # TODO: milling_style currently refers to the grid lines - not to the waterlines
-        motion_grid = pycam.Toolpath.MotionGrid.get_fixed_grid(
-            box, process["parameters"]["step_down"], line_distance=line_distance,
-            grid_direction=pycam.Toolpath.MotionGrid.GridDirection.X,
-            milling_style=process["parameters"]["milling_style"])
-        return path_generator, motion_grid
-
 
 class ProcessStrategySurfacing(pycam.Plugins.PluginBase):
 
@@ -99,23 +70,12 @@ class ProcessStrategySurfacing(pycam.Plugins.PluginBase):
         parameters = {"overlap": 0.6,
                       "material_allowance": 0,
                       "path_pattern": None}
-        self.core.get("register_parameter_set")("process", "surfacing", "Surfacing",
-                                                self.run_process, parameters=parameters, weight=50)
+        self.core.get("register_parameter_set")("process", "surface", "Surfacing", None,
+                                                parameters=parameters, weight=50)
         return True
 
     def teardown(self):
-        self.core.get("unregister_parameter_set")("process", "surfacing")
-
-    def run_process(self, process, tool_radius, box):
-        line_distance = _get_line_distance(tool_radius, process["parameters"]["overlap"])
-        path_generator = pycam.PathGenerators.DropCutter.DropCutter()
-        path_pattern = process["parameters"]["path_pattern"]
-        path_get_func = self.core.get("get_parameter_sets")(
-            "path_pattern")[path_pattern["name"]]["func"]
-        grid_func, kwargs = path_get_func(path_pattern)
-        motion_grid = grid_func(box, None, step_width=(tool_radius / 4.0),
-                                line_distance=line_distance, **kwargs)
-        return path_generator, motion_grid
+        self.core.get("unregister_parameter_set")("process", "surface")
 
 
 class ProcessStrategyEngraving(pycam.Plugins.PluginBase):
@@ -130,34 +90,9 @@ class ProcessStrategyEngraving(pycam.Plugins.PluginBase):
                       "radius_compensation": False,
                       "trace_models": [],
                       "pocketing_type": pycam.Toolpath.MotionGrid.PocketingType.NONE}
-        self.core.get("register_parameter_set")("process", "engraving", "Engraving",
-                                                self.run_process, parameters=parameters, weight=80)
+        self.core.get("register_parameter_set")("process", "engrave", "Engraving", None,
+                                                parameters=parameters, weight=80)
         return True
 
     def teardown(self):
-        self.core.get("unregister_parameter_set")("process", "engraving")
-
-    def run_process(self, process, tool_radius, box):
-        path_generator = pycam.PathGenerators.EngraveCutter.EngraveCutter()
-        models = [m.model for m in process["parameters"]["trace_models"]]
-        if not models:
-            self.log.error("No trace models given: you need to assign a 2D model to the engraving "
-                           "process.")
-            return None, None
-        progress = self.core.get("progress")
-        if process["parameters"]["radius_compensation"]:
-            progress.update(text="Offsetting models")
-            progress.set_multiple(len(models), "Model")
-            for index in range(len(models)):
-                models[index] = models[index].get_offset_model(tool_radius,
-                                                               callback=progress.update)
-                progress.update_multiple()
-            progress.finish()
-        progress.update(text="Calculating moves")
-        motion_grid = pycam.Toolpath.MotionGrid.get_lines_grid(
-            models, box, process["parameters"]["step_down"], line_distance=1.8*tool_radius,
-            step_width=(tool_radius / 4.0), milling_style=process["parameters"]["milling_style"],
-            pocketing_type=process["parameters"]["pocketing_type"], skip_first_layer=True,
-            callback=progress.update)
-        progress.finish()
-        return path_generator, motion_grid
+        self.core.get("unregister_parameter_set")("process", "engrave")
diff --git a/pycam/Plugins/Processes.py b/pycam/Plugins/Processes.py
index 21e3d33..cc8adbe 100644
--- a/pycam/Plugins/Processes.py
+++ b/pycam/Plugins/Processes.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,8 +17,9 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+from pycam.Flow.history import merge_history_and_block_events
 import pycam.Plugins
-from pycam.Utils import get_non_conflicting_name
+import pycam.workspace.data_models
 
 
 class Processes(pycam.Plugins.ListPluginBase):
@@ -27,6 +27,7 @@ class Processes(pycam.Plugins.ListPluginBase):
     DEPENDS = ["ParameterGroupManager"]
     CATEGORIES = ["Process"]
     UI_FILE = "processes.ui"
+    COLLECTION_ITEM_TYPE = pycam.workspace.data_models.Process
 
     def setup(self):
         self.core.set("processes", self)
@@ -63,14 +64,14 @@ class Processes(pycam.Plugins.ListPluginBase):
                 align.set_padding(0, 3, 12, 3)
                 align.add(item)
                 frame.show_all()
-                parameters_box.pack_start(frame, expand=False)
+                parameters_box.pack_start(frame, expand=False, fill=True, padding=0)
 
             self.core.register_ui_section("process_parameters", add_parameter_widget,
                                           clear_parameter_widgets)
             self.core.get("register_parameter_group")(
                 "process", changed_set_event="process-strategy-changed",
                 changed_set_list_event="process-strategy-list-changed",
-                get_current_set_func=self._get_strategy)
+                get_related_parameter_names=self._get_selected_strategy_parameter_names)
             self.parameter_widget = pycam.Gui.ControlsGTK.ParameterSection()
             self.core.register_ui_section("process_path_parameters",
                                           self.parameter_widget.add_widget,
@@ -80,19 +81,28 @@ class Processes(pycam.Plugins.ListPluginBase):
             self._gtk_handlers.append((self._modelview.get_selection(), "changed",
                                        "process-selection-changed"))
             self._gtk_handlers.append((self.gui.get_object("NameCell"), "edited",
-                                       self._edit_process_name))
+                                       self.edit_item_name))
             self._treemodel = self.gui.get_object("ProcessList")
             self._treemodel.clear()
             self._gtk_handlers.append((self.gui.get_object("StrategySelector"), "changed",
-                                       "process-strategy-changed"))
+                                       "process-control-changed"))
+            # define cell renderers
+            self.gui.get_object("NameColumn").set_cell_data_func(
+                self.gui.get_object("NameCell"), self.render_item_name)
+            self.gui.get_object("DescriptionColumn").set_cell_data_func(
+                self.gui.get_object("DescriptionCell"), self._render_process_description)
             self._event_handlers = (
-                ("process-strategy-list-changed", self._update_widgets),
-                ("process-list-changed", self._trigger_table_update),
-                ("process-selection-changed", self._process_switch),
-                ("process-changed", self._store_process_settings),
-                ("process-strategy-changed", self._store_process_settings))
+                ("process-strategy-list-changed", self._update_strategy_widgets),
+                ("process-selection-changed", self._update_process_widgets),
+                ("process-changed", self._update_process_widgets),
+                ("process-changed", self.force_gtk_modelview_refresh),
+                ("process-list-changed", self.force_gtk_modelview_refresh),
+                ("process-control-changed", self._transfer_controls_to_process))
             self.register_gtk_handlers(self._gtk_handlers)
             self.register_event_handlers(self._event_handlers)
+            self.select_strategy(None)
+            self._update_strategy_widgets()
+            self._update_process_widgets()
         self.register_state_item("processes", self)
         self.core.register_namespace("processes", pycam.Plugins.get_filter(self))
         return True
@@ -108,34 +118,16 @@ class Processes(pycam.Plugins.ListPluginBase):
             self.unregister_gtk_handlers(self._gtk_handlers)
             self.unregister_event_handlers(self._event_handlers)
         self.core.set("processes", None)
-        while len(self) > 0:
-            self.pop()
+        self.clear()
         return True
 
-    def _render_process_description(self, column, cell, model, m_iter):
+    def _render_process_description(self, column, cell, model, m_iter, data):
         # TODO: describe the strategy
         text = "TODO"
 #       process = self.get_by_path(model.get_path(m_iter))
         cell.set_property("text", text)
 
-    def _render_process_name(self, column, cell, model, m_iter):
-        process = self.get_by_path(model.get_path(m_iter))
-        cell.set_property("text", process["name"])
-
-    def _edit_process_name(self, cell, path, new_text):
-        process = self.get_by_path(path)
-        if process and (new_text != process["name"]) and new_text:
-            process["name"] = new_text
-            self.core.emit_event("process-list-changed")
-
-    def _trigger_table_update(self):
-        self.gui.get_object("NameColumn").set_cell_data_func(
-            self.gui.get_object("NameCell"), self._render_process_name)
-        self.gui.get_object("DescriptionColumn").set_cell_data_func(
-            self.gui.get_object("DescriptionCell"), self._render_process_description)
-
-    def _update_widgets(self):
-        selected = self._get_strategy()
+    def _update_strategy_widgets(self):
         model = self.gui.get_object("StrategyModel")
         model.clear()
         strategies = list(self.core.get("get_parameter_sets")("process").values())
@@ -145,12 +137,13 @@ class Processes(pycam.Plugins.ListPluginBase):
         # check if any on the processes became obsolete due to a missing plugin
         removal = []
         strat_names = [strat["name"] for strat in strategies]
-        for index, process in enumerate(self):
-            if not process["strategy"] in strat_names:
+        for index, process in enumerate(self.get_all()):
+            if not process.get_value("strategy").value in strat_names:
                 removal.append(index)
         removal.reverse()
+        collection = self.get_collection()
         for index in removal:
-            self.pop(index)
+            del collection[index]
         # show "new" only if a strategy is available
         self.gui.get_object("ProcessNew").set_sensitive(len(model) > 0)
         selector_box = self.gui.get_object("ProcessSelectorBox")
@@ -158,10 +151,14 @@ class Processes(pycam.Plugins.ListPluginBase):
             selector_box.hide()
         else:
             selector_box.show()
-        if selected:
-            self.select_strategy(selected["name"])
 
-    def _get_strategy(self, name=None):
+    def _get_selected_strategy_parameter_names(self):
+        strategy = self._get_selected_strategy()
+        return set() if strategy is None else set(strategy["parameters"].keys())
+
+    def _get_selected_strategy(self, name=None):
+        """ get a strategy object - either based on the given name or the currently selected one
+        """
         strategies = self.core.get("get_parameter_sets")("process")
         if name is None:
             # find the currently selected one
@@ -187,65 +184,41 @@ class Processes(pycam.Plugins.ListPluginBase):
         else:
             selector.set_active(-1)
 
-    def _store_process_settings(self):
+    def _transfer_controls_to_process(self):
         process = self.get_selected()
-        control_box = self.gui.get_object("ProcessSettingsControlsBox")
-        strategy = self._get_strategy()
-        if process is None or strategy is None:
-            control_box.hide()
-        else:
-            # Check if any of the relevant controls are still at their default
-            # values for this process type. These values are overridden by the
-            # default value of the new (changed) process type.
-            # E.g. this changes the "overlap" value from 10 to 60 when
-            # switching from slicing to surfacing.
-            if process["strategy"] \
-                    and process["strategy"] in self.core.get("get_parameter_sets")("process"):
-                old_strategy = self.core.get("get_parameter_sets")("process")[process["strategy"]]
-                if process["strategy"] != strategy["name"]:
-                    changes = {}
-                    common_keys = [key for key in old_strategy["parameters"]
-                                   if key in strategy["parameters"]]
-                    for key in common_keys:
-                        if process["parameters"][key] == old_strategy["parameters"][key]:
-                            changes[key] = strategy["parameters"][key]
-                        self.core.get("set_parameter_values")("process", changes)
-            process["strategy"] = strategy["name"]
-            parameters = process["parameters"]
-            parameters.update(self.core.get("get_parameter_values")("process"))
-            control_box.show()
-            self._trigger_table_update()
-
-    def _process_switch(self, widget=None, data=None):
+        strategy = self._get_selected_strategy()
+        if process and strategy:
+            process.set_value("strategy", strategy["name"])
+            value_set = self.core.get("get_parameter_values")("process")
+            if "path_pattern" in value_set:
+                value_set.update(self.core.get("get_parameter_values")("path_pattern"))
+            for key, value in value_set.items():
+                process.set_value(key, value)
+
+    def _update_process_widgets(self, widget=None, data=None):
         process = self.get_selected()
         control_box = self.gui.get_object("ProcessSettingsControlsBox")
-        if not process:
+        if process is None:
             control_box.hide()
         else:
-            self.core.block_event("process-changed")
-            self.core.block_event("process-strategy-changed")
-            strategy_name = process["strategy"]
-            self.select_strategy(strategy_name)
-            self.core.get("set_parameter_values")("process", process["parameters"])
-            control_box.show()
-            self.core.unblock_event("process-strategy-changed")
-            self.core.unblock_event("process-changed")
+            with self.core.blocked_events({"process-control-changed",
+                                           "process-strategy-changed",
+                                           "process-path-pattern-changed"}):
+                strategy_name = process.get_value("strategy").value
+                self.select_strategy(strategy_name)
+                data_dict = process.get_dict()
+                self.core.get("set_parameter_values")("process", data_dict)
+                if "path_pattern" in data_dict:
+                    self.core.get("set_parameter_values")("path_pattern", data_dict)
+                control_box.show()
             self.core.emit_event("process-strategy-changed")
             self.core.emit_event("process-changed")
 
-    def _process_new(self, *args):
-        strategies = self.core.get("get_parameter_sets")("process").values()
-        strategies.sort(key=lambda item: item["weight"])
-        strategy = strategies[0]
-        name = get_non_conflicting_name("Process #%d", [process["name"] for process in self])
-        new_process = ProcessEntity({"strategy": strategy["name"],
-                                     "parameters": strategy["parameters"].copy(),
-                                     "name": name})
-        self.append(new_process)
+    def _process_new(self, widget=None, strategy="slice"):
+        with merge_history_and_block_events(self.core):
+            params = {"strategy": strategy}
+            params.update(self.core.get("get_default_parameter_values")("process",
+                                                                        set_name=strategy))
+            new_process = pycam.workspace.data_models.Process(None, data=params)
+            new_process.set_application_value("name", self.get_non_conflicting_name("Process #%d"))
         self.select(new_process)
-
-
-class ProcessEntity(pycam.Plugins.ObjectWithAttributes):
-
-    def __init__(self, parameters):
-        super(ProcessEntity, self).__init__("process", parameters)
diff --git a/pycam/Plugins/ProgressBar.py b/pycam/Plugins/ProgressBar.py
index 36bd1f6..f1e2738 100644
--- a/pycam/Plugins/ProgressBar.py
+++ b/pycam/Plugins/ProgressBar.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -23,6 +22,7 @@ import os
 import time
 
 import pycam.Plugins
+from pycam.Utils.events import get_mainloop
 
 
 class ProgressBar(pycam.Plugins.PluginBase):
@@ -37,7 +37,8 @@ class ProgressBar(pycam.Plugins.PluginBase):
             box = self.gui.get_object("ProgressBox")
             box.unparent()
             self.core.register_ui("main_window", "Progress", box, 50)
-            self.core.add_item("progress", lambda: ProgressGTK(self.core, self.gui, self.log))
+            self.core.add_item("progress",
+                               lambda: ProgressGTK(self.core, self.gui, self._gtk, self.log))
             show_progress_button = self.gui.get_object("ShowToolpathProgressButton")
             # TODO: move this setting somewhere else or rename it
             self.core.add_item("show_toolpath_progress", show_progress_button.get_active,
@@ -55,13 +56,12 @@ class ProgressBar(pycam.Plugins.PluginBase):
         self.core.set("progress", None)
 
 
-class ProgressGTK(object):
+class ProgressGTK:
 
     _PROGRESS_STACK = []
 
-    def __init__(self, core, gui, log):
+    def __init__(self, core, gui, gtk, log):
         ProgressGTK._PROGRESS_STACK.append(self)
-        import gtk
         self._finished = False
         self._gtk = gtk
         self._gui = gui
@@ -73,14 +73,13 @@ class ProgressGTK(object):
         self._multi_counter = 0
         self._multi_base_text = ""
         self._last_gtk_events_time = None
-        self._main_widget = self._gui.get_object("ProgressWidget")
+        self._main_widget = self._gui.get_object("ProgressBox")
         self._multi_widget = self._gui.get_object("MultipleProgressBar")
         self._cancel_button = self._gui.get_object("ProgressCancelButton")
         self._cancel_button.connect("clicked", self.cancel)
         self._progress_bar = self._gui.get_object("ProgressBar")
         self._progress_button = self._gui.get_object("ShowToolpathProgressButton")
         self._start_time = time.time()
-        self._progress_button.show()
         self._last_text = None
         self._last_percent = None
         self.update(text="", percent=0)
@@ -213,8 +212,7 @@ class ProgressGTK(object):
             # TODO: move "in_progress" somewhere else
             if self.core.get("toolpath_in_progress"):
                 self._progress_button.show()
-            while self._gtk.events_pending():
-                self._gtk.main_iteration()
+            get_mainloop().update()
             if not text or (self._start_time + 5 < current_time):
                 # We don't store the timining if the text was changed.
                 # This is especially nice for the snappines during font
diff --git a/pycam/Plugins/StatusManager.py b/pycam/Plugins/StatusManager.py
deleted file mode 100644
index 3808b5d..0000000
--- a/pycam/Plugins/StatusManager.py
+++ /dev/null
@@ -1,241 +0,0 @@
-# -*- coding: utf-8 -*-
-"""
-Copyright 2011 Lars Kruse <devel@sumpfralle.de>
-
-This file is part of PyCAM.
-
-PyCAM is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-PyCAM is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
-"""
-
-import os
-import xml.etree.ElementTree as ET
-
-from pycam import FILTER_CONFIG
-import pycam.Plugins
-import pycam.Utils.log
-
-_log = pycam.Utils.log.get_logger()
-
-
-class StatusManager(pycam.Plugins.PluginBase):
-
-    CATEGORIES = ["System"]
-
-    def setup(self):
-        self._types = {}
-        if self.gui:
-            # autoload task settings file on startup
-            autoload_enable = self.gui.get_object("AutoLoadTaskFile")
-            autoload_box = self.gui.get_object("StartupTaskFileBox")
-            autoload_source = self.gui.get_object("StartupTaskFile")
-            # TODO: fix the extension filter
-#           for one_filter in get_filters_from_list(FILTER_CONFIG):
-#               autoload_source.add_filter(one_filter)
-#               autoload_source.set_filter(one_filter)
-
-            def get_autoload_task_file(autoload_source=autoload_source):
-                if autoload_enable.get_active():
-                    return autoload_source.get_filename()
-                else:
-                    return ""
-
-            def set_autoload_task_file(filename):
-                if filename:
-                    autoload_enable.set_active(True)
-                    autoload_box.show()
-                    autoload_source.set_filename(filename)
-                else:
-                    autoload_enable.set_active(False)
-                    autoload_box.hide()
-                    autoload_source.unselect_all()
-
-            def autoload_enable_switched(widget, box):
-                if not widget.get_active():
-                    set_autoload_task_file(None)
-                else:
-                    autoload_box.show()
-
-            autoload_enable.connect("toggled", autoload_enable_switched, autoload_box)
-            self.core.settings.add_item("default_task_settings_file", get_autoload_task_file,
-                                        set_autoload_task_file)
-            autoload_task_filename = self.core.settings.get("default_task_settings_file")
-            self.core.settings.set("open-task-settings-file-func", self.open_task_settings_file)
-            # TODO: use "startup" hook instead
-            if autoload_task_filename:
-                self.open_task_settings_file(autoload_task_filename)
-            self._gtk_handlers = []
-            for objname, callback, data, accel_key in (
-                    ("LoadTaskSettings", self.load_task_settings_file, None, "<Control>t"),
-                    ("SaveTaskSettings", self.save_task_settings_file,
-                     lambda: self.last_task_settings_uri, None),
-                    ("SaveAsTaskSettings", self.save_task_settings_file, None, None)):
-                obj = self.gui.get_object(objname)
-                self.register_gtk_accelerator("status_manager", obj, accel_key, objname)
-                self._gtk_handlers.append((obj, "activate", callback))
-            self.register_gtk_handlers(self._gtk_handlers)
-        return True
-
-    def teardown(self):
-        if self.gui:
-            self.unregister_gtk_handlers(self._gtk_handlers)
-
-    def register_status_type(self, name, the_type, parse_func, format_func):
-        if name in self._types:
-            _log.info("Trying to register status type twice: %s", name)
-        self._types[name] = (the_type, parse_func, format_func)
-
-    def unregister_status_type(self, name):
-        if name not in self._types:
-            _log.info("Trying to unregister unknown status type: %s", name)
-        else:
-            del self._types[name]
-
-    def get_name_of_type(self, the_type):
-        candidates = []
-        for name in self._types:
-            if the_type is self._types[name][0]:
-                return name
-            if isinstance(the_type, self._types[name][0]):
-                candidates.append(name)
-        if candidates:
-            return candidates[0]
-        else:
-            raise KeyError("Status type not registered: %s" % str(the_type))
-
-    def open_task_settings_file(self, filename):
-        """ This function is used by the commandline handler """
-        self.last_task_settings_uri = pycam.Utils.URIHandler(filename)
-        self.load_task_settings_file(filename=filename)
-
-    def load_task_settings_file(self, widget=None, filename=None):
-        if callable(filename):
-            filename = filename()
-        if not filename:
-            filename = self.core.settings.get("get_filename_func")("Loading settings ...",
-                                                                   mode_load=True,
-                                                                   type_filter=FILTER_CONFIG)
-            # Only update the last_task_settings attribute if the task file was
-            # loaded interactively. E.g. ignore the initial task file loading.
-            if filename:
-                self.last_task_settings_uri = pycam.Utils.URIHandler(filename)
-        if filename:
-            _log.info("Loading task settings file: %s", str(filename))
-            self.load_task_settings(filename)
-            self.core.emit_event("notify-file-opened", filename)
-
-    def save_task_settings_file(self, widget=None, filename=None):
-        if callable(filename):
-            filename = filename()
-        if not hasattr(filename, "split") and not isinstance(filename, pycam.Utils.URIHandler):
-            # we open a dialog
-            filename = self.core.settings.get("get_filename_func")(
-                "Save settings to ...", mode_load=False, type_filter=FILTER_CONFIG,
-                filename_templates=(self.last_task_settings_uri, self.core.last_model_uri))
-            if filename:
-                self.last_task_settings_uri = pycam.Utils.URIHandler(filename)
-        # no filename given -> exit
-        if not filename:
-            return
-        settings = self.dump_state()
-        try:
-            out_file = open(filename, "w")
-            out_file.write(settings)
-            out_file.close()
-            _log.info("Task settings written to %s", filename)
-            self.core.emit_event("notify-file-opened", filename)
-        except IOError:
-            _log.error("Failed to save settings file")
-
-    def load_task_settings(self, filename=None):
-        settings = pycam.Gui.Settings.ProcessSettings()
-        if filename is not None:
-            settings.load_file(filename)
-        # flush all tables (without re-assigning new objects)
-        for one_list_name in ("tools", "processes", "bounds", "tasks"):
-            one_list = self.core.settings.get(one_list_name)
-            while one_list:
-                one_list.pop()
-        # TODO: load default tools/processes/bounds
-
-    def dump_state(self):
-        result = []
-        for plugin in self.core.get("plugin-manager").get_plugins():
-            if plugin.enabled:
-                plugin.dump_state(result)
-        root = ET.Element("pycam")
-        for match, element in result:
-            chain = match.split("/")
-            if not hasattr(element, "findtext"):
-                # not an instance of ET.Element
-                element = _get_xml(element, chain[-1])
-            parent = root
-            if match:
-                for component in chain[:-1]:
-                    next_item = parent.find(component)
-                    if next_item is not None:
-                        parent = next_item
-                    else:
-                        item = ET.SubElement(parent, component)
-                        parent = item
-            parent.append(element)
-        return os.linesep.join(_get_xml_lines(root))
-
-
-def _get_xml(item, name=None):
-    if name is None:
-        if hasattr(item, "node_key"):
-            name = item.node_key
-        else:
-            name = "value"
-    if isinstance(item, (list, tuple, set)):
-        leaf = ET.Element(name)
-        leaf.attrib["type"] = str(type(item))
-        for single in item:
-            leaf.append(_get_xml(single))
-        return leaf
-    elif isinstance(item, dict):
-        leaf = ET.Element(name)
-        leaf.attrib["type"] = "dict"
-        for key, value in item.iteritems():
-            leaf.append(_get_xml(value, name=key))
-        return leaf
-    else:
-        leaf = ET.Element(name)
-        leaf.text = str(item)
-        leaf.attrib["type"] = str(type(item))
-        return leaf
-
-
-def _get_xml_lines(item):
-    lines = []
-    content = ET.tostring(item)
-    content = content.replace("><", ">\n<")
-    indent = 0
-    for line in content.split("\n"):
-        indented = False
-        if line.startswith("</"):
-            indent -= 2
-            indented = True
-        lines.append(" " * indent + line)
-        if indented:
-            pass
-        elif line.endswith("/>"):
-            pass
-        elif line.startswith("</"):
-            indent -= 2
-        elif "</" in line:
-            pass
-        else:
-            indent += 2
-    return lines
diff --git a/pycam/Plugins/TaskParameters.py b/pycam/Plugins/TaskParameters.py
index f8ee52f..fcb84b3 100644
--- a/pycam/Plugins/TaskParameters.py
+++ b/pycam/Plugins/TaskParameters.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -30,13 +29,14 @@ class TaskParamCollisionModels(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputTable(
-            [], change_handler=lambda widget=None: self.core.emit_event("task-changed"))
+            [], change_handler=lambda widget=None: self.core.emit_event("task-control-changed"))
         # The usual height of "-1" seems to hide this widget at least for the GTK version
         # shipped with 12.04 and 13.04 - see https://github.com/SebKuzminsky/pycam/issues/43.
         self.control.get_widget().set_size_request(240, 120)
         self.core.get("register_parameter")("task", "collision_models", self.control)
         self.core.register_ui("task_models", "", self.control.get_widget(), weight=5)
         self.core.register_event("model-list-changed", self._update_models)
+        self.core.register_event("model-changed", self._update_models)
         return True
 
     def teardown(self):
@@ -46,10 +46,10 @@ class TaskParamCollisionModels(pycam.Plugins.PluginBase):
 
     def _update_models(self):
         choices = []
-        models = self.core.get("models")
-        for model in models:
-            if hasattr(model.model, "triangles"):
-                choices.append((model["name"], model))
+        for model in self.core.get("models").get_all():
+            if hasattr(model.get_model(), "triangles"):
+                choices.append((model.get_application_value("name", model.get_id()),
+                                model.get_id()))
         self.control.update_choices(choices)
 
 
@@ -60,7 +60,7 @@ class TaskParamTool(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputChoice(
-            [], change_handler=lambda widget=None: self.core.emit_event("task-changed"))
+            [], change_handler=lambda widget=None: self.core.emit_event("task-control-changed"))
         self.core.get("register_parameter")("task", "tool", self.control)
         self.core.register_ui("task_components", "Tool", self.control.get_widget(), weight=10)
         self.core.register_event("tool-list-changed", self._update_tools)
@@ -73,9 +73,8 @@ class TaskParamTool(pycam.Plugins.PluginBase):
 
     def _update_tools(self):
         choices = []
-        tools = self.core.get("tools")
-        for tool in tools:
-            choices.append((tool["name"], tool))
+        for tool in self.core.get("tools").get_all():
+            choices.append((tool.get_application_value("name", tool.get_id()), tool.get_id()))
         self.control.update_choices(choices)
 
 
@@ -86,7 +85,7 @@ class TaskParamProcess(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputChoice(
-            [], change_handler=lambda widget=None: self.core.emit_event("task-changed"))
+            [], change_handler=lambda widget=None: self.core.emit_event("task-control-changed"))
         self.core.get("register_parameter")("task", "process", self.control)
         self.core.register_ui("task_components", "Process", self.control.get_widget(), weight=20)
         self.core.register_event("process-list-changed", self._update_processes)
@@ -99,9 +98,9 @@ class TaskParamProcess(pycam.Plugins.PluginBase):
 
     def _update_processes(self):
         choices = []
-        processes = self.core.get("processes")
-        for process in processes:
-            choices.append((process["name"], process))
+        for process in self.core.get("processes").get_all():
+            choices.append((process.get_application_value("name", process.get_id()),
+                            process.get_id()))
         self.control.update_choices(choices)
 
 
@@ -112,7 +111,7 @@ class TaskParamBounds(pycam.Plugins.PluginBase):
 
     def setup(self):
         self.control = pycam.Gui.ControlsGTK.InputChoice(
-            [], change_handler=lambda widget=None: self.core.emit_event("task-changed"))
+            [], change_handler=lambda widget=None: self.core.emit_event("task-control-changed"))
         self.core.get("register_parameter")("task", "bounds", self.control)
         self.core.register_ui("task_components", "Bounds", self.control.get_widget(), weight=30)
         self.core.register_event("bounds-list-changed", self._update_bounds)
@@ -126,6 +125,6 @@ class TaskParamBounds(pycam.Plugins.PluginBase):
     def _update_bounds(self):
         choices = []
         bounds = self.core.get("bounds")
-        for bound in bounds:
-            choices.append((bound["name"], bound))
+        for bound in bounds.get_all():
+            choices.append((bound.get_application_value("name", bound.get_id()), bound.get_id()))
         self.control.update_choices(choices)
diff --git a/pycam/Plugins/TaskTypes.py b/pycam/Plugins/TaskTypes.py
index faba435..5ffa0a4 100644
--- a/pycam/Plugins/TaskTypes.py
+++ b/pycam/Plugins/TaskTypes.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -31,46 +30,9 @@ class TaskTypeMilling(pycam.Plugins.PluginBase):
 
     def setup(self):
         parameters = {"collision_models": [], "tool": None, "process": None, "bounds": None}
-        self.core.get("register_parameter_set")("task", "milling", "Milling", self.run_task,
+        self.core.get("register_parameter_set")("task", "milling", "Milling", None,
                                                 parameters=parameters, weight=10)
         return True
 
     def teardown(self):
         self.core.get("unregister_parameter_set")("task", "milling")
-
-    def run_task(self, task, callback=None):
-        environment = {}
-        for key in task["parameters"]:
-            environment[key] = task["parameters"][key]
-        if environment["tool"] is None:
-            self.log.error("You need to assign a tool to this task.")
-            return
-        if environment["process"] is None:
-            self.log.error("You need to assign a process to this task.")
-            return
-        if environment["bounds"] is None:
-            self.log.error("You need to assign bounds to this task.")
-            return
-        funcs = {}
-        for key, set_name in (("tool", "shape"), ("process", "strategy")):
-            funcs[key] = self.core.get("get_parameter_sets")(
-                key)[environment[key][set_name]]["func"]
-        tool, tool_filters = funcs["tool"](environment["tool"]["parameters"])
-        box = environment["bounds"].get_absolute_limits(tool_radius=tool.radius,
-                                                        models=environment["collision_models"])
-        path_generator, motion_grid = funcs["process"](environment["process"], tool.radius, box)
-        if path_generator is None:
-            # we assume that an error message was given already
-            return
-        models = [m.model for m in task["parameters"]["collision_models"]]
-        if not models:
-            # issue a warning - and go ahead ...
-            self.log.warn("No collision model was selected. This can be intentional, but maybe "
-                          "you simply forgot it.")
-        moves = path_generator.GenerateToolPath(tool, models, motion_grid, minz=box.lower.z,
-                                                maxz=box.upper.z, draw_callback=callback)
-        if not moves:
-            self.log.info("No valid moves found")
-            return None
-        return pycam.Toolpath.Toolpath(toolpath_path=moves, tool=tool,
-                                       toolpath_filters=tool_filters)
diff --git a/pycam/Plugins/Tasks.py b/pycam/Plugins/Tasks.py
index 2242724..86bf3f0 100644
--- a/pycam/Plugins/Tasks.py
+++ b/pycam/Plugins/Tasks.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,10 +19,12 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 import time
 
-from pycam import GenericError
+from pycam.errors import PycamBaseException
+from pycam.Flow.history import merge_history_and_block_events
 import pycam.Plugins
 import pycam.Utils
-from pycam.Utils import get_non_conflicting_name
+from pycam.Utils.progress import ProgressContext
+import pycam.workspace.data_models
 
 
 class Tasks(pycam.Plugins.ListPluginBase):
@@ -31,9 +32,10 @@ class Tasks(pycam.Plugins.ListPluginBase):
     UI_FILE = "tasks.ui"
     CATEGORIES = ["Task"]
     DEPENDS = ["Models", "Tools", "Processes", "Bounds", "Toolpaths"]
+    COLLECTION_ITEM_TYPE = pycam.workspace.data_models.Task
 
     def setup(self):
-        if self.gui and self._gtk:
+        if self.gui:
             self._gtk_handlers = []
             task_frame = self.gui.get_object("TaskBox")
             task_frame.unparent()
@@ -65,14 +67,14 @@ class Tasks(pycam.Plugins.ListPluginBase):
                 align.set_padding(0, 3, 12, 3)
                 align.add(item)
                 frame.show_all()
-                parameters_box.pack_start(frame, expand=False)
+                parameters_box.pack_start(frame, expand=False, fill=False, padding=0)
 
             self.core.register_ui_section("task_parameters", add_parameter_widget,
                                           clear_parameter_widgets)
             self.core.get("register_parameter_group")(
                 "task", changed_set_event="task-type-changed",
                 changed_set_list_event="task-type-list-changed",
-                get_current_set_func=self._get_type)
+                get_related_parameter_names=self._get_type_parameter_names)
             self.models_widget = pycam.Gui.ControlsGTK.ParameterSection()
             self.core.register_ui_section("task_models", self.models_widget.add_widget,
                                           self.models_widget.clear_widgets)
@@ -85,10 +87,10 @@ class Tasks(pycam.Plugins.ListPluginBase):
                                   self.components_widget.get_widget(), weight=10)
             # table
             self._gtk_handlers.append((self.gui.get_object("NameCell"), "edited",
-                                       self._edit_task_name))
+                                       self.edit_item_name))
             selection = self._taskview.get_selection()
             self._gtk_handlers.append((selection, "changed", "task-selection-changed"))
-            selection.set_mode(self._gtk.SELECTION_MULTIPLE)
+            selection.set_mode(self._gtk.SelectionMode.MULTIPLE)
             self._treemodel = self.gui.get_object("TaskList")
             self._treemodel.clear()
             # generate toolpaths
@@ -100,20 +102,23 @@ class Tasks(pycam.Plugins.ListPluginBase):
             # shape selector
             self._gtk_handlers.append((self.gui.get_object("TaskTypeSelector"), "changed",
                                        "task-type-changed"))
+            # define cell renderers
+            self.gui.get_object("NameColumn").set_cell_data_func(self.gui.get_object("NameCell"),
+                                                                 self.render_item_name)
             self._event_handlers = (
-                ("task-type-list-changed", self._update_table),
-                ("task-selection-changed", self._task_switch),
-                ("task-changed", self._store_task),
-                ("task-changed", self._trigger_table_update),
-                ("task-type-changed", self._store_task),
-                ("task-selection-changed", self._update_widgets),
-                ("task-list-changed", self._update_widgets))
+                ("task-type-list-changed", self._update_task_type_widgets),
+                ("task-selection-changed", self._update_task_widgets),
+                ("task-selection-changed", self._update_toolpath_buttons),
+                ("task-changed", self._update_task_widgets),
+                ("task-changed", self.force_gtk_modelview_refresh),
+                ("task-list-changed", self.force_gtk_modelview_refresh),
+                ("task-list-changed", self._update_toolpath_buttons),
+                ("task-control-changed", self._transfer_controls_to_task))
             self.register_gtk_handlers(self._gtk_handlers)
             self.register_event_handlers(self._event_handlers)
-            self._update_widgets()
-            self._update_table()
-            self._task_switch()
-            self._trigger_table_update()
+            self._update_toolpath_buttons()
+            self._update_task_type_widgets()
+            self._update_task_widgets()
         self.register_state_item("tasks", self)
         self.core.set("tasks", self)
         return True
@@ -129,21 +134,11 @@ class Tasks(pycam.Plugins.ListPluginBase):
             self.core.unregister_ui_section("task_parameters")
             self.unregister_gtk_handlers(self._gtk_handlers)
             self.unregister_event_handlers(self._event_handlers)
-        while len(self) > 0:
-            self.pop()
-
-    def _edit_task_name(self, cell, path, new_text):
-        task = self.get_by_path(path)
-        if task and (new_text != task["name"]) and new_text:
-            task["name"] = new_text
+        self.clear()
 
-    def _trigger_table_update(self):
-        self.gui.get_object("NameColumn").set_cell_data_func(self.gui.get_object("NameCell"),
-                                                             self._render_task_name)
-
-    def _render_task_name(self, column, cell, model, m_iter):
-        task = self.get_by_path(model.get_path(m_iter))
-        cell.set_property("text", task["name"])
+    def _get_type_parameter_names(self):
+        the_type = self._get_type()
+        return set() if the_type is None else set(the_type["parameters"].keys())
 
     def _get_type(self, name=None):
         types = self.core.get("get_parameter_sets")("task")
@@ -171,19 +166,17 @@ class Tasks(pycam.Plugins.ListPluginBase):
         else:
             selector.set_active(-1)
 
-    def _update_table(self):
-        selected = self._get_type()
+    def _update_task_type_widgets(self):
         model = self.gui.get_object("TaskTypeList")
         model.clear()
-        types = self.core.get("get_parameter_sets")("task").values()
-        types.sort(key=lambda item: item["weight"])
-        for one_type in types:
+        types = list(self.core.get("get_parameter_sets")("task").values())
+        for one_type in sorted(types, key=lambda item: item["weight"]):
             model.append((one_type["label"], one_type["name"]))
         # check if any on the processes became obsolete due to a missing plugin
         removal = []
         type_names = [one_type["name"] for one_type in types]
-        for index, task in enumerate(self):
-            if task["type"] not in type_names:
+        for index, task in enumerate(self.get_all()):
+            if task.get_value("type") not in type_names:
                 removal.append(index)
         removal.reverse()
         for index in removal:
@@ -195,127 +188,80 @@ class Tasks(pycam.Plugins.ListPluginBase):
             selector_box.hide()
         else:
             selector_box.show()
-        if selected:
-            self.select_type(selected["name"])
 
-    def _update_widgets(self):
+    def _update_toolpath_buttons(self):
         self.gui.get_object("GenerateToolPathButton").set_sensitive(len(self.get_selected()) > 0)
-        self.gui.get_object("GenerateAllToolPathsButton").set_sensitive(len(self) > 0)
+        self.gui.get_object("GenerateAllToolPathsButton").set_sensitive(len(self.get_all()) > 0)
 
-    def _task_switch(self):
+    def _update_task_widgets(self):
         tasks = self.get_selected()
         control_box = self.gui.get_object("TaskDetails")
         if len(tasks) != 1:
             control_box.hide()
         else:
             task = tasks[0]
-            self.core.block_event("task-changed")
-            self.core.block_event("task-type-changed")
-            type_name = task["type"]
-            self.select_type(type_name)
-            self.core.get("set_parameter_values")("task", task["parameters"])
-            control_box.show()
-            self.core.unblock_event("task-type-changed")
-            self.core.unblock_event("task-changed")
-            # trigger a widget update
-            self.core.emit_event("task-type-changed")
-
-    def _store_task(self, widget=None):
+            with self.core.blocked_events({"task-control-changed"}):
+                task_type = task.get_value("type").value
+                self.select_type(task_type)
+                self.core.get("set_parameter_values")("task", task.get_dict())
+                control_box.show()
+                # trigger an update of the task parameter widgets based on the task type
+                self.core.emit_event("task-type-changed")
+
+    def _transfer_controls_to_task(self, widget=None):
         tasks = self.get_selected()
-        details_box = self.gui.get_object("TaskDetails")
-        task_type = self._get_type()
-        if (len(tasks) != 1) or not task_type:
-            details_box.hide()
-        else:
+        if len(tasks) == 1:
             task = tasks[0]
-            task["type"] = task_type["name"]
-            parameters = task["parameters"]
-            parameters.update(self.core.get("get_parameter_values")("task"))
-            details_box.show()
-
-    def _task_new(self, *args):
-        types = self.core.get("get_parameter_sets")("task").values()
-        types.sort(key=lambda item: item["weight"])
-        one_type = types[0]
-        name = get_non_conflicting_name("Task #%d", [task["name"] for task in self])
-        new_task = TaskEntity({"type": one_type["name"],
-                               "parameters": one_type["parameters"].copy(),
-                               "name": name})
-        self.append(new_task)
+            task_type = self._get_type()
+            task.set_value("type", task_type["name"])
+            for key, value in self.core.get("get_parameter_values")("task").items():
+                task.set_value(key, value)
+
+    def _task_new(self, widget=None, task_type="milling"):
+        with merge_history_and_block_events(self.core):
+            params = {"type": task_type}
+            params.update(self.core.get("get_default_parameter_values")("task",
+                                                                        set_name=task_type))
+            new_task = pycam.workspace.data_models.Task(None, data=params)
+            new_task.set_application_value("name", self.get_non_conflicting_name("Task #%d"))
         self.select(new_task)
 
     def generate_toolpaths(self, tasks):
-        progress = self.core.get("progress")
-        progress.set_multiple(len(tasks), "Toolpath")
-        for task in tasks:
-            if not self.generate_toolpath(task, progress=progress):
-                # break out of the loop, if cancel was requested
-                break
-            progress.update_multiple()
-        progress.finish()
+        with ProgressContext("Generate Toolpaths") as progress:
+            progress.set_multiple(len(tasks), "Toolpath")
+            for task in tasks:
+                if not self.generate_toolpath(task, callback=progress.update):
+                    # break out of the loop, if cancel was requested
+                    break
+                progress.update_multiple()
+        # This explicit event is necessary as the initial event hits the toolpath visualiation
+        # plugin while the path is being calculated (i.e.: it is not displayed without
+        # "show_progress").
+        self.core.emit_event("toolpath-list-changed")
 
     def _generate_selected_toolpaths(self, widget=None):
         tasks = self.get_selected()
         self.generate_toolpaths(tasks)
 
     def _generate_all_toolpaths(self, widget=None):
-        self.generate_toolpaths(self)
+        self.generate_toolpaths(self.get_all())
 
-    def generate_toolpath(self, task, progress=None):
+    def generate_toolpath(self, task, callback=None):
         start_time = time.time()
-        if progress:
-            use_multi_progress = True
-        else:
-            use_multi_progress = False
-            progress = self.core.get("progress")
-        progress.update(text="Preparing toolpath generation")
-
-        class UpdateView(object):
-            def __init__(self, task_plugin, request_redraw_function, max_fps=1):
-                self.task_plugin = task_plugin
-                self.last_update_time = time.time()
-                self.max_fps = max_fps
-                self.request_redraw_function = request_redraw_function
-                self.last_tool_position = None
-                self.current_tool_position = None
-
-            def update(self, text=None, percent=None, tool_position=None, toolpath=None):
-                if toolpath is not None:
-                    self.task_plugin.core.set("toolpath_in_progress", toolpath)
-                # always store the most recently reported tool_position for the next visualization
-                if tool_position is not None:
-                    self.current_tool_position = tool_position
-                redraw_wanted = False
-                current_time = time.time()
-                if (current_time - self.last_update_time) > 1.0 / self.max_fps:
-                    if self.current_tool_position != self.last_tool_position:
-                        tool = self.task_plugin.core.get("current_tool")
-                        if tool:
-                            tool.moveto(self.current_tool_position)
-                        self.last_tool_position = self.current_tool_position
-                        redraw_wanted = True
-                    if self.task_plugin.core.get("show_toolpath_progress"):
-                        redraw_wanted = True
-                    self.last_update_time = current_time
-                    if redraw_wanted and self.request_redraw_function:
-                        self.request_redraw_function()
-                # break the loop if someone clicked the "cancel" button
-                return progress.update(text=text, percent=percent)
-
-        tool_shape = task["parameters"]["tool"]["shape"]
-        tool_parameters = task["parameters"]["tool"]["parameters"]
-        tool = self.core.get("get_parameter_sets")("tool")[tool_shape]["func"](tool_parameters)[0]
-        self.core.set("current_tool", tool)
-        draw_callback = UpdateView(self, lambda: self.core.emit_event("visual-item-updated"),
-                                   max_fps=self.core.get("tool_progress_max_fps")).update
-        progress.update(text="Generating collision model")
+        if callback:
+            callback(text="Preparing toolpath generation")
+        self.core.set("current_tool", task.get_value("tool").get_tool_geometry())
         # run the toolpath generation
-        progress.update(text="Starting the toolpath generation")
+        if callback:
+            callback(text="Calculating the toolpath")
+        new_toolpath = pycam.workspace.data_models.Toolpath(
+            None, {"source": {"type": "task", "item": task.get_id()}})
         try:
-            task_resolver = self.core.get("get_parameter_sets")("task")[task["type"]]["func"]
-            toolpath = task_resolver(task, callback=draw_callback)
-        except GenericError as exc:
-            # an error occoured - "toolpath" contains the error message
+            # generate the toolpath (filling the cache) and check if it is empty
+            if new_toolpath.get_toolpath() is None:
+                self.log.warning("An empty toolpath was generated.")
+        except PycamBaseException as exc:
+            # an error occurred - "toolpath" contains the error message
             self.log.error("Failed to generate toolpath: %s", exc)
             # we were not successful (similar to a "cancel" request)
             return False
@@ -326,23 +272,9 @@ class Tasks(pycam.Plugins.ListPluginBase):
         finally:
             self.core.set("current_tool", None)
             self.core.set("toolpath_in_progress", None)
-            if not use_multi_progress:
-                progress.finish()
-
         self.log.info("Toolpath generation time: %f", time.time() - start_time)
-
-        if toolpath is None:
-            # user interruption
-            # return "False" if the action was cancelled
-            result = not progress.update()
+        # return "False" if the action was cancelled
+        if callback:
+            return not callback()
         else:
-            self.core.get("toolpaths").add_new(toolpath)
-            # return "False" if the action was cancelled
-            result = not progress.update()
-        return result
-
-
-class TaskEntity(pycam.Plugins.ObjectWithAttributes):
-
-    def __init__(self, parameters):
-        super(TaskEntity, self).__init__("task", parameters)
+            return True
diff --git a/pycam/Plugins/ToolParameters.py b/pycam/Plugins/ToolParameters.py
index 1c1f1dd..4f7305e 100644
--- a/pycam/Plugins/ToolParameters.py
+++ b/pycam/Plugins/ToolParameters.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,8 +19,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 
 import pycam.Plugins
-import pycam.Gui.ControlsGTK
-from pycam.Toolpath.Filters import toolpath_filter
+from pycam.Gui.ControlsGTK import InputCheckBox, InputNumber
 
 
 class ToolParamRadius(pycam.Plugins.PluginBase):
@@ -30,9 +28,9 @@ class ToolParamRadius(pycam.Plugins.PluginBase):
     CATEGORIES = ["Tool", "Parameter"]
 
     def setup(self):
-        self.control = pycam.Gui.ControlsGTK.InputNumber(
+        self.control = InputNumber(
             lower=0.001, digits=4,
-            change_handler=lambda widget=None: self.core.emit_event("tool-changed"))
+            change_handler=lambda widget=None: self.core.emit_event("tool-control-changed"))
         self.control.set_conversion(set_conv=lambda value: value * 2.0,
                                     get_conv=lambda value: value / 2.0)
         self.core.get("register_parameter")("tool", "radius", self.control)
@@ -44,22 +42,22 @@ class ToolParamRadius(pycam.Plugins.PluginBase):
         self.core.unregister_ui("tool_size", self.control.get_widget())
 
 
-class ToolParamTorusRadius(pycam.Plugins.PluginBase):
+class ToolParamToroidRadius(pycam.Plugins.PluginBase):
 
     DEPENDS = ["Tools"]
     CATEGORIES = ["Tool", "Parameter"]
 
     def setup(self):
-        self.control = pycam.Gui.ControlsGTK.InputNumber(
+        self.control = InputNumber(
             lower=0.001, digits=4,
-            change_handler=lambda widget=None: self.core.emit_event("tool-changed"))
-        self.core.get("register_parameter")("tool", "torus_radius", self.control)
-        self.core.register_ui("tool_size", "Torus Radius", self.control.get_widget(), weight=50)
+            change_handler=lambda widget=None: self.core.emit_event("tool-control-changed"))
+        self.core.get("register_parameter")("tool", "toroid_radius", self.control)
+        self.core.register_ui("tool_size", "Toroid Radius", self.control.get_widget(), weight=50)
         return True
 
     def teardown(self):
         self.core.unregister_ui("tool_size", self.control.get_widget())
-        self.core.get("unregister_parameter")("tool", "torus_radius")
+        self.core.get("unregister_parameter")("tool", "toroid_radius")
 
 
 class ToolParamFeedrate(pycam.Plugins.PluginBase):
@@ -68,43 +66,40 @@ class ToolParamFeedrate(pycam.Plugins.PluginBase):
     CATEGORIES = ["Tool", "Parameter"]
 
     def setup(self):
-        self.control = pycam.Gui.ControlsGTK.InputNumber(
+        self.control = InputNumber(
             lower=1, digits=0,
-            change_handler=lambda widget=None: self.core.emit_event("tool-changed"))
-        self.core.get("register_parameter")("tool", "feedrate", self.control)
+            change_handler=lambda widget=None: self.core.emit_event("tool-control-changed"))
+        self.core.get("register_parameter")("tool", "feed", self.control)
         self.core.register_ui("tool_speed", "Feedrate", self.control.get_widget(), weight=10)
-        self.core.register_chain("toolpath_filters", self.get_toolpath_filters)
         return True
 
     def teardown(self):
         self.core.unregister_ui("tool_speed", self.control.get_widget())
-        self.core.get("unregister_parameter")("tool", "feedrate")
-        self.core.unregister_chain("toolpath_filters", self.get_toolpath_filters)
+        self.core.get("unregister_parameter")("tool", "feed")
 
-    @toolpath_filter("tool", "feedrate")
-    def get_toolpath_filters(self, feedrate):
-        return [pycam.Toolpath.Filters.MachineSetting("feedrate", feedrate)]
 
-
-class ToolParamSpindleSpeed(pycam.Plugins.PluginBase):
+class ToolParamSpindle(pycam.Plugins.PluginBase):
 
     DEPENDS = ["Tools"]
     CATEGORIES = ["Tool", "Parameter"]
 
     def setup(self):
-        self.control = pycam.Gui.ControlsGTK.InputNumber(
-            lower=1, digits=0,
-            change_handler=lambda widget=None: self.core.emit_event("tool-changed"))
-        self.core.get("register_parameter")("tool", "spindle_speed", self.control)
-        self.core.register_ui("tool_speed", "Spindle Speed", self.control.get_widget(), weight=50)
-        self.core.register_chain("toolpath_filters", self.get_toolpath_filters)
+        self.controls = []
+        for attribute, label, weight, control_class, extra in (
+                ("spin_up_enabled", "Spindle Spin-Up/Spin-Down", 30, InputCheckBox, {}),
+                ("speed", "Spindle Speed", 40, InputNumber, {"lower": 1, "digits": 0}),
+                ("spin_up_delay", "Spindle Spin-Up Delay", 50, InputNumber,
+                 {"lower": 0, "digits": 0})):
+            control = control_class(
+                change_handler=lambda widget=None: self.core.emit_event("tool-control-changed"),
+                **extra)
+            self.core.get("register_parameter")("tool", ("spindle", attribute), control)
+            self.core.register_ui("tool_spindle", label, control.get_widget(), weight=weight)
+            self.controls.append((control, attribute))
         return True
 
     def teardown(self):
         self.core.unregister_ui("tool_speed", self.control.get_widget())
-        self.core.get("unregister_parameter")("tool", "spindle_speed")
-        self.core.unregister_chain("toolpath_filters", self.get_toolpath_filters)
-
-    @toolpath_filter("tool", "spindle_speed")
-    def get_toolpath_filters(self, spindle_speed):
-        return [pycam.Toolpath.Filters.MachineSetting("spindle_speed", spindle_speed)]
+        for control, attribute in self.controls:
+            self.core.get("unregister_parameter")("tool", ("spindle", attribute))
+            self.core.unregister_ui("tool_spindle", control.get_widget())
diff --git a/pycam/Plugins/ToolTypes.py b/pycam/Plugins/ToolTypes.py
index d4f39be..6c55f14 100644
--- a/pycam/Plugins/ToolTypes.py
+++ b/pycam/Plugins/ToolTypes.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -46,14 +45,16 @@ class ToolTypeBallNose(pycam.Plugins.PluginBase):
 
     def setup(self):
         parameters = {"radius": 1.0,
-                      "feedrate": 300,
-                      "spindle_speed": 1000}
-        self.core.get("register_parameter_set")("tool", "ballnose", "Ball nose", self.get_tool,
+                      "feed": 300,
+                      ("spindle", "speed"): 1000,
+                      ("spindle", "spin_up_enabled"): True,
+                      ("spindle", "spin_up_delay"): 3}
+        self.core.get("register_parameter_set")("tool", "ball_nose", "Ball nose", self.get_tool,
                                                 parameters=parameters, weight=20)
         return True
 
     def teardown(self):
-        self.core.get("unregister_parameter_set")("tool", "ballnose")
+        self.core.get("unregister_parameter_set")("tool", "ball_nose")
 
     @tool_params_and_filters("radius")
     def get_tool(self, radius):
@@ -62,24 +63,26 @@ class ToolTypeBallNose(pycam.Plugins.PluginBase):
 
 class ToolTypeBullNose(pycam.Plugins.PluginBase):
 
-    DEPENDS = ["Tools", "ToolParamRadius", "ToolParamTorusRadius", "ToolParamFeedrate"]
+    DEPENDS = ["Tools", "ToolParamRadius", "ToolParamToroidRadius", "ToolParamFeedrate"]
     CATEGORIES = ["Tool", "Parameter"]
 
     def setup(self):
         parameters = {"radius": 1.0,
-                      "torus_radius": 0.25,
-                      "feedrate": 300,
-                      "spindle_speed": 1000}
-        self.core.get("register_parameter_set")("tool", "bullnose", "Bull nose", self.get_tool,
+                      "toroid_radius": 0.25,
+                      "feed": 300,
+                      ("spindle", "speed"): 1000,
+                      ("spindle", "spin_up_enabled"): True,
+                      ("spindle", "spin_up_delay"): 3}
+        self.core.get("register_parameter_set")("tool", "torus", "Bull nose", self.get_tool,
                                                 parameters=parameters, weight=30)
         return True
 
     def teardown(self):
-        self.core.get("unregister_parameter_set")("tool", "bullnose")
+        self.core.get("unregister_parameter_set")("tool", "torus")
 
-    @tool_params_and_filters("radius", "torus_radius")
-    def get_tool(self, radius, torus_radius):
-        return pycam.Cutters.ToroidalCutter.ToroidalCutter(radius, torus_radius)
+    @tool_params_and_filters("radius", "toroid_radius")
+    def get_tool(self, radius, toroid_radius):
+        return pycam.Cutters.ToroidalCutter.ToroidalCutter(radius, toroid_radius)
 
 
 class ToolTypeFlat(pycam.Plugins.PluginBase):
@@ -89,14 +92,16 @@ class ToolTypeFlat(pycam.Plugins.PluginBase):
 
     def setup(self):
         parameters = {"radius": 1.0,
-                      "feedrate": 300,
-                      "spindle_speed": 1000}
-        self.core.get("register_parameter_set")("tool", "flat", "Flat bottom", self.get_tool,
-                                                parameters=parameters, weight=10)
+                      "feed": 300,
+                      ("spindle", "speed"): 1000,
+                      ("spindle", "spin_up_enabled"): True,
+                      ("spindle", "spin_up_delay"): 3}
+        self.core.get("register_parameter_set")("tool", "flat_bottom", "Flat bottom",
+                                                self.get_tool, parameters=parameters, weight=10)
         return True
 
     def teardown(self):
-        self.core.get("unregister_parameter_set")("tool", "flat")
+        self.core.get("unregister_parameter_set")("tool", "flat_bottom")
 
     @tool_params_and_filters("radius")
     def get_tool(self, radius):
diff --git a/pycam/Plugins/ToolpathCrop.py b/pycam/Plugins/ToolpathCrop.py
index 2a9fb13..9235889 100644
--- a/pycam/Plugins/ToolpathCrop.py
+++ b/pycam/Plugins/ToolpathCrop.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -19,10 +18,8 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
 
-from pycam.Geometry.Plane import Plane
 import pycam.Gui.ControlsGTK
 import pycam.Plugins
-import pycam.Toolpath.Filters as Filters
 
 
 class ToolpathCrop(pycam.Plugins.PluginBase):
@@ -36,10 +33,6 @@ class ToolpathCrop(pycam.Plugins.PluginBase):
             self._frame = self.gui.get_object("ToolpathCropFrame")
             self.core.register_ui("toolpath_handling", "Crop", self._frame, 40)
             self._gtk_handlers = []
-            for objname in ("ToolpathCropZSlice", "ToolpathCropMargin"):
-                obj = self.gui.get_object(objname)
-                obj.set_value(0)
-                self._gtk_handlers.append((obj, "value-changed", self._update_widgets))
             self._gtk_handlers.append((self.gui.get_object("CropButton"), "clicked",
                                        self.crop_toolpath))
             # model selector
@@ -78,9 +71,9 @@ class ToolpathCrop(pycam.Plugins.PluginBase):
 
     def _update_models_list(self):
         choices = []
-        models = self.core.get("models")
-        for model in models:
-            choices.append((model["name"], model))
+        for model in self.core.get("models").get_all():
+            if hasattr(model.get_model(), "get_polygons"):
+                choices.append((model.get_id(), model))
         self.models_widget.update_choices(choices)
 
     def _update_visibility(self):
@@ -90,83 +83,20 @@ class ToolpathCrop(pycam.Plugins.PluginBase):
             self._frame.hide()
 
     def _update_widgets(self, widget=None):
-        models = [m.model for m in self.models_widget.get_value()]
+        models = [m.get_model() for m in self.models_widget.get_value()]
         info_label = self.gui.get_object("ToolpathCropInfo")
         info_box = self.gui.get_object("ToolpathCropInfoBox")
         button = self.gui.get_object("CropButton")
-        slicing_models = [model for model in models if hasattr(model, "get_waterline_contour")]
-        # show or hide z-slice controls
-        slice_controls = ("ToolpathCropZSliceLabel", "ToolpathCropZSlice")
-        if slicing_models:
-            # set lower and upper limit for z-slice
-            z_slice = self.gui.get_object("ToolpathCropZSlice")
-            minz = min([model.minz for model in slicing_models])
-            maxz = max([model.maxz for model in slicing_models])
-            z_slice.set_range(minz, maxz)
-            if z_slice.get_value() > maxz:
-                z_slice.set_value(maxz)
-            elif z_slice.get_value() < minz:
-                z_slice.set_value(minz)
-            else:
-                pass
-            for name in slice_controls:
-                self.gui.get_object(name).show()
-        else:
-            for name in slice_controls:
-                self.gui.get_object(name).hide()
         # update info
         if not models:
             info_box.show()
             info_label.set_label("Hint: select a model")
             button.set_sensitive(False)
         else:
-            polygons = self._get_waterlines()
-            if polygons:
-                info_box.hide()
-                button.set_sensitive(True)
-            else:
-                info_label.set_label("Hint: there is no usable contour at this splice level")
-                info_box.show()
-                button.set_sensitive(False)
-
-    def _get_waterlines(self):
-        models = [m.model for m in self.models_widget.get_value()]
-        polygons = []
-        # get all waterlines and polygons
-        for model in models:
-            if hasattr(model, "get_polygons"):
-                for poly in model.get_polygons():
-                    polygons.append(poly.copy())
-            elif hasattr(model, "get_waterline_contour"):
-                z_slice = self.gui.get_object("ToolpathCropZSlice").get_value()
-                plane = Plane((0, 0, z_slice))
-                for poly in model.get_waterline_contour(plane).get_polygons():
-                    polygons.append(poly.copy())
-        # add an offset if requested
-        margin = self.gui.get_object("ToolpathCropMargin").get_value()
-        if margin != 0:
-            shifted = []
-            for poly in polygons:
-                shifted.extend(poly.get_offset_polygons(margin))
-            polygons = shifted
-        return polygons
+            info_box.hide()
+            button.set_sensitive(True)
 
     def crop_toolpath(self, widget=None):
-        selected = self.core.get("toolpaths").get_selected()
-        polygons = self._get_waterlines()
-        keep_original = self.gui.get_object("ToolpathCropKeepOriginal").get_active()
+        model_ids = [model.get_id() for model in self.models_widget.get_value()]
         for toolpath in self.core.get("toolpaths").get_selected():
-            # Store the new toolpath first separately - otherwise we can't
-            # revert the changes in case of an empty result.
-            new_moves = toolpath | Filters.Crop(polygons)
-            if new_moves | Filters.MovesOnly():
-                if keep_original:
-                    new_toolpath = toolpath.copy()
-                    new_toolpath.path = new_moves
-                    self.core.get("toolpaths").add_new(new_toolpath)
-                else:
-                    toolpath.path = new_moves
-                    self.core.emit_event("toolpath-changed")
-            else:
-                self.log.info("Toolpath cropping: the result is empty")
-        self.core.get("toolpaths").select(selected)
+            toolpath.append_transformation({"action": "crop", "models": model_ids})
diff --git a/pycam/Plugins/ToolpathExport.py b/pycam/Plugins/ToolpathExport.py
index a65e8e8..d57df26 100644
--- a/pycam/Plugins/ToolpathExport.py
+++ b/pycam/Plugins/ToolpathExport.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,8 +17,13 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+import datetime
+
+from pycam import VERSION
+import pycam.Gui.ControlsGTK
 import pycam.Exporters.GCode.LinuxCNC
 import pycam.Plugins
+import pycam.workspace.data_models
 
 
 FILTER_GCODE = (("GCode files", ("*.ngc", "*.nc", "*.gc", "*.gcode")),)
@@ -28,7 +32,7 @@ FILTER_GCODE = (("GCode files", ("*.ngc", "*.nc", "*.gc", "*.gcode")),)
 class ToolpathExport(pycam.Plugins.PluginBase):
 
     UI_FILE = "toolpath_export.ui"
-    DEPENDS = ["Toolpaths", "FilenameDialog", "ToolpathProcessors"]
+    DEPENDS = ["Toolpaths", "FilenameDialog", "ExportSettings"]
     CATEGORIES = ["Toolpath", "Export"]
 
     def setup(self):
@@ -64,7 +68,7 @@ class ToolpathExport(pycam.Plugins.PluginBase):
             self.gui.get_object(name).set_sensitive(bool(filtered))
 
     def export_all(self, widget=None):
-        self._export_toolpaths(self.core.get("toolpaths"))
+        self._export_toolpaths(self.core.get("toolpaths").get_all())
 
     def export_visible(self, widget=None):
         self._export_toolpaths(self.core.get("toolpaths").get_visible())
@@ -73,95 +77,49 @@ class ToolpathExport(pycam.Plugins.PluginBase):
         self._export_toolpaths(self.core.get("toolpaths").get_selected())
 
     def _export_toolpaths(self, toolpaths):
-        # TODO: this is ugly copy'n'paste from pycam.Plugins.OpenGLViewToolpath (draw_toolpaths)
-        # KEEP IN SYNC
-        processor = self.core.get("toolpath_processors").get_selected()
-        if not processor:
-            self.log.warn("No toolpath processor selected")
-            return
-        filter_func = processor["func"]
-        filter_params = self.core.get("get_parameter_values")("toolpath_processor")
-        settings_filters = filter_func(filter_params)
-        # TODO: get "public" filters (metric, ...)
-        common_filters = []
         # we open a dialog
+        # TODO: dynamically switch the dialog's filename extension with the selected export setting
         if self.core.get("gcode_filename_extension"):
             filename_extension = self.core.get("gcode_filename_extension")
         else:
             filename_extension = None
         # TODO: separate this away from Gui/Project.py
         # TODO: implement "last_model_filename" in core
+        all_export_settings = self.core.get("export_settings").get_all()
+        export_options_control = pycam.Gui.ControlsGTK.InputChoice(
+            (item.get_application_value("name", item.get_id()), item.get_id())
+            for item in all_export_settings)
+        # Configure a change handler in order to memorize the selection of the user. There is no
+        # simple other way of retrieving the result of the "extra_widget" from the
+        # "get_filename_func" handler.
+        selected_settings = {"active": export_options_control.get_value()}
+        export_options_control.connect(
+            "changed",
+            lambda: selected_settings.update({"active": export_options_control.get_value()}))
         filename = self.core.get("get_filename_func")(
             "Save toolpath to ...", mode_load=False, type_filter=FILTER_GCODE,
             filename_templates=(self._last_toolpath_file, self.core.get("last_model_filename")),
-            filename_extension=filename_extension)
+            filename_extension=filename_extension,
+            extra_widget=export_options_control.get_widget())
         if filename:
             self._last_toolpath_file = filename
         # no filename given -> exit
         if not filename:
             return
+        export = pycam.workspace.data_models.Export(None, {
+            "format": {"type": "gcode", "dialect": "linuxcnc",
+                       "comment": ("Generated by PyCAM {}: {}"
+                                   .format(VERSION, datetime.datetime.now().strftime("%Y-%m-%d"))),
+                       "export_settings": selected_settings["active"]},
+            "source": {"type": "toolpath",
+                       "items": [tp.get_id() for tp in toolpaths]},
+            "target": {"type": "file", "location": filename}})
         try:
-            destination = open(filename, "w")
-            # TODO: implement "get_meta_data()"
-#           meta_data = self.get_meta_data()
-            machine_time = 0
-            # calculate the machine time and store it in the GCode header
-            for toolpath in toolpaths:
-                machine_time += toolpath.get_machine_time()
-            # TODO: use this description for the export
-#           all_info = (meta_data + os.linesep
-#                       + "Estimated machine time: %.0f minutes" % machine_time)
-            generator = pycam.Exporters.GCode.LinuxCNC.LinuxCNC(destination)
-            generator.add_filters(settings_filters)
-            generator.add_filters(common_filters)
-            # TODO: investigate, which code pieces we need (path_mode, ...)
-            """
-            minimum_steps = [self.core.get("gcode_minimum_step_x"),
-                    self.core.get("gcode_minimum_step_y"),
-                    self.core.get("gcode_minimum_step_z")]
-            if self.core.get("touch_off_position_type") == "absolute":
-                pos_x = self.core.get("touch_off_position_x")
-                pos_y = self.core.get("touch_off_position_y")
-                pos_z = self.core.get("touch_off_position_z")
-                touch_off_pos = (pos_x, pos_y, pos_z)
-            else:
-                touch_off_pos = None
-            generator = generator_func(destination,
-                    metric_units=(self.core.get("unit") == "mm"),
-                    safety_height=safety_height,
-                    toggle_spindle_status=self.core.get("gcode_start_stop_spindle"),
-                    spindle_delay=self.core.get("gcode_spindle_delay"),
-                    comment=all_info, minimum_steps=minimum_steps,
-                    touch_off_on_startup=self.core.get("touch_off_on_startup"),
-                    touch_off_on_tool_change=self.core.get("touch_off_on_tool_change"),
-                    touch_off_position=touch_off_pos,
-                    touch_off_rapid_move=self.core.get("touch_off_rapid_move"),
-                    touch_off_slow_move=self.core.get("touch_off_slow_move"),
-                    touch_off_slow_feedrate=self.core.get("touch_off_slow_feedrate"),
-                    touch_off_height=self.core.get("touch_off_height"),
-                    touch_off_pause_execution=self.core.get("touch_off_pause_execution"))
-            path_mode = self.core.get("gcode_path_mode")
-            if path_mode == 0:
-                generator.set_path_mode(CORNER_STYLE_EXACT_PATH)
-            elif path_mode == 1:
-                generator.set_path_mode(CORNER_STYLE_EXACT_STOP)
-            elif path_mode == 2:
-                generator.set_path_mode(CORNER_STYLE_OPTIMIZE_SPEED)
-            else:
-                naive_tolerance = self.core.get("gcode_naive_tolerance")
-                if naive_tolerance == 0:
-                    naive_tolerance = None
-                generator.set_path_mode(CORNER_STYLE_OPTIMIZE_TOLERANCE,
-                        self.core.get("gcode_motion_tolerance"),
-                        naive_tolerance)
-            """
-            for toolpath in toolpaths:
-                # TODO: implement toolpath.get_meta_data()
-                generator.add_moves(toolpath.path, toolpath.filters)
-            generator.finish()
-            destination.close()
-            self.log.info("GCode file successfully written: %s", str(filename))
+            export.run_export()
         except IOError as err_msg:
             self.log.error("Failed to save toolpath file: %s", err_msg)
         else:
+            # remove the temporary export item
+            del export
+            self.log.info("GCode file successfully written: %s", str(filename))
             self.core.emit_event("notify-file-saved", filename)
diff --git a/pycam/Plugins/ToolpathGrid.py b/pycam/Plugins/ToolpathGrid.py
index cf683d4..dd117a1 100644
--- a/pycam/Plugins/ToolpathGrid.py
+++ b/pycam/Plugins/ToolpathGrid.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,7 +19,6 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 
 import pycam.Plugins
-import pycam.Toolpath.Filters as Filters
 
 
 class ToolpathGrid(pycam.Plugins.PluginBase):
@@ -53,11 +51,14 @@ class ToolpathGrid(pycam.Plugins.PluginBase):
             self.core.unregister_event("toolpath-selection-changed", self._update_widgets)
 
     def _get_toolpaths_dim(self, toolpaths):
-        if toolpaths:
-            maxx = max([tp.maxx for tp in toolpaths])
-            minx = min([tp.minx for tp in toolpaths])
-            maxy = max([tp.maxy for tp in toolpaths])
-            miny = min([tp.miny for tp in toolpaths])
+        """ calculate the maximum dimensions for x and y of all toolpaths """
+        # collect non-empty toolpaths
+        paths = [path for path in (tp.get_toolpath() for tp in toolpaths) if path]
+        if paths:
+            maxx = max([path.maxx for path in paths])
+            minx = min([path.minx for path in paths])
+            maxy = max([path.maxy for path in paths])
+            miny = min([path.miny for path in paths])
             return (maxx - minx), (maxy - miny)
         else:
             return None, None
@@ -66,6 +67,7 @@ class ToolpathGrid(pycam.Plugins.PluginBase):
         toolpaths = self.core.get("toolpaths").get_selected()
         if toolpaths:
             x_dim, y_dim = self._get_toolpaths_dim(toolpaths)
+        if toolpaths and (x_dim is not None) and (y_dim is not None):
             x_count = self.gui.get_object("GridXCount").get_value()
             x_space = self.gui.get_object("GridXDistance").get_value()
             y_count = self.gui.get_object("GridYCount").get_value()
@@ -81,27 +83,12 @@ class ToolpathGrid(pycam.Plugins.PluginBase):
             self._frame.hide()
 
     def create_toolpath_grid(self, widget=None):
-        toolpaths = self.core.get("toolpaths").get_selected()
         x_count = int(self.gui.get_object("GridXCount").get_value())
         y_count = int(self.gui.get_object("GridYCount").get_value())
         x_space = self.gui.get_object("GridXDistance").get_value()
         y_space = self.gui.get_object("GridYDistance").get_value()
-        x_dim, y_dim = self._get_toolpaths_dim(toolpaths)
-        for toolpath in toolpaths:
-            new_moves = []
-            for x in range(x_count):
-                for y in range(y_count):
-                    shift_matrix = (
-                        (1, 0, 0, x * (x_space + x_dim)),
-                        (0, 1, 0, y * (y_space + y_dim)),
-                        (0, 0, 1, 0))
-                    shifted = toolpath | Filters.TransformPosition(shift_matrix)
-                    new_moves.extend(shifted)
-            if not self.gui.get_object("KeepOriginal").get_active():
-                toolpath.path = new_moves
-                self.core.emit_event("toolpath-changed")
-            else:
-                new_toolpath = toolpath.copy()
-                new_toolpath.path = new_moves
-                self.core.get("toolpaths").add_new(new_toolpath)
-        self.core.get("toolpaths").select(toolpaths)
+        for toolpath in self.core.get("toolpaths").get_selected():
+            toolpath.append_transformation(
+                {"action": "clone", "offset": [x_space, 0, 0], "clone_count": x_count})
+            toolpath.append_transformation(
+                {"action": "clone", "offset": [0, y_space, 0], "clone_count": y_count})
diff --git a/pycam/Plugins/ToolpathProcessors.py b/pycam/Plugins/ToolpathProcessors.py
deleted file mode 100644
index 71f1240..0000000
--- a/pycam/Plugins/ToolpathProcessors.py
+++ /dev/null
@@ -1,258 +0,0 @@
-# -*- coding: utf-8 -*-
-"""
-Copyright 2012 Lars Kruse <devel@sumpfralle.de>
-
-This file is part of PyCAM.
-
-PyCAM is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-PyCAM is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
-"""
-
-
-import pycam.Gui.ControlsGTK
-import pycam.Plugins
-from pycam.Toolpath import CORNER_STYLE_EXACT_PATH
-import pycam.Utils.log
-
-
-class ToolpathProcessors(pycam.Plugins.ListPluginBase):
-
-    DEPENDS = ["Toolpaths", "ParameterGroupManager"]
-    CATEGORIES = ["Toolpath"]
-    UI_FILE = "toolpath_processors.ui"
-
-    def setup(self):
-        if self._gtk and self._gtk:
-            notebook = self.gui.get_object("GCodePrefsNotebook")
-            self._pref_items = []
-
-            def clear_preferences():
-                for child in notebook.get_children():
-                    notebook.remove(child)
-                    # we need to clear the whole path down to the "real" item
-                    parent = notebook
-                    while child not in [entry[0] for entry in self._pref_items]:
-                        if child.get_parent():
-                            parent.remove(child)
-                        parent = child
-                        try:
-                            child = child.get_children()[0]
-                        except (AttributeError, IndexError):
-                            # We encountered an invalid item (e.g. a label
-                            # without children) or an empty item.
-                            break
-                    else:
-                        # we found a valid child -> remove it
-                        signals = [entry[1] for entry in self._pref_items if child is entry[0]][0]
-                        while signals:
-                            child.disconnect(signals.pop())
-                        parent.remove(child)
-
-            def update_preference_item_visibility(widget, *args):
-                """ This function takes care for hiding empty pages of the
-                    notebook.
-                """
-                parent = args[-1]
-                if parent is widget:
-                    return
-                if widget.get_property("visible"):
-                    parent.show()
-                else:
-                    parent.hide()
-
-            def add_preferences_item(item, name):
-                matching_entries = [obj for obj in self._pref_items if obj[0] is item]
-                if matching_entries:
-                    current_entry = matching_entries[0]
-                else:
-                    current_entry = (item, [])
-                    self._pref_items.append(current_entry)
-                item.unparent()
-                if not isinstance(item, self._gtk.Frame):
-                    # create a simple default frame if none was given
-                    frame = self._gtk.Frame(name)
-                    frame.get_label_widget().set_markup("<b>%s</b>" % name)
-                    frame.set_shadow_type(self._gtk.SHADOW_NONE)
-                    align = self._gtk.Alignment()
-                    align.set_padding(3, 0, 12, 0)
-                    frame.add(align)
-                    frame.show()
-                    align.add(item)
-                    align.show()
-                    parent = frame
-                else:
-                    parent = item
-                if not current_entry[1]:
-                    for signal in ("hide", "show"):
-                        current_entry[1].append(
-                            item.connect(signal, update_preference_item_visibility, parent))
-                notebook.append_page(parent, self._gtk.Label(name))
-                update_preference_item_visibility(item, parent)
-
-            self.core.register_ui_section("gcode_preferences", add_preferences_item,
-                                          clear_preferences)
-            general_widget = pycam.Gui.ControlsGTK.ParameterSection()
-            general_widget.get_widget().show()
-            self.core.register_ui_section("gcode_general_parameters", general_widget.add_widget,
-                                          general_widget.clear_widgets)
-            self.core.register_ui("gcode_preferences", "General", general_widget.get_widget())
-            self._frame = self.gui.get_object("SettingsFrame")
-            self.core.register_ui("toolpath_handling", "Settings", self._frame)
-            self.gui.get_object("PreferencesButton").connect("clicked",
-                                                             self._set_window_visibility, True)
-            self.gui.get_object("CloseButton").connect("clicked", self._set_window_visibility,
-                                                       False)
-            self.window = self.gui.get_object("GCodePreferencesWindow")
-            self.window.connect("delete-event", self._set_window_visibility, False)
-            self._proc_selector = pycam.Gui.ControlsGTK.InputChoice(
-                [], change_handler=lambda widget=None: self.core.emit_event(
-                    "toolpath-processor-selection-changed"))
-            proc_widget = self._proc_selector.get_widget()
-            self._settings_section = pycam.Gui.ControlsGTK.ParameterSection()
-            self._settings_section.get_widget().show()
-            self.gui.get_object("SelectorsContainer").add(self._settings_section.get_widget())
-            self._settings_section.add_widget(proc_widget, "Toolpath processor", weight=10)
-            # TODO: it is currently not possible to switch processors (invalid dict entries are
-            #       not removed)
-            proc_widget.hide()
-#           proc_widget.show()
-            self.core.get("register_parameter_group")(
-                "toolpath_processor", changed_set_event="toolpath-processor-selection-changed",
-                changed_set_list_event="toolpath-processor-list-changed",
-                get_current_set_func=self.get_selected)
-            self._event_handlers = (
-                ("toolpath-processor-list-changed", self._update_processors),
-                ("toolpath-selection-changed", self._update_visibility),
-                ("notify-initialization-finished", self._select_first_processor))
-            self.register_event_handlers(self._event_handlers)
-            self._update_processors()
-            self._update_visibility()
-        self.core.set("toolpath_processors", self)
-        return True
-
-    def teardown(self):
-        if self.gui and self._gtk:
-            self._set_window_visibility(False)
-        self.core.set("toolpath_processors", None)
-        self.unregister_event_handlers(self._event_handlers)
-        self.core.get("unregister_parameter_group")("toolpath_processor")
-
-    def _select_first_processor(self):
-        # run this action as soon as all processors are registered
-        processors = self.core.get("get_parameter_sets")("toolpath_processor").values()
-        processors.sort(key=lambda item: item["weight"])
-        if processors:
-            self.select(processors[0])
-
-    def get_selected(self):
-        all_processors = self.core.get("get_parameter_sets")("toolpath_processor")
-        current_name = self._proc_selector.get_value()
-        return all_processors.get(current_name, None)
-
-    def select(self, item=None):
-        if item is not None:
-            item = item["name"]
-        self._proc_selector.set_value(item)
-
-    def _update_visibility(self):
-        # TODO: the gcode settings are valid for _all_ toolpaths - thus it should always be visible
-        if True or self.core.get("toolpaths").get_selected():
-            self._frame.show()
-        else:
-            self._frame.hide()
-
-    def _update_processors(self):
-        selected = self.get_selected()
-        processors = self.core.get("get_parameter_sets")("toolpath_processor").values()
-        processors.sort(key=lambda item: item["weight"])
-        choices = []
-        for processor in processors:
-            choices.append((processor["label"], processor["name"]))
-        self._proc_selector.update_choices(choices)
-        if selected:
-            self.select(selected)
-        elif len(processors) > 0:
-            self.select(None)
-        else:
-            pass
-
-    def _set_window_visibility(self, *args):
-        status = args[-1]
-        if status:
-            self.window.show()
-        else:
-            self.window.hide()
-        # don't destroy the window
-        return True
-
-
-def _get_processor_filters(core, parameters):
-    filters = []
-    core.call_chain("toolpath_filters", "settings", parameters, filters)
-    return filters
-
-
-class ToolpathProcessorMilling(pycam.Plugins.PluginBase):
-
-    DEPENDS = ["Toolpaths", "GCodeSafetyHeight", "GCodePlungeFeedrate", "GCodeFilenameExtension",
-               "GCodeStepWidth", "GCodeSpindle", "GCodeCornerStyle"]
-    CATEGORIES = ["Toolpath"]
-
-    def setup(self):
-        parameters = {"safety_height": 25,
-                      "plunge_feedrate": 100,
-                      "filename_extension": "",
-                      "step_width_x": 0.0001,
-                      "step_width_y": 0.0001,
-                      "step_width_z": 0.0001,
-                      "path_mode": CORNER_STYLE_EXACT_PATH,
-                      "motion_tolerance": 0.0,
-                      "naive_tolerance": 0.0,
-                      "spindle_enable": True,
-                      "spindle_delay": 3,
-                      "touch_off": None}
-        self.core.get("register_parameter_set")(
-            "toolpath_processor", "milling", "Milling",
-            lambda params: _get_processor_filters(self.core, params), parameters=parameters,
-            weight=10)
-        # initialize all parameters
-        self.core.get("set_parameter_values")("toolpath_processor", parameters)
-        return True
-
-    def teardown(self):
-        self.core.get("unregister_parameter_set")("toolpath_processor", "milling")
-
-
-class ToolpathProcessorLaser(pycam.Plugins.PluginBase):
-
-    DEPENDS = ["Toolpaths", "GCodeFilenameExtension", "GCodeStepWidth", "GCodeCornerStyle"]
-    CATEGORIES = ["Toolpath"]
-
-    def setup(self):
-        parameters = {"filename_extension": "",
-                      "step_width_x": 0.0001,
-                      "step_width_y": 0.0001,
-                      "step_width_z": 0.0001,
-                      "path_mode": CORNER_STYLE_EXACT_PATH,
-                      "motion_tolerance": 0.0,
-                      "naive_tolerance": 0.0}
-        self.core.get("register_parameter_set")(
-            "toolpath_processor", "laser", "Laser",
-            lambda params: _get_processor_filters(self.core, params), parameters=parameters,
-            weight=50)
-        # initialize all parameters
-        self.core.get("set_parameter_values")("toolpath_processor", parameters)
-        return True
-
-    def teardown(self):
-        self.core.get("unregister_parameter_set")("toolpath_processor", "laser")
diff --git a/pycam/Plugins/ToolpathProfiles.py b/pycam/Plugins/ToolpathProfiles.py
new file mode 100644
index 0000000..c0c581b
--- /dev/null
+++ b/pycam/Plugins/ToolpathProfiles.py
@@ -0,0 +1,85 @@
+"""
+Copyright 2012 Lars Kruse <devel@sumpfralle.de>
+
+This file is part of PyCAM.
+
+PyCAM is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
+"""
+
+import pycam.Gui.ControlsGTK
+import pycam.Plugins
+from pycam.Toolpath import ToolpathPathMode
+import pycam.Utils.log
+
+
+def _get_profile_filters(core, parameters):
+    filters = []
+    core.call_chain("toolpath_filters", "settings", parameters, filters)
+    return filters
+
+
+class ToolpathProfileMilling(pycam.Plugins.PluginBase):
+
+    DEPENDS = ["Toolpaths", "GCodeSafetyHeight", "GCodePlungeFeedrate", "GCodeFilenameExtension",
+               "GCodeStepWidth", "GCodeCornerStyle"]
+    CATEGORIES = ["Toolpath"]
+
+    def setup(self):
+        parameters = {
+            "safety_height": 25,
+            "plunge_feedrate": 100,
+            "filename_extension": "",
+            ("step_width", "x"): 0.0001,
+            ("step_width", "y"): 0.0001,
+            ("step_width", "z"): 0.0001,
+            ("corner_style", "mode"): ToolpathPathMode.CORNER_STYLE_OPTIMIZE_TOLERANCE.value,
+            ("corner_style", "motion_tolerance"): 0.0,
+            ("corner_style", "naive_tolerance"): 0.0,
+            "touch_off": None}
+        self.core.get("register_parameter_set")(
+            "toolpath_profile", "milling", "Milling",
+            lambda params: _get_profile_filters(self.core, params), parameters=parameters,
+            weight=10)
+        # initialize all parameters
+        self.core.get("set_parameter_values")("toolpath_profile", parameters)
+        return True
+
+    def teardown(self):
+        self.core.get("unregister_parameter_set")("toolpath_profile", "milling")
+
+
+class ToolpathProfileLaser(pycam.Plugins.PluginBase):
+
+    DEPENDS = ["Toolpaths", "GCodeFilenameExtension", "GCodeStepWidth", "GCodeCornerStyle"]
+    CATEGORIES = ["Toolpath"]
+
+    def setup(self):
+        parameters = {
+            "filename_extension": "",
+            ("step_width", "x"): 0.0001,
+            ("step_width", "y"): 0.0001,
+            ("step_width", "z"): 0.0001,
+            ("corner_style", "mode"): ToolpathPathMode.CORNER_STYLE_OPTIMIZE_TOLERANCE.value,
+            ("corner_style", "motion_tolerance"): 0.0,
+            ("corner_style", "naive_tolerance"): 0.0}
+        self.core.get("register_parameter_set")(
+            "toolpath_profile", "laser", "Laser",
+            lambda params: _get_profile_filters(self.core, params), parameters=parameters,
+            weight=50)
+        # initialize all parameters
+        self.core.get("set_parameter_values")("toolpath_profile", parameters)
+        return True
+
+    def teardown(self):
+        self.core.get("unregister_parameter_set")("toolpath_profile", "laser")
diff --git a/pycam/Plugins/ToolpathSimulation.py b/pycam/Plugins/ToolpathSimulation.py
index 98c87c9..c1eb0b2 100644
--- a/pycam/Plugins/ToolpathSimulation.py
+++ b/pycam/Plugins/ToolpathSimulation.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -20,8 +19,6 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 import datetime
 
-import gobject
-
 import pycam.Gui.common
 import pycam.Plugins
 
@@ -89,18 +86,18 @@ class ToolpathSimulation(pycam.Plugins.PluginBase):
                 # this should not happen
                 return
             # we use only one toolpath
-            self._toolpath = toolpaths[0]
+            self._toolpath = toolpaths[0].get_toolpath()
             # calculate duration (in seconds)
             self._duration = 60 * self._toolpath.get_machine_move_distance_and_time()[1]
             self._progress.set_upper(self._duration)
             self._progress.set_value(0)
             self._toolpath_moves = None
             self.core.set("show_simulation", True)
-            self.core.set("current_tool", self._toolpath.tool)
+            self.core.set("current_tool", self._toolpath.tool.get_tool_geometry())
             self._running = True
             interval_ms = int(1000 / self.core.get("tool_progress_max_fps"))
             pycam.Gui.common.set_parent_controls_sensitivity(self._frame, False)
-            gobject.timeout_add(interval_ms, self._next_timestep)
+            self._gobject.timeout_add(interval_ms, self._next_timestep)
         else:
             self._running = True
         self._start_button.set_sensitive(False)
diff --git a/pycam/Plugins/Toolpaths.py b/pycam/Plugins/Toolpaths.py
index 320a890..5ce7d3f 100644
--- a/pycam/Plugins/Toolpaths.py
+++ b/pycam/Plugins/Toolpaths.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -21,7 +20,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 
 import pycam.Plugins
 import pycam.Toolpath
-from pycam.Utils import get_non_conflicting_name
+import pycam.workspace.data_models
 
 
 class Toolpaths(pycam.Plugins.ListPluginBase):
@@ -29,10 +28,10 @@ class Toolpaths(pycam.Plugins.ListPluginBase):
     UI_FILE = "toolpaths.ui"
     CATEGORIES = ["Toolpath"]
     ICONS = {"visible": "visible.svg", "hidden": "visible_off.svg"}
+    COLLECTION_ITEM_TYPE = pycam.workspace.data_models.Toolpath
 
     def setup(self):
-        self.last_toolpath_file = None
-        if self.gui and self._gtk:
+        if self.gui:
             self.tp_box = self.gui.get_object("ToolpathsBox")
             self.tp_box.unparent()
             self.core.register_ui("main", "Toolpaths", self.tp_box, weight=50)
@@ -61,22 +60,26 @@ class Toolpaths(pycam.Plugins.ListPluginBase):
                                           clear_toolpath_handling_obj)
             # handle table changes
             self._gtk_handlers.extend((
-                (self._modelview, "row-activated", self._toggle_visibility),
+                (self._modelview, "row-activated", self.toggle_item_visibility),
                 (self._modelview, "row-activated", "toolpath-changed"),
-                (self.gui.get_object("ToolpathNameCell"), "edited", self._edit_toolpath_name)))
+                (self.gui.get_object("ToolpathNameCell"), "edited", self.edit_item_name)))
             # handle selection changes
             selection = self._modelview.get_selection()
             self._gtk_handlers.append((selection, "changed", "toolpath-selection-changed"))
-            selection.set_mode(self._gtk.SELECTION_MULTIPLE)
+            selection.set_mode(self._gtk.SelectionMode.MULTIPLE)
+            # define cell renderers
+            self.gui.get_object("ToolpathNameColumn").set_cell_data_func(
+                self.gui.get_object("ToolpathNameCell"), self.render_item_name)
+            self.gui.get_object("ToolpathTimeColumn").set_cell_data_func(
+                self.gui.get_object("ToolpathTimeCell"), self._render_machine_time)
+            self.gui.get_object("ToolpathVisibleColumn").set_cell_data_func(
+                self.gui.get_object("ToolpathVisibleSymbol"), self.render_item_visible_state)
             self._event_handlers = (
-                ("toolpath-changed", self._update_widgets),
-                ("toolpath-list-changed", self._update_widgets),
-                ("toolpath-changed", "visual-item-updated"),
-                ("toolpath-list-changed", "visual-item-updated"))
+                ("toolpath-list-changed", self._update_toolpath_tab_visibility),
+                ("toolpath-list-changed", self.force_gtk_modelview_refresh))
             self.register_gtk_handlers(self._gtk_handlers)
             self.register_event_handlers(self._event_handlers)
-            self._trigger_table_update()
-            self._update_widgets()
+            self._update_toolpath_tab_visibility()
         self.core.set("toolpaths", self)
         self.core.register_namespace("toolpaths", pycam.Plugins.get_filter(self))
         return True
@@ -89,48 +92,14 @@ class Toolpaths(pycam.Plugins.ListPluginBase):
             self.unregister_event_handlers(self._event_handlers)
         self.core.set("toolpaths", None)
 
-    def get_visible(self):
-        return [tp for tp in self if tp["visible"]]
-
-    def _update_widgets(self):
-        toolpaths = self
-        if not toolpaths:
-            self.tp_box.hide()
-        else:
+    def _update_toolpath_tab_visibility(self):
+        has_toolpaths = len(self.get_all()) > 0
+        if has_toolpaths:
             self.tp_box.show()
-            self._trigger_table_update()
-
-    def _trigger_table_update(self):
-        self.gui.get_object("ToolpathNameColumn").set_cell_data_func(
-            self.gui.get_object("ToolpathNameCell"), self._visualize_toolpath_name)
-        self.gui.get_object("ToolpathTimeColumn").set_cell_data_func(
-            self.gui.get_object("ToolpathTimeCell"), self._visualize_machine_time)
-        self.gui.get_object("ToolpathVisibleColumn").set_cell_data_func(
-            self.gui.get_object("ToolpathVisibleSymbol"), self._visualize_visible_state)
-
-    def _toggle_visibility(self, treeview, path, column):
-        toolpath = self.get_by_path(path)
-        if toolpath:
-            toolpath["visible"] = not toolpath["visible"]
-        self.core.emit_event("visual-item-updated")
-
-    def _edit_toolpath_name(self, cell, path, new_text):
-        toolpath = self.get_by_path(path)
-        if toolpath and (new_text != toolpath["name"]) and new_text:
-            toolpath["name"] = new_text
-
-    def _visualize_toolpath_name(self, column, cell, model, m_iter):
-        toolpath = self.get_by_path(model.get_path(m_iter))
-        cell.set_property("text", toolpath["name"])
-
-    def _visualize_visible_state(self, column, cell, model, m_iter):
-        toolpath = self.get_by_path(model.get_path(m_iter))
-        if toolpath["visible"]:
-            cell.set_property("pixbuf", self.ICONS["visible"])
         else:
-            cell.set_property("pixbuf", self.ICONS["hidden"])
+            self.tp_box.hide()
 
-    def _visualize_machine_time(self, column, cell, model, m_iter):
+    def _render_machine_time(self, column, cell, model, m_iter, data):
         def get_time_string(minutes):
             if minutes > 180:
                 return "%d hours" % int(round(minutes / 60))
@@ -140,24 +109,9 @@ class Toolpaths(pycam.Plugins.ListPluginBase):
                 return "%d seconds" % int(round(minutes * 60))
 
         toolpath = self.get_by_path(model.get_path(m_iter))
-        text = get_time_string(toolpath.get_machine_time())
+        path = toolpath.get_toolpath()
+        if path:
+            text = get_time_string(path.get_machine_time())
+        else:
+            text = "empty"
         cell.set_property("text", text)
-
-    def add_new(self, new_tp, name=None):
-        assert isinstance(new_tp, pycam.Toolpath.Toolpath), \
-                "Invalid type: %s (%s)" % (type(new_tp), new_tp)
-        moves = new_tp.path
-        tool = new_tp.tool
-        filters = new_tp.filters
-        if name is None:
-            name = get_non_conflicting_name("Toolpath #%d", [tp["name"] for tp in self])
-        attributes = {"visible": True, "name": name}
-        new_tp = ToolpathEntity(toolpath_path=moves, attributes=attributes,
-                                toolpath_filters=filters, tool=tool)
-        self.append(new_tp)
-
-
-class ToolpathEntity(pycam.Toolpath.Toolpath, pycam.Plugins.ObjectWithAttributes):
-
-    def __init__(self, **kwargs):
-        super(ToolpathEntity, self).__init__(node_key="toolpath", **kwargs)
diff --git a/pycam/Plugins/Tools.py b/pycam/Plugins/Tools.py
index e7d3143..7d7d308 100644
--- a/pycam/Plugins/Tools.py
+++ b/pycam/Plugins/Tools.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -19,7 +18,8 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
 import pycam.Plugins
-from pycam.Toolpath.Filters import toolpath_filter
+from pycam.Flow.history import merge_history_and_block_events
+import pycam.workspace.data_models
 
 
 class Tools(pycam.Plugins.ListPluginBase):
@@ -27,10 +27,11 @@ class Tools(pycam.Plugins.ListPluginBase):
     DEPENDS = ["ParameterGroupManager"]
     CATEGORIES = ["Tool"]
     UI_FILE = "tools.ui"
+    COLLECTION_ITEM_TYPE = pycam.workspace.data_models.Tool
 
     def setup(self):
         self.core.set("tools", self)
-        if self.gui and self._gtk:
+        if self.gui:
             tool_frame = self.gui.get_object("ToolBox")
             tool_frame.unparent()
             self.core.register_ui("main", "Tools", tool_frame, weight=10)
@@ -62,14 +63,14 @@ class Tools(pycam.Plugins.ListPluginBase):
                 align.set_padding(0, 3, 12, 3)
                 align.add(item)
                 frame.show_all()
-                parameters_box.pack_start(frame, expand=True)
+                parameters_box.pack_start(frame, expand=True, fill=True, padding=0)
 
             self.core.register_ui_section("tool_parameters", add_parameter_widget,
                                           clear_parameter_widgets)
             self.core.get("register_parameter_group")(
                 "tool", changed_set_event="tool-shape-changed",
                 changed_set_list_event="tool-shape-list-changed",
-                get_current_set_func=self._get_shape)
+                get_related_parameter_names=self._get_selected_shape_parameter_names)
             self.size_widget = pycam.Gui.ControlsGTK.ParameterSection()
             self.core.register_ui("tool_parameters", "Size", self.size_widget.get_widget(),
                                   weight=10)
@@ -80,34 +81,42 @@ class Tools(pycam.Plugins.ListPluginBase):
                                   weight=20)
             self.core.register_ui_section("tool_speed", self.speed_widget.add_widget,
                                           self.speed_widget.clear_widgets)
+            self.spindle_widget = pycam.Gui.ControlsGTK.ParameterSection()
+            self.core.register_ui("tool_parameters", "Spindle", self.spindle_widget.get_widget(),
+                                  weight=30)
+            self.core.register_ui_section("tool_spindle", self.spindle_widget.add_widget,
+                                          self.spindle_widget.clear_widgets)
             # table updates
             cell = self.gui.get_object("ShapeCell")
             self.gui.get_object("ShapeColumn").set_cell_data_func(cell, self._render_tool_shape)
             self._gtk_handlers.append((self.gui.get_object("IDCell"), "edited",
                                        self._edit_tool_id))
             self._gtk_handlers.append((self.gui.get_object("NameCell"), "edited",
-                                       self._edit_tool_name))
-            self._treemodel = self.gui.get_object("ToolList")
-            self._treemodel.clear()
+                                       self.edit_item_name))
             # selector
             self._gtk_handlers.append((self._modelview.get_selection(), "changed",
                                        "tool-selection-changed"))
             # shape selector
             self._gtk_handlers.append((self.gui.get_object("ToolShapeSelector"), "changed",
-                                       "tool-shape-changed"))
+                                       "tool-control-changed"))
+            # define cell renderers
+            self.gui.get_object("IDColumn").set_cell_data_func(
+                self.gui.get_object("IDCell"), self._render_tool_info, "tool_id")
+            self.gui.get_object("NameColumn").set_cell_data_func(
+                self.gui.get_object("NameCell"), self._render_tool_info, "name")
+            self.gui.get_object("ShapeColumn").set_cell_data_func(
+                self.gui.get_object("ShapeCell"), self._render_tool_shape)
             self._event_handlers = (
-                ("tool-shape-list-changed", self._update_widgets),
-                ("tool-selection-changed", self._tool_switch),
-                ("tool-changed", self._store_tool_settings),
-                ("tool-changed", self._trigger_table_update),
-                ("tool-list-changed", self._trigger_table_update),
-                ("tool-shape-changed", self._store_tool_settings))
+                ("tool-shape-list-changed", self._update_shape_widgets),
+                ("tool-selection-changed", self._update_tool_widgets),
+                ("tool-changed", self._update_tool_widgets),
+                ("tool-changed", self.force_gtk_modelview_refresh),
+                ("tool-list-changed", self.force_gtk_modelview_refresh),
+                ("tool-control-changed", self._transfer_controls_to_tool))
             self.register_gtk_handlers(self._gtk_handlers)
             self.register_event_handlers(self._event_handlers)
-            self._update_widgets()
-            self._trigger_table_update()
-            self._tool_switch()
-        self.core.register_chain("toolpath_filters", self.get_toolpath_filters)
+            self._update_shape_widgets()
+            self._update_tool_widgets()
         self.core.register_namespace("tools", pycam.Plugins.get_filter(self))
         self.register_state_item("tools", self)
         return True
@@ -115,50 +124,32 @@ class Tools(pycam.Plugins.ListPluginBase):
     def teardown(self):
         self.clear_state_items()
         self.core.unregister_namespace("tools")
-        self.core.unregister_chain("toolpath_filters", self.get_toolpath_filters)
         if self.gui and self._gtk:
             self.core.unregister_ui("main", self.gui.get_object("ToolBox"))
             self.core.unregister_ui_section("tool_speed")
             self.core.unregister_ui_section("tool_size")
             self.core.unregister_ui("tool_parameters", self.size_widget.get_widget())
             self.core.unregister_ui("tool_parameters", self.speed_widget.get_widget())
+            self.core.unregister_ui("tool_parameters", self.spindle_widget.get_widget())
             self.core.unregister_ui_section("tool_parameters")
             self.unregister_gtk_handlers(self._gtk_handlers)
             self.unregister_event_handlers(self._event_handlers)
         self.core.set("tools", None)
-        while len(self) > 0:
-            self.pop()
+        self.clear()
         return True
 
-    def _trigger_table_update(self):
-        self.gui.get_object("IDColumn").set_cell_data_func(
-            self.gui.get_object("IDCell"), self._render_tool_info, "id")
-        self.gui.get_object("NameColumn").set_cell_data_func(
-            self.gui.get_object("NameCell"), self._render_tool_info, "name")
-        self.gui.get_object("ShapeColumn").set_cell_data_func(
-            self.gui.get_object("ShapeCell"), self._render_tool_shape)
-
     def _render_tool_info(self, column, cell, model, m_iter, key):
-        path = model.get_path(m_iter)
-        tool = self[path[0]]
-        cell.set_property("text", str(tool[key]))
-
-    def _render_tool_shape(self, column, cell, model, m_iter):
         tool = self.get_by_path(model.get_path(m_iter))
-        if not tool:
-            return
-        parameters = tool["parameters"]
-        if "radius" in parameters:
-            text = "%g%s" % (2 * parameters["radius"], self.core.get("unit"))
+        if key in ("tool_id", ):
+            text = tool.get_value(key)
         else:
-            text = ""
-        cell.set_property("text", text)
+            text = tool.get_application_value(key)
+        cell.set_property("text", str(text))
 
-    def _edit_tool_name(self, cell, path, new_text):
-        tool = self.get_by_path(path)
-        if tool and (new_text != tool["name"]) and new_text:
-            tool["name"] = new_text
-            self.core.emit_event("tool-list-changed")
+    def _render_tool_shape(self, column, cell, model, m_iter, data):
+        tool = self.get_by_path(model.get_path(m_iter))
+        text = "%g%s" % (tool.diameter, self.core.get("unit"))
+        cell.set_property("text", text)
 
     def _edit_tool_id(self, cell, path, new_text):
         tool = self.get_by_path(path)
@@ -166,10 +157,14 @@ class Tools(pycam.Plugins.ListPluginBase):
             new_value = int(new_text)
         except ValueError:
             return
-        if tool and (new_value != tool["id"]):
-            tool["id"] = new_value
+        if tool and (new_value != tool.get_value("tool_id")):
+            tool.set_value("tool_id", new_value)
 
-    def _get_shape(self, name=None):
+    def _get_selected_shape_parameter_names(self):
+        shape = self._get_selected_shape()
+        return set() if shape is None else set(shape["parameters"].keys())
+
+    def _get_selected_shape(self, name=None):
         shapes = self.core.get("get_parameter_sets")("tool")
         if name is None:
             # find the currently selected one
@@ -195,19 +190,19 @@ class Tools(pycam.Plugins.ListPluginBase):
         else:
             selector.set_active(-1)
 
-    def _update_widgets(self):
-        selected = self._get_shape()
+    def _update_shape_widgets(self):
+        """update controls that depend on the list of available shapes"""
         model = self.gui.get_object("ToolShapeList")
         model.clear()
-        shapes = self.core.get("get_parameter_sets")("tool").values()
+        shapes = list(self.core.get("get_parameter_sets")("tool").values())
         shapes.sort(key=lambda item: item["weight"])
         for shape in shapes:
             model.append((shape["label"], shape["name"]))
-        # check if any on the processes became obsolete due to a missing plugin
+        # check if any on the tools became obsolete due to a missing plugin
         removal = []
         shape_names = [shape["name"] for shape in shapes]
-        for index, tool in enumerate(self):
-            if not tool["shape"] in shape_names:
+        for index, tool in enumerate(self.get_all()):
+            if not tool.get_value("shape").value in shape_names:
                 removal.append(index)
         removal.reverse()
         for index in removal:
@@ -219,63 +214,43 @@ class Tools(pycam.Plugins.ListPluginBase):
             selector_box.hide()
         else:
             selector_box.show()
-        if selected:
-            self.select_shape(selected["name"])
 
-    def _store_tool_settings(self):
+    def _update_tool_widgets(self, widget=None):
+        """transfer the content of the currently selected tool to the related widgets"""
         tool = self.get_selected()
         control_box = self.gui.get_object("ToolSettingsControlsBox")
-        shape = self._get_shape()
-        if tool is None or shape is None:
+        if tool is None:
             control_box.hide()
         else:
-            tool["shape"] = shape["name"]
-            parameters = tool["parameters"]
-            parameters.update(self.core.get("get_parameter_values")("tool"))
-            control_box.show()
-            self._trigger_table_update()
+            with self.core.blocked_events({"tool-control-changed"}):
+                shape_name = tool.get_value("shape").value
+                self.select_shape(shape_name)
+                self.core.get("set_parameter_values")("tool", tool.get_dict())
+                control_box.show()
+                # trigger an update of the tool parameter widgets based on the shape
+                self.core.emit_event("tool-shape-changed")
+
+    def _transfer_controls_to_tool(self):
+        """the value of a tool-related control was changed by by the user
 
-    def _tool_switch(self, widget=None, data=None):
+        The changed value needs to be transferred to the currently selected tool.
+        """
         tool = self.get_selected()
-        control_box = self.gui.get_object("ToolSettingsControlsBox")
-        if not tool:
-            control_box.hide()
-        else:
-            self.core.block_event("tool-changed")
-            self.core.block_event("tool-shape-changed")
-            shape_name = tool["shape"]
-            self.select_shape(shape_name)
-            self.core.get("set_parameter_values")("tool", tool["parameters"])
-            control_box.show()
-            self.core.unblock_event("tool-shape-changed")
-            self.core.unblock_event("tool-changed")
-            # trigger a widget update
-            self.core.emit_event("tool-shape-changed")
+        shape = self._get_selected_shape()
+        if tool and shape:
+            tool.set_value("shape", shape["name"])
+            for key, value in self.core.get("get_parameter_values")("tool").items():
+                tool.set_value(key, value)
 
-    def _get_new_tool_id_and_name(self):
-        tools = self.core.get("tools")
-        tool_ids = [tool["id"] for tool in tools]
+    def _tool_new(self, widget=None, shape="flat_bottom"):
+        # look for an unused tool ID
+        existing_tool_ids = [tool.get_value("tool_id") for tool in self.get_all()]
         tool_id = 1
-        while tool_id in tool_ids:
+        while tool_id in existing_tool_ids:
             tool_id += 1
-        return (tool_id, "Tool #%d" % tool_id)
-
-    def _tool_new(self, *args):
-        shapes = self.core.get("get_parameter_sets")("tool").values()
-        shapes.sort(key=lambda item: item["weight"])
-        shape = shapes[0]
-        tool_id, tool_name = self._get_new_tool_id_and_name()
-        new_tool = ToolEntity({"shape": shape["name"], "parameters": shape["parameters"].copy(),
-                               "id": tool_id, "name": tool_name})
-        self.append(new_tool)
+        with merge_history_and_block_events(self.core):
+            params = {"shape": shape, "tool_id": tool_id}
+            params.update(self.core.get("get_default_parameter_values")("tool", set_name=shape))
+            new_tool = pycam.workspace.data_models.Tool(None, data=params)
+            new_tool.set_application_value("name", self.get_non_conflicting_name("Tool #%d"))
         self.select(new_tool)
-
-    @toolpath_filter("tool", "tool_id")
-    def get_toolpath_filters(self, tool_id):
-        return [pycam.Toolpath.Filters.SelectTool(tool_id)]
-
-
-class ToolEntity(pycam.Plugins.ObjectWithAttributes):
-
-    def __init__(self, parameters):
-        super(ToolEntity, self).__init__("tool", parameters)
diff --git a/pycam/Plugins/Units.py b/pycam/Plugins/Units.py
index e2507a5..7c85b20 100644
--- a/pycam/Plugins/Units.py
+++ b/pycam/Plugins/Units.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -27,6 +26,7 @@ class Units(pycam.Plugins.PluginBase):
     CATEGORIES = ["System"]
 
     def setup(self):
+        self._last_unit = "mm"
         if self.gui:
             self._gtk_handlers = []
             unit_pref_box = self.gui.get_object("UnitPrefBox")
@@ -40,9 +40,16 @@ class Units(pycam.Plugins.PluginBase):
                 unit_field.set_active(0 if text == "mm" else 1)
                 self._last_unit = text
 
-            self.core.add_item("unit", unit_field.get_active_text, set_unit)
+            def get_unit_text():
+                model = unit_field.get_model()
+                if model:
+                    return model[unit_field.get_active()][0]
+                else:
+                    return self._last_unit
+
+            self.core.add_item("unit", get_unit_text, set_unit)
             # other plugins should use "unit_string" for human readable output
-            self.core.add_item("unit_string", unit_field.get_active_text)
+            self.core.add_item("unit_string", get_unit_text)
             self.register_gtk_handlers(self._gtk_handlers)
         self.register_state_item("settings/unit", lambda: self.core.get("unit"),
                                  lambda value: self.core.set("unit", value))
@@ -56,6 +63,8 @@ class Units(pycam.Plugins.PluginBase):
             # TODO: reset setting "unit" back to a default value?
 
     def change_unit_init(self, widget=None):
-        self.gui.get_object("unit_control").get_active_text()
+        # update the "_last_unit" attribute
+        model = widget.get_model()
+        self._last_unit = model[widget.get_active()][0]
         # redraw the model
         self.core.emit_event("model-change-after")
diff --git a/pycam/Plugins/__init__.py b/pycam/Plugins/__init__.py
index 118f850..2f0a2e6 100644
--- a/pycam/Plugins/__init__.py
+++ b/pycam/Plugins/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2011 Lars Kruse <devel@sumpfralle.de>
 
@@ -23,15 +22,8 @@ import inspect
 import os
 import uuid
 
-try:
-    import gtk
-except ImportError:
-    gtk = None
-try:
-    import gobject
-except ImportError:
-    gobject = None
-
+from pycam.Utils import get_non_conflicting_name
+from pycam.Utils.events import get_event_handler
 import pycam.Utils.log
 import pycam.Utils.locations
 
@@ -39,13 +31,52 @@ import pycam.Utils.locations
 _log = pycam.Utils.log.get_logger()
 
 
-class PluginBase(object):
+def _get_plugin_imports():
+    # We want to import all relevant GUI modules into the namespace of each plugin.
+    # We do this once for all - in order to centralize and minimize error handling.
+    result = {key: None for key in ("gtk", "gdk", "gdkpixbuf", "gdkobject", "gio", "glib",
+                                    "GL", "GLU", "GLUT")}
+    try:
+        import gi
+        gi.require_version('Gtk', '3.0')
+        from gi.repository import Gtk
+        from gi.repository import Gdk
+        from gi.repository import GdkPixbuf
+        from gi.repository import Gio
+        from gi.repository import GLib
+        from gi.repository import GObject
+        result["gtk"] = Gtk
+        result["gdk"] = Gdk
+        result["gdkpixbuf"] = GdkPixbuf
+        result["gio"] = Gio
+        result["glib"] = GLib
+        result["gobject"] = GObject
+    except ImportError:
+        _log.warning("Failed to import GTK3 module.  Maybe you want to install 'python3-gi' "
+                     "for pycam's graphical user interface.")
+    if result["gtk"]:
+        try:
+            import OpenGL.GL
+            import OpenGL.GLU
+            import OpenGL.GLUT
+            result["GL"] = OpenGL.GL
+            result["GLU"] = OpenGL.GLU
+            result["GLUT"] = OpenGL.GLUT
+        except ImportError:
+            # OpenGL-related plugins will complain later about the missing dependency
+            _log.warning("Failed to import OpenGL module.  Maybe you want to install "
+                         "'python3-opengl' for the 3D visualization.")
+    return result
+
+
+class PluginBase:
 
     UI_FILE = None
     DEPENDS = []
     CATEGORIES = []
     ICONS = {}
     ICON_SIZE = 23
+    _imports = _get_plugin_imports()
 
     def __init__(self, core, name):
         self.enabled = True
@@ -53,8 +84,9 @@ class PluginBase(object):
         self.core = core
         self.gui = None
         self.log = _log
-        self._gtk = gtk
-        self._gobject = gobject
+        # convenience imports for GUI modules (self._gtk, self._gdk, self._GL, ...)
+        for key, value in self._imports.items():
+            setattr(self, "_" + key, value)
         if self.UI_FILE and self._gtk:
             gtk_build_file = pycam.Utils.locations.get_ui_file_location(self.UI_FILE)
             if gtk_build_file:
@@ -82,12 +114,11 @@ class PluginBase(object):
                 icon_location = pycam.Utils.locations.get_ui_file_location(self.ICONS[key])
                 if icon_location:
                     try:
-                        pixbuf = self._gtk.gdk.pixbuf_new_from_file_at_size(
+                        self.ICONS[key] = self._gdkpixbuf.Pixbuf.new_from_file_at_size(
                             icon_location, self.ICON_SIZE, self.ICON_SIZE)
                     except self._gobject.GError:
+                        self.log.info("Failed to load icon: %s", self.ICONS[key])
                         self.ICONS[key] = None
-                    else:
-                        self.ICONS[key] = pixbuf
                 else:
                     self.log.debug("Failed to locate icon: %s", self.ICONS[key])
                     self.ICONS[key] = None
@@ -182,33 +213,42 @@ class PluginBase(object):
         raise NotImplementedError("Module %s (%s) does not implement 'teardown'"
                                   % (self.name, __file__))
 
+    def _get_gtk_action_group_by_name(self, group_name, create_if_missing=False):
+        ui_manager = self.core.get("gtk-uimanager")
+        # find the action group of the given name or create a new one
+        for action_group in ui_manager.get_action_groups():
+            if action_group.get_name() == group_name:
+                return action_group
+        else:
+            if create_if_missing:
+                action_group = self._gtk.ActionGroup(name=group_name)
+                ui_manager.insert_action_group(action_group)
+                return action_group
+            else:
+                return None
+
     def register_gtk_accelerator(self, groupname, action, accel_string, accel_name):
-        # menu item and shortcut
-        if not self._gtk:
-            return
-        actiongroup = self._gtk.ActionGroup(groupname)
+        actiongroup = self._get_gtk_action_group_by_name(groupname, create_if_missing=True)
         accel_path = "<pycam>/%s" % accel_name
         action.set_accel_path(accel_path)
         # it is a bit pointless, but we allow an empty accel_string anyway ...
         if accel_string:
             key, mod = self._gtk.accelerator_parse(accel_string)
-            self._gtk.accel_map_change_entry(accel_path, key, mod, True)
+            self._gtk.AccelMap.change_entry(accel_path, key, mod, True)
         actiongroup.add_action(action)
-        ui_manager = self.core.get("gtk-uimanager")
-        # it can happen that there is no gtk ui manager available (in script mode)
-        if ui_manager:
-            ui_manager.insert_action_group(actiongroup, pos=-1)
 
     def unregister_gtk_accelerator(self, groupname, action):
-        actiongroup = self._gtk.ActionGroup(groupname)
+        actiongroup = self._get_gtk_action_group_by_name(groupname)
+        if actiongroup is None:
+            self.log.warning("Failed to unregister unknown GTK Action Group: %s", groupname)
         actiongroup.remove_action(action)
+        # remove the connected action group, if it is empty (no more actions assigned)
         ui_manager = self.core.get("gtk-uimanager")
-        if ui_manager and (len(actiongroup.list_actions()) == 0) \
-                and (actiongroup in ui_manager.get_action_groups()):
+        if ui_manager and (len(actiongroup.list_actions()) == 0):
             ui_manager.remove_action_group(actiongroup)
 
 
-class PluginManager(object):
+class PluginManager:
 
     def __init__(self, core):
         self.core = core
@@ -302,14 +342,22 @@ class PluginManager(object):
         else:
             plugin.enabled = plugin.setup()
 
-    def disable_plugin(self, name):
+    def disable_plugin(self, name, recursively=False):
         plugin = self.get_plugin(name)
         if not plugin.enabled:
             _log.debug("Refused to disable an active plugin: %s" % name)
             return
         else:
-            plugin.teardown()
-            plugin.enabled = False
+            if self.is_plugin_required(name) and recursively:
+                for dep_name in self.get_dependent_plugins(name):
+                    self.disable_plugin(dep_name, recursively=True)
+            if self.is_plugin_required(name):
+                _log.warning("Refusing to disable plugin: %s (dependent plugins: %s)",
+                             name, " ".join(self.get_dependent_plugins(name)))
+            else:
+                _log.debug("Disabling plugin: %s", name)
+                plugin.teardown()
+                plugin.enabled = False
 
     def get_plugin_state(self, name):
         plugin = self.get_plugin(name)
@@ -320,19 +368,20 @@ class PluginManager(object):
 
     def get_plugin_names(self):
         names = self.modules.keys()
-        names.sort()
-        return names
+        return sorted(names)
 
-    def is_plugin_required(self, name):
+    def get_dependent_plugins(self, name):
         long_name = "%s.%s." % (name, name)
+        result = []
         for plugin in self.modules.values():
             if not plugin.enabled:
                 continue
             if (name in plugin.DEPENDS) or (long_name in plugin.DEPENDS):
-                break
-        else:
-            return False
-        return True
+                result.append(name)
+        return result
+
+    def is_plugin_required(self, name):
+        return len(self.get_dependent_plugins(name)) > 0
 
     def get_plugin_missing_dependencies(self, name):
         plugin = self.get_plugin(name)
@@ -348,25 +397,30 @@ class PluginManager(object):
         return missing
 
 
-class ListPluginBase(PluginBase, list):
+class ListPluginBase(PluginBase):
 
     ACTION_UP, ACTION_DOWN, ACTION_DELETE, ACTION_CLEAR = range(4)
+    COLLECTION_ITEM_TYPE = None
 
     def __init__(self, *args, **kwargs):
-        super(ListPluginBase, self).__init__(*args, **kwargs)
+        super().__init__(*args, **kwargs)
         self._update_model_funcs = []
         self._gtk_modelview = None
+        get_event_handler().register_event(self.COLLECTION_ITEM_TYPE.list_changed_event,
+                                           self._update_model)
 
-        def get_function(func_name):
-            return lambda *args, **kwargs: self._change_wrapper(func_name, *args, **kwargs)
+    def __del__(self):
+        try:
+            unregister = get_event_handler().unregister_event
+        except AttributeError:
+            pass
+        unregister(self.COLLECTION_ITEM_TYPE.list_changed_event, self._update_model)
 
-        for name in ("append", "extend", "insert", "pop", "reverse", "remove", "sort"):
-            setattr(self, name, get_function(name))
+    def get_all(self):
+        return tuple(self.get_collection())
 
-    def _change_wrapper(self, func_name, *args, **kwargs):
-        value = getattr(super(ListPluginBase, self), func_name)(*args, **kwargs)
-        self._update_model()
-        return value
+    def clear(self):
+        self.get_collection().clear()
 
     def get_selected(self, **kwargs):
         if self._gtk_modelview:
@@ -379,8 +433,13 @@ class ListPluginBase(PluginBase, list):
         if hasattr(modelview, "get_selection"):
             # a treeview selection
             selection = modelview.get_selection()
-            selection_mode = selection.get_mode()
-            paths = selection.get_selected_rows()[1]
+            if selection is None:
+                # probably we are just shutting down right now
+                selection_mode = None
+                paths = []
+            else:
+                selection_mode = selection.get_mode()
+                paths = selection.get_selected_rows()[1]
         elif hasattr(modelview, "get_active"):
             # combobox
             selection_mode = self._gtk.SELECTION_SINGLE
@@ -397,7 +456,7 @@ class ListPluginBase(PluginBase, list):
             get_result = lambda path: path[0]
         else:
             get_result = self.get_by_path
-        if (selection_mode == self._gtk.SELECTION_MULTIPLE) or force_list:
+        if (selection_mode == self._gtk.SelectionMode.MULTIPLE) or force_list:
             result = []
             for path in paths:
                 result.append(get_result(path))
@@ -416,21 +475,32 @@ class ListPluginBase(PluginBase, list):
 
     def _select_gtk(self, selected_objs):
         selection = self._gtk_modelview.get_selection()
-        selected_uuids = [item["uuid"] for item in selected_objs]
-        for index, item in enumerate(self):
-            if item["uuid"] in selected_uuids:
-                selection.select_path((index, ))
+        selected_uuids = [item.get_id() for item in selected_objs]
+        for index, item in enumerate(self.get_collection()):
+            path = self._gtk.TreePath.new_from_indices((index, ))
+            if item.get_id() in selected_uuids:
+                selection.select_path(path)
             else:
-                selection.unselect_path((index, ))
+                selection.unselect_path(path)
 
     def set_gtk_modelview(self, modelview):
         self._gtk_modelview = modelview
 
+    def force_gtk_modelview_refresh(self):
+        # force a table update by simulating a change of the list store
+        model = self._gtk_modelview.get_model()
+        model.prepend(None)
+        model.remove(model.get_iter_first())
+
     def _update_gtk_treemodel(self):
         if not self._gtk_modelview:
             return
         treemodel = self._gtk_modelview.get_model()
-        current_uuids = [item["uuid"] for item in self]
+        if treemodel is None:
+            # this my happen during shutdown
+            return
+        previous_count = len(treemodel)
+        current_uuids = [item.get_id() for item in self.get_collection()]
         # remove all superfluous rows from "treemodel"
         removal_indices = [index for index, item in enumerate(treemodel)
                            if item[0] not in current_uuids]
@@ -446,23 +516,17 @@ class ListPluginBase(PluginBase, list):
         sorted_indices = [current_uuids.index(row[0]) for row in treemodel]
         if sorted_indices:
             treemodel.reorder(sorted_indices)
-        self.core.emit_event("tool-list-changed")
+        # Explicitly select the first item - otherwise the pre-filled defaults do not cause a
+        # selection.  This would be annoying for the ExportSettings, since the Toolpath view uses
+        # the first selected set of settings (but would fail by default).
+        if (previous_count == 0) and current_uuids:
+            self.select(self.get_collection()[0])
 
     def get_by_path(self, path):
         if not self._gtk_modelview:
             return None
         this_uuid = self._gtk_modelview.get_model()[int(path[0])][0]
-        objs = [t for t in self if this_uuid == t["uuid"]]
-        if objs:
-            return objs[0]
-        else:
-            return None
-
-    def get_by_attribute(self, key, value):
-        for item in self:
-            if item.get(key, None) == value:
-                return item
-        return None
+        return self.get_collection()[this_uuid]
 
     def _update_model(self):
         self._update_gtk_treemodel()
@@ -477,7 +541,7 @@ class ListPluginBase(PluginBase, list):
             self._update_model_funcs.remove(func)
 
     def _list_action(self, *args):
-        # the second-to-last paramater should be the model view
+        # the second-to-last parameter should be the model view
         modelview = args[-2]
         # the last parameter should be the action (ACTION_UP|DOWN|DELETE|CLEAR)
         action = args[-1]
@@ -488,26 +552,24 @@ class ListPluginBase(PluginBase, list):
         selected_items.sort()
         if action in (self.ACTION_DOWN, self.ACTION_DELETE):
             selected_items.sort(reverse=True)
+        collection = self.get_collection()
         new_selection = []
         if action == self.ACTION_CLEAR:
-            while len(self) > 0:
-                self.pop(0)
+            collection.clear()
         else:
             for index in selected_items:
                 if action == self.ACTION_UP:
                     if index > 0:
-                        item = self.pop(index)
-                        self.insert(index - 1, item)
+                        collection.swap_by_index(index, index - 1)
                         new_selection.append(index - 1)
                 elif action == self.ACTION_DOWN:
-                    if index < len(self) - 1:
-                        item = self.pop(index)
-                        self.insert(index + 1, item)
+                    if index < len(self.get_collection()) - 1:
+                        collection.swap_by_index(index, index + 1)
                         new_selection.append(index + 1)
                 elif action == self.ACTION_DELETE:
-                    self.pop(index)
-                    if len(self) > 0:
-                        new_selection.append(min(index, len(self) - 1))
+                    del collection[index]
+                    if collection:
+                        new_selection.append(min(index, len(collection) - 1))
                 else:
                     pass
         self._update_model()
@@ -517,7 +579,11 @@ class ListPluginBase(PluginBase, list):
             selection = modelview
         selection.unselect_all()
         for index in new_selection:
-            selection.select_path((index,))
+            path = self._gtk.TreePath.new_from_indices((index, ))
+            selection.select_path(path)
+
+    def get_collection(self):
+        return self.COLLECTION_ITEM_TYPE.get_collection()
 
     def _update_list_action_button_state(self, *args):
         modelview = args[-3]  # noqa F841 - maybe we need it later
@@ -525,14 +591,14 @@ class ListPluginBase(PluginBase, list):
         button = args[-1]
         paths = self.get_selected(index=True, force_list=True)
         if action == self.ACTION_CLEAR:
-            button.set_sensitive(len(self) > 0)
+            button.set_sensitive(len(self.get_collection()) > 0)
         elif not paths:
             button.set_sensitive(False)
         else:
             if action == self.ACTION_UP:
                 button.set_sensitive(0 not in paths)
             elif action == self.ACTION_DOWN:
-                button.set_sensitive((len(self) - 1) not in paths)
+                button.set_sensitive((len(self.get_collection()) - 1) not in paths)
             else:
                 button.set_sensitive(True)
 
@@ -554,11 +620,42 @@ class ListPluginBase(PluginBase, list):
         # initialize the state of the button
         self._update_list_action_button_state(modelview, action, button)
 
+    def get_visible(self):
+        return [item for item in self.get_all() if item.get_application_value("visible", True)]
+
+    def edit_item_name(self, cell, path, new_text):
+        item = self.get_by_path(path)
+        if item and (new_text != item.get_application_value("name")) and new_text:
+            item.set_application_value("name", new_text)
+
+    def render_item_name(self, column, cell, model, m_iter, data):
+        item = self.get_by_path(model.get_path(m_iter))
+        if item:
+            cell.set_property("text", item.get_application_value("name", "No Name"))
+
+    def render_item_visible_state(self, column, cell, model, m_iter, data):
+        item = self.get_by_path(model.get_path(m_iter))
+        if item.get_application_value("visible", True):
+            cell.set_property("pixbuf", self.ICONS["visible"])
+        else:
+            cell.set_property("pixbuf", self.ICONS["hidden"])
+        return item, cell
+
+    def toggle_item_visibility(self, treeview, path, column):
+        item = self.get_by_path(path)
+        if item:
+            item.set_application_value("visible", not item.get_application_value("visible"))
+        self.core.emit_event("visual-item-updated")
+
+    def get_non_conflicting_name(self, name_template):
+        return get_non_conflicting_name(
+            name_template, [item.get_application_value("name") for item in self.get_all()])
+
 
 class ObjectWithAttributes(dict):
 
     def __init__(self, node_key=None, attributes=None, **kwargs):
-        super(ObjectWithAttributes, self).__init__(**kwargs)
+        super().__init__(**kwargs)
         if attributes is not None:
             self.update(attributes)
         self["uuid"] = str(uuid.uuid4())
diff --git a/pycam/Simulation/ZBuffer.py b/pycam/Simulation/ZBuffer.py
deleted file mode 100644
index 307199c..0000000
--- a/pycam/Simulation/ZBuffer.py
+++ /dev/null
@@ -1,287 +0,0 @@
-# -*- coding: utf-8 -*-
-"""
-Copyright 2009-2010 Lode Leroy
-
-This file is part of PyCAM.
-
-PyCAM is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-PyCAM is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
-"""
-
-import ctypes
-
-try:
-    import OpenGL.GL as GL
-    from OpenGL.GL.pointers import glIndexPointers, glNormalPointerf, glVertexPointerf
-    GL_enabled = True
-except ImportError:
-    GL_enabled = False
-
-
-EPSILON = 1e-8
-
-NUM_PER_CELL_X = 10
-NUM_PER_CELL_Y = 10
-NUM_CELL_X = 0
-NUM_CELL_Y = 0
-
-
-class ZBufferItem(object):
-    def __init__(self, z=0.0):
-        self.z = float(z)
-        self.changed = True
-        self.list = -1
-
-
-class ZCellItem(object):
-    def __init__(self):
-        self.list = -1
-        self.array = None
-
-
-class ZBuffer(object):
-    def __init__(self, minx, maxx, xres, miny, maxy, yres, minz, maxz):
-        global NUM_CELL_X, NUM_CELL_Y
-        self.minx = float(minx)
-        self.maxx = float(maxx)
-        self.miny = float(miny)
-        self.maxy = float(maxy)
-        self.minz = float(minz)
-        self.maxz = float(maxz)
-        self.xres = int(xres)
-        self.yres = int(yres)
-        self.changed = True
-
-        NUM_CELL_X = self.xres / NUM_PER_CELL_X
-        NUM_CELL_Y = self.yres / NUM_PER_CELL_Y
-
-        self.x = [0.0] * self.xres
-        for i in range(0, self.xres):
-            self.x[i] = self.minx+(i * (self.maxx-self.minx)/self.xres)
-        self.y = [0.0] * self.yres
-        for i in range(0, self.yres):
-            self.y[i] = self.miny+(i * (self.maxy-self.miny)/self.yres)
-        self.buf = [[]] * self.yres
-        for y in range(0, self.yres):
-            self.buf[y] = [None] * self.xres
-            for x in range(0, self.xres):
-                self.buf[y][x] = ZBufferItem(self.minz)
-
-        self.list = [[]] * self.yres
-        for y in range(0, self.yres):
-            self.list[y] = [None] * self.xres
-            for x in range(0, self.xres):
-                self.list[y][x] = -1
-
-        self.cell = [None] * NUM_CELL_Y
-        for y in range(0, NUM_CELL_Y):
-            self.cell[y] = [None] * NUM_CELL_X
-            for x in range(0, NUM_CELL_X):
-                self.cell[y][x] = ZCellItem()
-
-    def add_triangles(self, triangles):
-        for t in triangles:
-            self.add_triangle(t)
-
-    def add_triangle(self, t):
-        minx = int((t.minx - self.minx) / (self.maxx - self.minx) * self.xres) - 1
-        maxx = int((t.maxx - self.minx) / (self.maxx - self.minx) * self.xres) + 1
-        miny = int((t.miny - self.miny) / (self.maxy - self.miny) * self.yres) - 1
-        maxy = int((t.maxy - self.miny) / (self.maxy - self.miny) * self.yres) + 2
-        if minx < 0:
-            minx = 0
-        if maxx > self.xres - 1:
-            maxx = self.xres - 1
-        if miny < 0:
-            miny = 0
-        if maxy > self.yres - 1:
-            maxy = self.yres - 1
-
-        for y in range(miny, maxy):
-            py = self.y[y]
-            for x in range(minx, maxx):
-                px = self.x[x]
-                v0x = t.p3[0] - t.p1[0]
-                v0y = t.p3[1] - t.p1[1]
-                v1x = t.p2[0] - t.p1[0]
-                v1y = t.p2[1] - t.p1[1]
-                v2x = px - t.p1[0]
-                v2y = py - t.p1[1]
-                dot00 = v0x*v0x + v0y*v0y
-                dot01 = v0x*v1x + v0y*v1y
-                dot02 = v0x*v2x + v0y*v2y
-                dot11 = v1x*v1x + v1y*v1y
-                dot12 = v1x*v2x + v1y*v2y
-                invDenom = 1 / (dot00 * dot11 - dot01 * dot01)
-                u = (dot11 * dot02 - dot01 * dot12) * invDenom
-                v = (dot00 * dot12 - dot01 * dot02) * invDenom
-                if (u >= -EPSILON) and (v >= -EPSILON) and (u + v <= 1-EPSILON):
-                    v0z = t.p3[2] - t.p1[2]
-                    v1z = t.p2[2] - t.p1[2]
-                    pz = t.p1[2] + v0z * u + v1z * v
-                    if pz > self.buf[y][x].z:
-                        self.buf[y][x].z = pz
-                        self.buf[y+0][x+0].changed = True
-                        self.buf[y+0][x+1].changed = True
-                        self.buf[y+1][x+0].changed = True
-                        self.buf[y+1][x+1].changed = True
-                        self.changed = True
-
-    def add_cutter(self, c):
-        cx = c.location[0]
-        cy = c.location[1]
-        rsq = c.radiussq
-        minx = int((c.minx - self.minx) / (self.maxx - self.minx) * self.xres) - 1
-        maxx = int((c.maxx - self.minx) / (self.maxx - self.minx) * self.xres) + 1
-        miny = int((c.miny - self.miny) / (self.maxy - self.miny) * self.yres) - 1
-        maxy = int((c.maxy - self.miny) / (self.maxy - self.miny) * self.yres) + 1
-        if minx < 0:
-            minx = 0
-        if maxx < 0:
-            maxx = 0
-        if minx > self.xres - 1:
-            minx = self.xres - 1
-        if maxx > self.xres - 1:
-            maxx = self.xres - 1
-        if miny < 0:
-            miny = 0
-        if maxy < 0:
-            maxy = 0
-        if maxy > self.yres - 1:
-            maxy = self.yres - 1
-        if miny > self.yres - 1:
-            miny = self.yres - 1
-        p = (0, 0, 0)
-        zaxis = (0, 0, -1)
-
-        for y in range(miny, maxy):
-            py = self.y[y]
-            p = (p[0], py, p[2])
-            for x in range(minx, maxx):
-                px = self.x[x]
-                p = (px, p[1], p[2])
-                if (px - cx) * (px - cx) + (py - cy) * (py - cy) <= rsq + EPSILON:
-                    (cl, ccp, cp, l) = c.intersect_point(zaxis, p)
-                    if ccp:
-                        pz = l
-                        if pz < self.buf[y][x].z:
-                            self.buf[y][x].z = pz
-                            self.buf[y+0][x+0].changed = True
-                            self.buf[y+0][x+1].changed = True
-                            self.buf[y+1][x+0].changed = True
-                            self.buf[y+1][x+1].changed = True
-                            self.changed = True
-
-    def to_OpenGL(self):
-        if GL_enabled:
-            self.to_OpenGL_6()
-        self.changed = False
-
-    def normal(self, z0, z1, z2):
-        nx = 1.0 / self.xres
-        ny = 1.0 / self.yres
-        nz = 1.0 / (self.maxz - self.minz)
-        return (-ny * (z1 - z0) * nz / nx, -nx * (z2 - z1) * nz / ny, nx * ny / nz * 100)
-
-    # use display list with vertex and normal and index buffers per cell
-    # (cell = group of quads)
-    def to_OpenGL_6(self):
-        num_cell_x = NUM_CELL_X
-        num_cell_y = NUM_CELL_Y
-
-        dy = self.yres/num_cell_y
-        if dy < 2:
-            num_cell_y = 1
-            dy = self.yres
-        dx = self.xres/num_cell_x
-        if dx < 2:
-            num_cell_x = 1
-            dx = self.xres
-
-        GL.glEnableClientState(GL.GL_INDEX_ARRAY)
-        GL.glEnableClientState(GL.GL_VERTEX_ARRAY)
-        GL.glEnableClientState(GL.GL_NORMAL_ARRAY)
-
-        for y in range(num_cell_y):
-            y0 = y * dy
-            y1 = y0 + dy + 1
-            if y1 > self.yres:
-                y1 = self.yres
-            for x in range(num_cell_x):
-                x0 = x * dx
-                x1 = x0 + dx + 1
-                if x1 > self.xres:
-                    x1 = self.xres
-
-                changed = False
-
-                if self.changed:
-                    for yi in range(y0, y1 - 1):
-                        for xi in range(x0, x1 - 1):
-                            if self.buf[yi][xi].changed:
-                                changed = True
-                                break
-
-                if changed:
-                    if self.cell[y][x].list == -1:
-                        self.cell[y][x].list = GL.glGenLists(1)
-                        self.cell[y][x].vertex = (ctypes.c_float * 3 * ((y1-y0) * (x1 - x0)))()
-                        self.cell[y][x].normal = (ctypes.c_float * 3 * ((y1-y0) * (x1 - x0)))()
-                        self.cell[y][x].index = (ctypes.c_ushort
-                                                 * (4 * (y1 - y0 - 1) * (x1 - x0 - 1)))()
-                    glIndexPointers(self.cell[y][x].index)
-                    glVertexPointerf(self.cell[y][x].vertex)
-                    glNormalPointerf(self.cell[y][x].normal)
-
-                    GL.glNewList(self.cell[y][x].list, GL.GL_COMPILE)
-                    idx = 0
-                    for yi in range(y0, y1):
-                        for xi in range(x0, x1):
-                            self.buf[yi][xi].changed = False
-                            self.cell[y][x].vertex[idx][0] = self.x[xi]
-                            self.cell[y][x].vertex[idx][1] = self.y[yi]
-                            self.cell[y][x].vertex[idx][2] = self.buf[yi][xi].z
-
-                            if (xi == self.xres - 1) or (yi == self.yres - 1):
-                                n = self.normal(self.buf[yi-1][xi-1].z, self.buf[yi-1][xi].z,
-                                                self.buf[yi][xi-1].z)
-                            else:
-                                n = self.normal(self.buf[yi][xi].z, self.buf[yi][xi+1].z,
-                                                self.buf[yi+1][xi].z)
-                            self.cell[y][x].normal[idx][0] = n[0]
-                            self.cell[y][x].normal[idx][1] = n[1]
-                            self.cell[y][x].normal[idx][2] = n[2]
-
-                            idx += 1
-
-                    idx = 0
-                    for yi in range(y0, y1 - 1):
-                        for xi in range(x0, x1 - 1):
-                            self.cell[y][x].index[idx + 0] = ((yi - y0 + 0)
-                                                              * (x1 - x0) + (xi - x0 + 0))
-                            self.cell[y][x].index[idx + 1] = ((yi - y0 + 1)
-                                                              * (x1 - x0) + (xi - x0 + 0))
-                            self.cell[y][x].index[idx + 2] = ((yi - y0 + 1)
-                                                              * (x1 - x0) + (xi - x0 + 1))
-                            self.cell[y][x].index[idx + 3] = ((yi - y0 + 0)
-                                                              * (x1 - x0) + (xi - x0 + 1))
-                            idx += 4
-
-                    GL.glDrawElements(GL.GL_QUADS, idx, GL.GL_UNSIGNED_SHORT,
-                                      self.cell[y][x].index)
-                    GL.glEndList()
-                GL.glCallList(self.cell[y][x].list)
-
-        GL.glDisableClientState(GL.GL_VERTEX_ARRAY)
-        GL.glDisableClientState(GL.GL_NORMAL_ARRAY)
-        GL.glDisableClientState(GL.GL_INDEX_ARRAY)
diff --git a/pycam/Test/__init__.py b/pycam/Test/__init__.py
index e9419f8..81e88f8 100644
--- a/pycam/Test/__init__.py
+++ b/pycam/Test/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2013 Lars Kruse <devel@sumpfralle.de>
 
@@ -35,17 +34,17 @@ class PycamTestCase(unittest.TestCase):
                 return result_difference
         return result_equal
 
-    def assertVectorEqual(self, v1, v2):
+    def assert_vector_equal(self, v1, v2):
         self.assertIsNone(self._compare_vectors(v1, v2))
 
-    def assertVectorNotEqual(self, v1, v2):
+    def assert_vector_not_equal(self, v1, v2):
         self.assertIsNotNone(self._compare_vectors(v1, v2))
 
-    def assertCollisionEqual(self, collision1, collision2):
+    def assert_collision_equal(self, collision1, collision2):
         ccp1, cp1, d1 = collision1
         ccp2, cp2, d2 = collision2
-        self.assertVectorEqual(ccp1, ccp2)
-        self.assertVectorEqual(cp1, cp2)
+        self.assert_vector_equal(ccp1, ccp2)
+        self.assert_vector_equal(cp1, cp2)
         self.assertAlmostEqual(d1, d2)
 
 
diff --git a/pycam/Test/assets/cube_ascii.stl b/pycam/Test/assets/cube_ascii.stl
new file mode 100644
index 0000000..54e32ed
--- /dev/null
+++ b/pycam/Test/assets/cube_ascii.stl
@@ -0,0 +1,86 @@
+solid "Solid"
+	facet normal 0 1 0
+		outer loop
+			vertex 0 10 10
+			vertex 10 10 10
+			vertex 0 10 0
+		endloop
+	endfacet
+	facet normal 0 1 0
+		outer loop
+			vertex 0 10 0
+			vertex 10 10 10
+			vertex 10 10 0
+		endloop
+	endfacet
+	facet normal 1 0 0
+		outer loop
+			vertex 10 10 10
+			vertex 10 0 10
+			vertex 10 10 0
+		endloop
+	endfacet
+	facet normal 1 0 0
+		outer loop
+			vertex 10 10 0
+			vertex 10 0 10
+			vertex 10 0 0
+		endloop
+	endfacet
+	facet normal -1 0 0
+		outer loop
+			vertex 0 0 10
+			vertex 0 10 10
+			vertex 0 0 0
+		endloop
+	endfacet
+	facet normal -1 0 0
+		outer loop
+			vertex 0 0 0
+			vertex 0 10 10
+			vertex 0 10 0
+		endloop
+	endfacet
+	facet normal 0 0 1
+		outer loop
+			vertex 10 10 10
+			vertex 0 10 10
+			vertex 10 0 10
+		endloop
+	endfacet
+	facet normal 0 0 1
+		outer loop
+			vertex 10 0 10
+			vertex 0 10 10
+			vertex 0 0 10
+		endloop
+	endfacet
+	facet normal 0 -1 0
+		outer loop
+			vertex 10 0 10
+			vertex 0 0 10
+			vertex 10 0 0
+		endloop
+	endfacet
+	facet normal 0 -1 0
+		outer loop
+			vertex 10 0 0
+			vertex 0 0 10
+			vertex 0 0 0
+		endloop
+	endfacet
+	facet normal 0 0 -1
+		outer loop
+			vertex 0 10 0
+			vertex 10 10 0
+			vertex 0 0 0
+		endloop
+	endfacet
+	facet normal 0 0 -1
+		outer loop
+			vertex 0 0 0
+			vertex 10 10 0
+			vertex 10 0 0
+		endloop
+	endfacet
+endsolid
diff --git a/pycam/Test/assets/cube_binary.stl b/pycam/Test/assets/cube_binary.stl
new file mode 100644
index 0000000..e8f11d2
Binary files /dev/null and b/pycam/Test/assets/cube_binary.stl differ
diff --git a/pycam/Test/test_intersection.py b/pycam/Test/test_intersection.py
index 926fe2b..9f106d6 100644
--- a/pycam/Test/test_intersection.py
+++ b/pycam/Test/test_intersection.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2013 Lars Kruse <devel@sumpfralle.de>
 
@@ -45,28 +44,28 @@ class CircleIntersections(pycam.Test.PycamTestCase):
         coll = func(*(func_args + [(0, 0, -1)] + [edge]))
         # The collision point seems to be the middle of the line.
         # This is technically not necessary, but the current algorithm does it this way.
-        self.assertCollisionEqual(((1.5, 1.5, 10), (1.5, 1.5, 4), 6), coll)
+        self.assert_collision_equal(((1.5, 1.5, 10), (1.5, 1.5, 4), 6), coll)
         """
         """
         # line dips into circle
         edge = Line((4, 1, 3), (10, 1, 5))
         coll = func(*(func_args + [(0, 0, -1)] + [edge]))
-        #self.assertCollisionEqual(((-1, 1, 10), (-1, 1, 2), 8), coll)
-        self.assertCollisionEqual(((5, 1, 10), (5, 1, 3.3333333333), 6.666666666), coll)
+        #self.assert_collision_equal(((-1, 1, 10), (-1, 1, 2), 8), coll)
+        self.assert_collision_equal(((5, 1, 10), (5, 1, 3.3333333333), 6.666666666), coll)
         # horizontally skewed line
         edge = Line((2, 1, 3), (8, 1, 5))
         coll = func(*(func_args + [(0, 0, -1)] + [edge]))
-        #self.assertCollisionEqual(((-1, 1, 10), (-1, 1, 2), 8), coll)
-        self.assertCollisionEqual(((5, 1, 10), (5, 1, 4), 6), coll)
+        #self.assert_collision_equal(((-1, 1, 10), (-1, 1, 2), 8), coll)
+        self.assert_collision_equal(((5, 1, 10), (5, 1, 4), 6), coll)
         """
         # line touches circle
         edge = Line((10, 10, 4), (5, 1, 4))
         coll = func(*(func_args + [(0, 0, -1)] + [edge]))
-        self.assertCollisionEqual(((5, 1, 10), (5, 1, 4), 6), coll)
+        self.assert_collision_equal(((5, 1, 10), (5, 1, 4), 6), coll)
         # no collision
         edge = Line((10, 10, 4), (5.001, 1, 4))
         coll = func(*(func_args + [(0, 0, -1)] + [edge]))
-        self.assertCollisionEqual((None, None, INFINITE), coll)
+        self.assert_collision_equal((None, None, INFINITE), coll)
 
     def test_plane(self):
         """Circle->Plane collisions"""
@@ -75,19 +74,19 @@ class CircleIntersections(pycam.Test.PycamTestCase):
         # additional arguments: direction, triangle
         triangle = Triangle((0, 5, 3), (5, 0, 3), (0, 0, 3))
         coll = func(*(func_args + [(0, 0, -1)] + [triangle]))
-        self.assertCollisionEqual(((2, 1, 10), (2, 1, 3), 7), coll)
+        self.assert_collision_equal(((2, 1, 10), (2, 1, 3), 7), coll)
         # slightly skewed
         triangle = Triangle((2, 5, 3), (2, 0, 3), (-4, 1, 6))
         coll = func(*(func_args + [(0, 0, -1)] + [triangle]))
-        self.assertCollisionEqual(((-1, 1, 10), (-1, 1, 4.5), 5.5), coll)
+        self.assert_collision_equal(((-1, 1, 10), (-1, 1, 4.5), 5.5), coll)
         # skewed and shifted
         triangle = Triangle((14, 5, -3), (14, 0, -3), (8, 1, 0))
         coll = func(*(func_args + [(0, 0, -1)] + [triangle]))
-        self.assertCollisionEqual(((-1, 1, 10), (-1, 1, 4.5), 5.5), coll)
+        self.assert_collision_equal(((-1, 1, 10), (-1, 1, 4.5), 5.5), coll)
         # vertical triangle
         triangle = Triangle((14, 5, -3), (14, 0, -3), (14, 1, -6))
         coll = func(*(func_args + [(0, 0, -1)] + [triangle]))
-        self.assertCollisionEqual((None, None, INFINITE), coll)
+        self.assert_collision_equal((None, None, INFINITE), coll)
 
     @pytest.mark.skipif(True, reason="this test has never worked")
     def test_point(self):
@@ -99,19 +98,19 @@ class CircleIntersections(pycam.Test.PycamTestCase):
                      self._circle["radius"] ** 2]
         # additional arguments: direction, point
         coll = func(*(func_args + [(0, 0, -1)] + [(0, 0, 0)]))
-        self.assertCollisionEqual(((0, 0, 10), (0, 0, 0), 10), coll)
+        self.assert_collision_equal(((0, 0, 10), (0, 0, 0), 10), coll)
         # the same, but upwards
         coll = func(*(func_args + [(0, 0, 1)] + [(0, 0, 0)]))
-        self.assertCollisionEqual(((0, 0, 10), (0, 0, 0), -10), coll)
+        self.assert_collision_equal(((0, 0, 10), (0, 0, 0), -10), coll)
         # barely touching the point
         coll = func(*(func_args + [(0, 0, -1)] + [(5, 1, 2)]))
-        self.assertCollisionEqual(((5, 1, 10), (5, 1, 2), 8), coll)
+        self.assert_collision_equal(((5, 1, 10), (5, 1, 2), 8), coll)
         # not touching the point
         coll = func(*(func_args + [(0, 0, -1)] + [(5.001, 1, 2)]))
-        self.assertCollisionEqual((None, None, INFINITE), coll)
+        self.assert_collision_equal((None, None, INFINITE), coll)
         # point is already inside of the circle
         coll = func(*(func_args + [(0, 0, -1)] + [(2, 1, 10)]))
-        self.assertCollisionEqual(((2, 1, 10), (2, 1, 10), 0), coll)
+        self.assert_collision_equal(((2, 1, 10), (2, 1, 10), 0), coll)
 
 
 if __name__ == "__main__":
diff --git a/pycam/Test/test_motion_grid.py b/pycam/Test/test_motion_grid.py
new file mode 100644
index 0000000..4a2cd97
--- /dev/null
+++ b/pycam/Test/test_motion_grid.py
@@ -0,0 +1,171 @@
+"""
+Copyright 2018 Lars Kruse <devel@sumpfralle.de>
+
+This file is part of PyCAM.
+
+PyCAM is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
+"""
+
+import unittest
+
+from pycam.Geometry import Box3D, Point3D
+from pycam.Toolpath.MotionGrid import (
+    GridDirection, MillingStyle, StartPosition, get_fixed_grid, get_fixed_grid_layer,
+    get_fixed_grid_line, get_spiral_layer, get_spiral_layer_lines)
+
+
+def _resolve_nested(level_count, source):
+    """ resolve multiple levels of generators """
+    assert level_count > 0
+    if level_count > 1:
+        return [_resolve_nested(level_count - 1, item) for item in source]
+    else:
+        return list(source)
+
+
+class TestMotionGrid(unittest.TestCase):
+
+    def assert_almost_equal_line(self, line1, line2):
+        self.assertEqual(len(line1), len(line2))
+        for pos1, pos2 in zip(line1, line2):
+            self.assert_almost_equal_positions(pos1, pos2)
+
+    def assert_almost_equal_lines(self, lines1, lines2):
+        self.assertEqual(len(lines1), len(lines2))
+        for line1, line2 in zip(lines1, lines2):
+            self.assert_almost_equal_line(line1, line2)
+
+    def assert_almost_equal_positions(self, pos1, pos2):
+        self.assertEqual(len(pos1), 3)
+        self.assertEqual(len(pos2), 3)
+        for v1, v2 in zip(pos1, pos2):
+            self.assertAlmostEqual(v1, v2)
+
+    def assert_almost_equal_layer(self, layer1, layer2):
+        self.assertEqual(len(layer1), len(layer2))
+        for line1, line2 in zip(layer1, layer2):
+            self.assert_almost_equal_line(line1, line2)
+
+    def assert_almost_equal_grid(self, grid1, grid2):
+        self.assertEqual(len(grid1), len(grid2))
+        for layer1, layer2 in zip(grid1, grid2):
+            self.assert_almost_equal_layer(layer1, layer2)
+
+    def test_fixed_grid_line(self):
+        for z in (-1, 0, 1):
+            # simple line without steps
+            line = _resolve_nested(
+                1, get_fixed_grid_line(-2, 2, 3, z, grid_direction=GridDirection.X))
+            self.assert_almost_equal_line(line, [(-2, 3, z), (2, 3, z)])
+            # simple line with steps
+            line = _resolve_nested(
+                1, get_fixed_grid_line(-2, 2, 3, z, step_width=0.9,
+                                       grid_direction=GridDirection.X))
+            self.assert_almost_equal_line(line, [(-2, 3, z), (-1.2, 3, z), (-0.4, 3, z),
+                                                 (0.4, 3, z), (1.2, 3, z), (2.0, 3, z)])
+            # simple line in Y direction
+            line = _resolve_nested(
+                1, get_fixed_grid_line(0, 2, 3, z, grid_direction=GridDirection.Y))
+            self.assert_almost_equal_line(line, [(3, 0, z), (3, 2, z)])
+
+    def test_fixed_grid_layer(self):
+        for z in (-1, 0, 1):
+            # simple zigzag moves
+            layer, end_position = get_fixed_grid_layer(
+                0, 2, 0, 1, z, line_distance=1, grid_direction=GridDirection.X,
+                milling_style=MillingStyle.IGNORE, start_position=StartPosition.NONE)
+            layer = _resolve_nested(2, layer)
+            self.assert_almost_equal_layer(layer, (
+                ((0, 0, z), (2, 0, z)), ((2, 0, z), (2, 1, z)), ((2, 1, z), (0, 1, z))))
+            self.assertEqual(end_position, StartPosition.Y)
+            # always move along X in positive direction
+            layer, end_position = get_fixed_grid_layer(
+                0, 2, 0, 1, z, line_distance=1, grid_direction=GridDirection.X,
+                milling_style=MillingStyle.CONVENTIONAL, start_position=StartPosition.NONE)
+            layer = _resolve_nested(2, layer)
+            self.assert_almost_equal_layer(layer, (
+                ((0, 0, z), (2, 0, z)), ((0, 1, z), (2, 1, z))))
+            self.assertEqual(end_position, StartPosition.X | StartPosition.Y)
+            # always move along X in negative direction
+            layer, end_position = get_fixed_grid_layer(
+                0, 2, 0, 1, z, line_distance=1, grid_direction=GridDirection.X,
+                milling_style=MillingStyle.CLIMB, start_position=StartPosition.NONE)
+            layer = _resolve_nested(2, layer)
+            self.assert_almost_equal_layer(layer, (
+                ((0, 1, z), (2, 1, z)), ((0, 0, z), (2, 0, z))))
+            self.assertEqual(end_position, StartPosition.X)
+            # always move along Y in negative direction
+            layer, end_position = get_fixed_grid_layer(
+                0, 2, 0, 1, z, line_distance=1, grid_direction=GridDirection.Y,
+                milling_style=MillingStyle.CONVENTIONAL, start_position=StartPosition.NONE)
+            layer = _resolve_nested(2, layer)
+            self.assert_almost_equal_layer(layer, (
+                ((0, 1, z), (0, 0, z)), ((1, 1, z), (1, 0, z)), ((2, 1, z), (2, 0, z))))
+            self.assertEqual(end_position, StartPosition.X)
+            # always move along X in positive direction, starting from positive Y
+            layer, end_position = get_fixed_grid_layer(
+                0, 2, 0, 1, z, line_distance=1, grid_direction=GridDirection.X,
+                milling_style=MillingStyle.CLIMB, start_position=StartPosition.Y)
+            layer = _resolve_nested(2, layer)
+            self.assert_almost_equal_layer(layer, (
+                ((0, 1, z), (2, 1, z)), ((0, 0, z), (2, 0, z))))
+            self.assertEqual(end_position, StartPosition.X)
+
+    def test_fixed_grid(self):
+        box = Box3D(Point3D(-3, -2, -1), Point3D(3, 2, 1))
+        grid = _resolve_nested(3, get_fixed_grid(
+            box, 1.2, line_distance=2.0, step_width=None,
+            grid_direction=GridDirection.X, milling_style=MillingStyle.CONVENTIONAL,
+            start_position=StartPosition.Z))
+        self.assert_almost_equal_grid(grid, (
+            (((-3, -2, 1), (3, -2, 1)), ((-3, 0, 1), (3, 0, 1)), ((-3, 2, 1), (3, 2, 1))),
+            (((3, 2, 0), (-3, 2, 0)), ((3, 0, 0), (-3, 0, 0)), ((3, -2, 0), (-3, -2, 0))),
+            (((-3, -2, -1), (3, -2, -1)), ((-3, 0, -1), (3, 0, -1)), ((-3, 2, -1), (3, 2, -1))),
+        ))
+
+    def test_spiral_layer_lines(self):
+        for z in (-1, 0, 1):
+            spiral_lines = _resolve_nested(1, get_spiral_layer_lines(
+                0, 2, 0, 2, z, 1, 1, GridDirection.X, StartPosition.NONE))
+            self.assert_almost_equal_lines(spiral_lines, (
+                ((0, 0, z), (2, 0, z)), ((2, 0, z), (2, 2, z)), ((2, 2, z), (0, 2, z)),
+                ((0, 2, z), (0, 1, z)), ((0, 1, z), (1, 1, z))))
+
+    def test_spiral_layer(self):
+        for z in (-1, 0, 1):
+            # sharp corners
+            spiral_lines = _resolve_nested(1, get_spiral_layer(
+                0, 2, 0, 2, z, 1, None, GridDirection.X, StartPosition.NONE, False, False))
+            self.assert_almost_equal_lines(spiral_lines, (
+                ((0, 0, z), (2, 0, z)), ((2, 0, z), (2, 2, z)), ((2, 2, z), (0, 2, z)),
+                ((0, 2, z), (0, 1, z)), ((0, 1, z), (1, 1, z))))
+            # rounded corners
+            spiral_lines = _resolve_nested(1, get_spiral_layer(
+                0, 2, 0, 2, z, 2, None, GridDirection.X, StartPosition.NONE, True, False))
+            # verify a few interesting points along the arc
+            self.assert_almost_equal_line(spiral_lines[0], ((0, 0, z), (1, 0, z)))
+            self.assert_almost_equal_positions(
+                spiral_lines[5][0], (1.7071067811865475, 0.2928932188134523, z))
+            self.assert_almost_equal_positions(spiral_lines[9][0], (2.0, 1.0, z))
+            self.assert_almost_equal_positions(
+                spiral_lines[13][0], (1.7071067811865475, 1.7071067811865475, z))
+            self.assert_almost_equal_line(spiral_lines[17], ((1, 2, z), (0, 2, z)))
+
+    def xtest_fixed_grid(self):
+        box = Box3D(Point3D(-1, -1, -1), Point3D(1, 1, 1))
+        fixed_grid = get_fixed_grid(
+            box, 0.5, line_distance=0.8, step_width=0.6, grid_direction=GridDirection.X,
+            milling_style=MillingStyle.IGNORE, start_position=StartPosition.Z)
+        resolved_fixed_grid = [list(layer) for layer in fixed_grid]
+        print(resolved_fixed_grid)
diff --git a/pycam/Test/test_pointutils.py b/pycam/Test/test_pointutils.py
index 5edfe2e..b756e8e 100644
--- a/pycam/Test/test_pointutils.py
+++ b/pycam/Test/test_pointutils.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2013 Lars Kruse <devel@sumpfralle.de>
 
@@ -63,7 +62,7 @@ class UnaryOperations(pycam.Test.PycamTestCase):
 
     def test_normalized(self):
         norm_test = lambda vector, result: \
-                self.assertVectorEqual(pu.pnormalized(vector), result)
+                self.assert_vector_equal(pu.pnormalized(vector), result)
         norm_test((1.0, 0.0, 0.0), (1, 0, 0))
         norm_test((1, 0, 0), (1, 0, 0))
         norm_test((0, 1, 0), (0, 1, 0))
diff --git a/pycam/Test/test_stl_loader.py b/pycam/Test/test_stl_loader.py
new file mode 100644
index 0000000..00bb246
--- /dev/null
+++ b/pycam/Test/test_stl_loader.py
@@ -0,0 +1,50 @@
+"""
+Copyright 2018 Ruslan Panasiuk <ruslan.panasiuk@gmail.com>
+
+This file is part of PyCAM.
+
+PyCAM is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
+"""
+
+import os
+
+import pycam.Test
+from pycam.Importers.STLImporter import import_model
+
+cwd = os.path.dirname(os.path.abspath(__file__))
+
+ASSETS_DIR = 'assets'
+
+
+def path_to_asset(asset_name):
+    """
+    Returns abs path for given `asset_name`
+    :param asset_name: file name of the asset from 'Tests/assets'
+    :returns: str - abs path to asset
+    """
+    return os.path.join(cwd, ASSETS_DIR, asset_name)
+
+
+class TestSTLLoader(pycam.Test.PycamTestCase):
+    """
+    Checks ability to load binary .stl files correctly
+    """
+
+    def test_load_ascii_file(self):
+        model = import_model(path_to_asset('cube_ascii.stl'))
+        self.assertEqual(len(model), 12)
+
+    def test_load_binary_file(self):
+        model = import_model(path_to_asset('cube_binary.stl'))
+        self.assertEqual(len(model), 12)
diff --git a/pycam/Test/test_svg_loader.py b/pycam/Test/test_svg_loader.py
new file mode 100644
index 0000000..71689c1
--- /dev/null
+++ b/pycam/Test/test_svg_loader.py
@@ -0,0 +1,49 @@
+"""
+Copyright 2018 Lars Kruse <devel@sumpfralle.de>
+
+This file is part of PyCAM.
+
+PyCAM is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
+"""
+
+import os
+
+from pycam.Importers.SVGDirectImporter import import_model
+import pycam.Test
+
+
+BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), os.path.pardir, os.path.pardir)
+SAMPLES_DIR = os.path.realpath(os.path.join(BASE_DIR, "samples"))
+
+
+class TestSVGLoader(pycam.Test.PycamTestCase):
+
+    @staticmethod
+    def _get_svg_filenames(path):
+        for dirpath, dirnames, filenames in os.walk(path):
+            yield from (os.path.join(dirpath, filename) for filename in filenames
+                        if filename.lower().endswith(".svg"))
+
+    def test_load_sample_svg_files(self):
+        test_count = 0
+        for svg_filename in self._get_svg_filenames(SAMPLES_DIR):
+            model = import_model(svg_filename)
+            self.assertGreater(len(model), 0,
+                               "Too few imported polygons from {}".format(svg_filename))
+            test_count += 1
+        self.assertEqual(test_count, 8)
+
+    def test_polygon_import(self):
+        model = import_model(os.path.join(SAMPLES_DIR, "polygons.svg"))
+        self.assertEqual(len(model), 3)
diff --git a/pycam/Test/test_tools.py b/pycam/Test/test_tools.py
index 99f97c6..f411861 100644
--- a/pycam/Test/test_tools.py
+++ b/pycam/Test/test_tools.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2013 Lars Kruse <devel@sumpfralle.de>
 
@@ -36,15 +35,15 @@ class CylindricalCutterCollisions(pycam.Test.PycamTestCase):
         "Drop"
         # flat triangle
         flat_triangle = Triangle((-2, 2, 3), (2, 0, 3), (-2, -2, 3))
-        self.assertVectorEqual(self._drop(3, flat_triangle), (0, 0, 3))
+        self.assert_vector_equal(self._drop(3, flat_triangle), (0, 0, 3))
         # skewed triangle
         skewed_triangle = Triangle((-2, 2, 1), (2, 0, 3), (-2, -2, 1))
-        self.assertVectorEqual(self._drop(1, skewed_triangle), (0, 0, 2.5))
-        self.assertVectorEqual(self._drop(1.5, skewed_triangle), (0, 0, 2.75))
-        self.assertVectorEqual(self._drop(1.9, skewed_triangle), (0, 0, 2.95))
-#       self.assertVectorEqual(self._drop(2.0, skewed_triangle), (0, 0, 3))
-#       self.assertVectorEqual(self._drop(2.1, skewed_triangle), (0, 0, 3))
-#       self.assertVectorEqual(self._drop(3, skewed_triangle), (0, 0, 3))
+        self.assert_vector_equal(self._drop(1, skewed_triangle), (0, 0, 2.5))
+        self.assert_vector_equal(self._drop(1.5, skewed_triangle), (0, 0, 2.75))
+        self.assert_vector_equal(self._drop(1.9, skewed_triangle), (0, 0, 2.95))
+#       self.assert_vector_equal(self._drop(2.0, skewed_triangle), (0, 0, 3))
+#       self.assert_vector_equal(self._drop(2.1, skewed_triangle), (0, 0, 3))
+#       self.assert_vector_equal(self._drop(3, skewed_triangle), (0, 0, 3))
 
 
 class SphericalCutterCollisions(pycam.Test.PycamTestCase):
@@ -57,7 +56,7 @@ class SphericalCutterCollisions(pycam.Test.PycamTestCase):
         "Drop"
         # flat triangle
         flat_triangle = Triangle((-2, 2, 3), (2, 0, 3), (-2, -2, 3))
-        self.assertVectorEqual(self._drop(3, flat_triangle), (0, 0, 3))
+        self.assert_vector_equal(self._drop(3, flat_triangle), (0, 0, 3))
         """
         Vertical shifting based on angle of skewed triangle:
             radius * (1/math.cos(math.pi/4) - 1)
@@ -75,8 +74,8 @@ class SphericalCutterCollisions(pycam.Test.PycamTestCase):
         triangles[60] = Triangle((-2, 2, -1), (2, 0, 7), (-2, -2, -1))
 
         def test_skew(radius, degree):
-            return self.assertVectorEqual(self._drop(radius, triangles[degree]),
-                                          (0, 0, 3 + factors[degree] * radius))
+            return self.assert_vector_equal(self._drop(radius, triangles[degree]),
+                                            (0, 0, 3 + factors[degree] * radius))
         test_skew(0.1, 45)
 #       test_skew(0.1, 30)
 #       test_skew(0.1, 60)
diff --git a/pycam/Toolpath/Filters.py b/pycam/Toolpath/Filters.py
index 357e81f..fd763a7 100644
--- a/pycam/Toolpath/Filters.py
+++ b/pycam/Toolpath/Filters.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2012 Lars Kruse <devel@sumpfralle.de>
 
@@ -19,6 +18,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
 
+import collections
 import decimal
 
 from pycam.Geometry import epsilon
@@ -72,13 +72,14 @@ def get_filtered_moves(moves, filters):
     return moves
 
 
-class BaseFilter(object):
+class BaseFilter:
 
     PARAMS = []
     WEIGHT = 50
 
     def __init__(self, *args, **kwargs):
-        self.settings = dict(kwargs)
+        # we want to achieve a stable order in order to be hashable
+        self.settings = collections.OrderedDict(kwargs)
         # fail if too many arguments (without names) are given
         if len(args) > len(self.PARAMS):
             raise ValueError("Too many parameters: %d (expected: %d)"
@@ -96,6 +97,9 @@ class BaseFilter(object):
     def clone(self):
         return self.__class__(**self.settings)
 
+    def __hash__(self):
+        return hash((str(self.__class__), tuple(self.settings.items())))
+
     def __ror__(self, toolpath):
         # allow to use pycam.Toolpath.Toolpath instances (instead of a list)
         if hasattr(toolpath, "path") and hasattr(toolpath, "filters"):
@@ -140,7 +144,8 @@ class SafetyHeight(BaseFilter):
                 safety_pending = True
             elif step.action in MOVES_LIST:
                 new_pos = tuple(step.position)
-                max_height = max(max_height, new_pos[2])
+                if (max_height is None) or (new_pos[2] > max_height):
+                    max_height = new_pos[2]
                 if not last_pos:
                     # there was a safety move (or no move at all) before
                     # -> move sideways
@@ -193,7 +198,7 @@ class MachineSetting(BaseFilter):
         return "%s=%s" % (self.settings["key"], self.settings["value"])
 
 
-class PathMode(MachineSetting):
+class CornerStyle(MachineSetting):
 
     PARAMS = ("path_mode", "motion_tolerance", "naive_tolerance")
     WEIGHT = 25
@@ -204,7 +209,7 @@ class PathMode(MachineSetting):
                   self.settings["naive_tolerance"]))]
 
     def _render_settings(self):
-        return "%d / %d / %d" % (self.settings["path_mode"],
+        return "%s / %d / %d" % (self.settings["path_mode"],
                                  self.settings["motion_tolerance"],
                                  self.settings["naive_tolerance"])
 
@@ -225,18 +230,25 @@ class SelectTool(BaseFilter):
 
 
 class TriggerSpindle(BaseFilter):
+    """ control the spindle spin for each tool selection
+
+    A spin-up command is added after each tool selection.
+    A spin-down command is added before each tool selection and after the last move.
+    If no tool selection is found, then single spin-up and spin-down commands are added before the
+    first move and after the last move.
+    """
 
     PARAMS = ("delay", )
-    WEIGHT = 40
+    WEIGHT = 36
 
     def filter_toolpath(self, toolpath):
-        def enable_spindle(path, index):
+        def spin_up(path, index):
             path.insert(index, ToolpathSteps.MachineSetting("spindle_enabled", True))
             if self.settings["delay"]:
                 path.insert(index + 1, ToolpathSteps.MachineSetting("delay",
                                                                     self.settings["delay"]))
 
-        def disable_spindle(path, index):
+        def spin_down(path, index):
             path.insert(index, ToolpathSteps.MachineSetting("spindle_enabled", False))
 
         # find all positions of "select_tool"
@@ -245,19 +257,53 @@ class TriggerSpindle(BaseFilter):
         if tool_changes:
             tool_changes.reverse()
             for index in tool_changes:
-                enable_spindle(toolpath, index + 1)
+                spin_up(toolpath, index + 1)
+                if index > 0:
+                    # add a "disable"
+                    spin_down(toolpath, index)
         else:
-            # add a single tool selection before the first move
+            # add a single spin-up before the first move
             for index, step in enumerate(toolpath):
                 if step.action in MOVES_LIST:
-                    enable_spindle(toolpath, index)
+                    spin_up(toolpath, index)
                     break
         # add "stop spindle" just after the last move
         index = len(toolpath) - 1
         while (toolpath[index].action not in MOVES_LIST) and (index > 0):
             index -= 1
         if toolpath[index].action in MOVES_LIST:
-            disable_spindle(toolpath, index + 1)
+            spin_down(toolpath, index + 1)
+        return toolpath
+
+
+class SpindleSpeed(BaseFilter):
+    """ add a spindle speed command after each tool selection
+
+    If no tool selection is found, then a single spindle speed command is inserted before the first
+    move.
+    """
+
+    PARAMS = ("speed", )
+    WEIGHT = 37
+
+    def filter_toolpath(self, toolpath):
+        def set_speed(path, index):
+            path.insert(index, ToolpathSteps.MachineSetting("spindle_speed",
+                                                            self.settings["speed"]))
+
+        # find all positions of "select_tool"
+        tool_changes = [index for index, step in enumerate(toolpath)
+                        if (step.action == MACHINE_SETTING) and (step.key == "select_tool")]
+        if tool_changes:
+            tool_changes.reverse()
+            for index in tool_changes:
+                set_speed(toolpath, index + 1)
+        else:
+            # no tool selections: add a single spindle speed command before the first move
+            for index, step in enumerate(toolpath):
+                if step.action in MOVES_LIST:
+                    set_speed(toolpath, index)
+                    break
         return toolpath
 
 
@@ -454,7 +500,7 @@ def _get_num_converter(step_width):
 
 class StepWidth(BaseFilter):
 
-    PARAMS = ("step_width_x", "step_width_y", "step_width_z")
+    PARAMS = ("step_width", )
     NUM_OF_AXES = 3
     WEIGHT = 60
 
@@ -462,7 +508,7 @@ class StepWidth(BaseFilter):
         minimum_steps = []
         conv = []
         for key in "xyz":
-            minimum_steps.append(self.settings["step_width_%s" % key])
+            minimum_steps.append(self.settings["step_width"][key])
         for step_width in minimum_steps:
             conv.append(_get_num_converter(step_width)[0])
         last_pos = None
@@ -470,19 +516,34 @@ class StepWidth(BaseFilter):
         for step in toolpath:
             if step.action in MOVES_LIST:
                 if last_pos:
+                    real_target_position = []
                     diff = [(abs(a_conv(a_last_pos) - a_conv(a_pos)))
                             for a_conv, a_last_pos, a_pos in zip(conv, last_pos, step.position)]
-                    if all([d < lim for d, lim in zip(diff, minimum_steps)]):
-                        # too close: ignore this move
+                    position_changed = False
+                    # For every axis: if the new position is closer than the defined step width,
+                    # then stay at the previous position.
+                    # see https://sf.net/p/pycam/discussion/860184/thread/930b1c7f/
+                    for axis_distance, min_distance, axis_last, axis_wanted in zip(
+                            diff, minimum_steps, last_pos, step.position):
+                        if axis_distance >= min_distance:
+                            real_target_position.append(axis_wanted)
+                            position_changed = True
+                        else:
+                            real_target_position.append(axis_last)
+                    if not position_changed:
+                        # The limitiation was not exceeded for any axis.
                         continue
+                else:
+                    real_target_position = step.position
                 # TODO: this would also change the GCode output - we want
                 # this, but it sadly breaks other code pieces that rely on
                 # floats instead of decimals at this point. The output
                 # conversion needs to move into the GCode output hook.
 #               destination = [a_conv(a_pos) for a_conv, a_pos in zip(conv, step.position)]
-                destination = step.position
+                destination = real_target_position
                 path.append(ToolpathSteps.get_step_class_by_action(step.action)(destination))
-                last_pos = step.position
+                # We store the real machine position (instead of the "wanted" position).
+                last_pos = real_target_position
             else:
                 # forget "last_pos" - we don't know what happened in between
                 last_pos = None
diff --git a/pycam/Toolpath/MotionGrid.py b/pycam/Toolpath/MotionGrid.py
index c334847..ebb00e7 100644
--- a/pycam/Toolpath/MotionGrid.py
+++ b/pycam/Toolpath/MotionGrid.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -33,14 +32,6 @@ import pycam.Utils.log
 _log = pycam.Utils.log.get_logger()
 
 
-if not hasattr(enum, "IntEnum"):
-    # The following is only relevant for Python2 (Python3 includes a core library named 'enum').
-    # The pypi package 'enum' is not suitable since it lacks 'IntEnum' (as of v0.4.6).
-    # The pypi package 'enum34' is suitable.
-    _log.error("The installed 'enum' package lacks 'IntEnum'. Maybe you should install 'enum34' "
-               "instead?")
-
-
 class GridDirection(enum.Enum):
     X = "x"
     Y = "y"
@@ -101,6 +92,14 @@ def floatrange(start, end, inc=None, steps=None, reverse=False):
             yield start + inc * index
 
 
+def resolve_multi_level_generator(generator, levels):
+    assert isinstance(levels, int) and (levels >= 0)
+    if levels > 0:
+        return [resolve_multi_level_generator(item, levels - 1) for item in generator]
+    else:
+        return generator
+
+
 def get_fixed_grid_line(start, end, line_pos, z, step_width=None, grid_direction=GridDirection.X):
     if step_width is None:
         # useful for PushCutter operations
@@ -213,10 +212,12 @@ def get_fixed_grid_layer(minx, maxx, miny, maxy, z, line_distance, step_width=No
     return get_lines(start, end, end_position)
 
 
-def get_fixed_grid(box, layer_distance, line_distance=None, step_width=None,
+def get_fixed_grid(box, layer_distance, line_distance, step_width=None,
                    grid_direction=GridDirection.X, milling_style=MillingStyle.IGNORE,
-                   start_position=StartPosition.Z):
+                   start_position=StartPosition.Z, use_fixed_start_position=False):
     """ Calculate the grid positions for toolpath moves
+
+    @param use_fixed_start_position: the moves for every layer start at the same position
     """
     assert isinstance(milling_style, MillingStyle)
     assert isinstance(grid_direction, GridDirection)
@@ -239,69 +240,75 @@ def get_fixed_grid(box, layer_distance, line_distance=None, step_width=None,
                 yield (layer, GridDirection.Y)
 
     for z, direction in get_layers_with_direction(layers):
-        result, start_position = get_fixed_grid_layer(
+        result, suggested_start_position = get_fixed_grid_layer(
             box.lower.x, box.upper.x, box.lower.y, box.upper.y, z, line_distance,
             step_width=step_width, grid_direction=direction, milling_style=milling_style,
             start_position=start_position)
+        if not use_fixed_start_position:
+            start_position = suggested_start_position
         yield result
 
 
-def _get_position(minx, maxx, miny, maxy, z, position):
-    if position & StartPosition.X > 0:
-        x = minx
-    else:
-        x = maxx
-    if position & StartPosition.Y > 0:
-        y = miny
-    else:
-        y = maxy
-    return (x, y, z)
+def _get_absolute_position(minx, maxx, miny, maxy, z, position):
+    """ calculate a point within a rectangle based on the relative position along the axes """
+    x = maxx if position & StartPosition.X > 0 else minx
+    y = maxy if position & StartPosition.Y > 0 else miny
+    return Point3D(x, y, z)
 
 
 def get_spiral_layer_lines(minx, maxx, miny, maxy, z, line_distance_x, line_distance_y,
-                           grid_direction, start_position, current_location):
+                           start_grid_direction, start_position):
+    """ calculate single lines concatenated together forming a spiral
+
+    The resulting corners are sharp (not rounded).  Rounding can be added later.
+    """
+    result_lines = []
     xor_map = {GridDirection.X: StartPosition.X, GridDirection.Y: StartPosition.Y}
-    end_position = start_position ^ xor_map[grid_direction]
-    end_location = _get_position(minx, maxx, miny, maxy, z, end_position)
-    lines = [(current_location, end_location)]
-    if grid_direction == GridDirection.X:
-        next_grid_direction = GridDirection.Y
-        if start_position & StartPosition.Y > 0:
-            miny += line_distance_y
-        else:
-            maxy -= line_distance_y
-    else:
-        next_grid_direction = GridDirection.X
-        if start_position & StartPosition.X > 0:
-            minx += line_distance_x
+    current_grid_direction = start_grid_direction
+    current_position = start_position
+    current_absolute = _get_absolute_position(minx, maxx, miny, maxy, z, current_position)
+    while (minx - epsilon <= maxx) and (miny - epsilon <= maxy):
+        # calculate the next corner from the current position according to the current direction
+        next_position = current_position ^ xor_map[current_grid_direction]
+        # calculate absolute coordinates
+        next_absolute = _get_absolute_position(minx, maxx, miny, maxy, z, next_position)
+        result_lines.append((current_absolute, next_absolute))
+        # determine the next direction
+        if current_grid_direction == GridDirection.X:
+            next_grid_direction = GridDirection.Y
+            if current_position & StartPosition.Y > 0:
+                maxy -= line_distance_y
+            else:
+                miny += line_distance_y
         else:
-            maxx -= line_distance_x
-    if (minx - epsilon <= maxx) and (miny - epsilon <= maxy):
-        # recursively compute the next lines
-        lines.extend(get_spiral_layer_lines(minx, maxx, miny, maxy, z, line_distance_x,
-                                            line_distance_y, next_grid_direction, end_position,
-                                            end_location))
-    return lines
+            next_grid_direction = GridDirection.X
+            if current_position & StartPosition.X > 0:
+                maxx -= line_distance_x
+            else:
+                minx += line_distance_x
+        current_grid_direction, current_position, current_absolute = (
+            next_grid_direction, next_position, next_absolute)
+    return result_lines
 
 
 def get_spiral_layer(minx, maxx, miny, maxy, z, line_distance, step_width, grid_direction,
                      start_position, rounded_corners, reverse):
-    current_location = _get_position(minx, maxx, miny, maxy, z, start_position)
     if line_distance > 0:
         line_steps_x = math.ceil((float(maxx - minx) / line_distance))
         line_steps_y = math.ceil((float(maxy - miny) / line_distance))
         line_distance_x = (maxx - minx) / line_steps_x
         line_distance_y = (maxy - miny) / line_steps_y
+        # calculate connected lines filling up the rectangle
         lines = get_spiral_layer_lines(minx, maxx, miny, maxy, z, line_distance_x, line_distance_y,
-                                       grid_direction, start_position, current_location)
+                                       grid_direction, start_position)
         if reverse:
-            lines.reverse()
+            lines = [(p2, p1) for p1, p2 in reversed(lines)]
         # turn the lines into steps
         if rounded_corners:
             rounded_lines = []
+            radius = 0.5 * min(line_distance_x, line_distance_y)
             previous = None
             for index, (start, end) in enumerate(lines):
-                radius = 0.5 * min(line_distance_x, line_distance_y)
                 edge_vector = psub(end, start)
                 # TODO: ellipse would be better than arc
                 offset = pmul(pnormalized(edge_vector), radius)
@@ -330,7 +337,8 @@ def get_spiral_layer(minx, maxx, miny, maxy, z, line_distance, step_width, grid_
                 if index != len(lines) - 1:
                     end = psub(end, offset)
                 previous = end
-                rounded_lines.append((start, end))
+                if start != end:
+                    rounded_lines.append((start, end))
             lines = rounded_lines
         for start, end in lines:
             points = []
@@ -346,8 +354,6 @@ def get_spiral_layer(minx, maxx, miny, maxy, z, line_distance, step_width, grid_
                 for step in steps:
                     next_point = padd(line.p1, pmul(line.dir, step))
                     points.append(next_point)
-            if reverse:
-                points.reverse()
             yield points
 
 
@@ -381,6 +387,7 @@ def get_lines_layer(lines, z, last_z=None, step_width=None,
                     milling_style=MillingStyle.CONVENTIONAL):
     get_proj_point = lambda proj_point: (proj_point[0], proj_point[1], z)
     projected_lines = []
+    _log.debug("Lines Layer: processing original lines")
     for line in lines:
         if (last_z is not None) and (last_z < line.minz):
             # the line was processed before
@@ -398,7 +405,7 @@ def get_lines_layer(lines, z, last_z=None, step_width=None,
                 p2 = get_proj_point(line.p2)
             projected_lines.append(Line(p1, plane_point))
             yield Line(plane_point, p2)
-        elif line.minz < last_z < line.maxz:
+        elif (last_z is not None) and (line.minz < last_z < line.maxz):
             plane = Plane((0, 0, last_z), (0, 0, 1, 'v'))
             cp = plane.intersect_point(line.dir, line.p1)[0]
             # we can be sure that there is an intersection
@@ -417,7 +424,10 @@ def get_lines_layer(lines, z, last_z=None, step_width=None,
                 _log.warn("Unexpected condition 'get_lines_layer': %s / %s / %s / %s",
                           line.p1, line.p2, z, last_z)
     # process all projected lines
-    for line in projected_lines:
+    _log.debug("Lines Layer: processing projected lines")
+    for index, line in enumerate(projected_lines):
+        _log.debug2("Lines Layer: processing projected line %d/%d",
+                    index + 1, len(projected_lines))
         points = []
         if step_width is None:
             points.append(line.p1)
@@ -491,9 +501,11 @@ def get_lines_grid(models, box, layer_distance, line_distance=None, step_width=N
     if skip_first_layer and (len(layers) > 1):
         layers = layers[1:]
     last_z = None
+    _log.debug("Pocketing Polygon Layers: %d", len(layers))
     if layers:
         # the upper layers are used for PushCutter operations
         for z in layers[:-1]:
+            _log.debug2("Pocketing Polygon Layers: calculating z=%g for PushCutter", z)
             if callback:
                 callback()
             yield get_lines_layer(lines, z, last_z=last_z, step_width=None,
@@ -502,6 +514,8 @@ def get_lines_grid(models, box, layer_distance, line_distance=None, step_width=N
         # the last layer is used for a DropCutter operation
         if callback:
             callback()
+        _log.debug2("Pocketing Polygon Layers: calculating z=%g (lowest layer) for DropCutter",
+                    layers[-1])
         yield get_lines_layer(lines, layers[-1], last_z=last_z, step_width=step_width,
                               milling_style=milling_style)
 
@@ -523,12 +537,15 @@ def get_pocketing_polygons(polygons, offset, pocketing_type, callback=None):
         _log.debug("Using openvoronoi pocketing algorithm")
         poly = pycam.Toolpath.OpenVoronoi.pocket_model(polygons, offset)
     else:
-        _log.info("Failed to load openvoronoi library.")
+        _log.info("Failed to load openvoronoi library. Falling back to custom pocketing "
+                  "algorithm.")
         poly = get_pocketing_polygons_simple(polygons, offset, pocketing_type, callback)
     return poly
 
 
 def get_pocketing_polygons_simple(polygons, offset, pocketing_type, callback=None):
+    _log.debug("Calculating pocketing polygons: count=%d, offset=%d, pocketing=%s",
+               len(polygons), offset, pocketing_type)
     pocketing_limit = 1000
     base_polygons = []
     other_polygons = []
@@ -552,6 +569,8 @@ def get_pocketing_polygons_simple(polygons, offset, pocketing_type, callback=Non
     # For now we use only the polygons that do not surround any other
     # polygons. Sorry - the pocketing is currently very simple ...
     base_filtered_polygons = []
+    _log.debug("Pocketing Polygons: ignore polygons surrounding other polygons "
+               "(wrong, but simple)")
     for candidate in base_polygons:
         if callback and callback():
             # we were interrupted
@@ -563,19 +582,30 @@ def get_pocketing_polygons_simple(polygons, offset, pocketing_type, callback=Non
             base_filtered_polygons.append(candidate)
     # start the pocketing for all remaining polygons
     pocket_polygons = []
-    for base_polygon in base_filtered_polygons:
+    for index, base_polygon in enumerate(base_filtered_polygons):
+        _log.debug2("Pocketing Polygons: processing polygon %d/%d",
+                    index + 1, len(base_filtered_polygons))
         pocket_polygons.append(base_polygon)
         current_queue = [base_polygon]
         next_queue = []
         pocket_depth = 0
+        this_pocket_polygons = []
         while current_queue and (pocket_depth < pocketing_limit):
             if callback and callback():
                 return polygons
             for poly in current_queue:
                 result = poly.get_offset_polygons(offset)
-                pocket_polygons.extend(result)
+                this_pocket_polygons.extend(result)
                 next_queue.extend(result)
                 pocket_depth += 1
             current_queue = next_queue
             next_queue = []
+        if pocket_depth < pocketing_limit:
+            # the result looks fine
+            pocket_polygons.extend(this_pocket_polygons)
+        else:
+            # probably there was a problem with the algorithm - throw away the result
+            _log.warning("Pocketing Polygons: exceeded nesting limit - probably something went "
+                         "wrong while processing a polygon. Skipping it.")
+    _log.debug("Pocketing Polygons: calculated %d polygons", len(pocket_polygons))
     return pocket_polygons
diff --git a/pycam/Toolpath/OpenVoronoi.py b/pycam/Toolpath/OpenVoronoi.py
index 2bf232e..d266baf 100644
--- a/pycam/Toolpath/OpenVoronoi.py
+++ b/pycam/Toolpath/OpenVoronoi.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 This module uses the openvoronoi library (https://github.com/aewallin/openvoronoi).
 This module is experimental and not well tested.
diff --git a/pycam/Toolpath/Steps.py b/pycam/Toolpath/Steps.py
index 2ff0dae..1177a24 100644
--- a/pycam/Toolpath/Steps.py
+++ b/pycam/Toolpath/Steps.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
diff --git a/pycam/Toolpath/SupportGrid.py b/pycam/Toolpath/SupportGrid.py
index e164d2f..289d786 100644
--- a/pycam/Toolpath/SupportGrid.py
+++ b/pycam/Toolpath/SupportGrid.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -77,6 +76,17 @@ def _add_aligned_cuboid_to_model(minx, maxx, miny, maxy, minz, maxz):
 
 def get_support_grid_locations(minx, maxx, miny, maxy, dist_x, dist_y, offset_x=0.0, offset_y=0.0,
                                adjustments_x=None, adjustments_y=None):
+    """ calculate positions of a orthogonal grid of support bridges
+
+    @param minx: minimum x value of the target area
+    @param maxx: maximum x value of the target area
+    @param miny: minimum y value of the target area
+    @param maxy: maximum y value of the target area
+    @param dist_x: distance between two lines parallel to the y axis
+    @param dist_y: distance between two lines parallel to the x axis
+    @param adjustments_x: iterable of offsets to be added to each x position
+    @param adjustments_y: iterable of offsets to be added to each y position
+    """
     def get_lines(center, dist, min_value, max_value):
         """ generate a list of positions starting from the middle going up and
         and down
@@ -106,16 +116,15 @@ def get_support_grid_locations(minx, maxx, miny, maxy, dist_x, dist_y, offset_x=
     center_y = (maxy + miny) / 2 + offset_y
     lines_x = get_lines(center_x, dist_x, minx, maxx)
     lines_y = get_lines(center_y, dist_y, miny, maxy)
-    if adjustments_x:
-        for index in range(min(len(lines_x), len(adjustments_x))):
-            lines_x[index] += number(adjustments_x[index])
-    if adjustments_y:
-        for index in range(min(len(lines_y), len(adjustments_y))):
-            lines_y[index] += number(adjustments_y[index])
+    # apply as many offsets from adjustments_x and adjustments_y as available
+    for value_list, adjustments in ((lines_x, adjustments_x), (lines_y, adjustments_y)):
+        if adjustments:
+            for index, (current_value, adjustment) in enumerate(zip(value_list, adjustments)):
+                value_list[index] = current_value + number(adjustment)
     return lines_x, lines_y
 
 
-def get_support_grid(minx, maxx, miny, maxy, z_plane, dist_x, dist_y, thickness, height,
+def get_support_grid(minx, maxx, miny, maxy, z_plane, dist_x, dist_y, thickness, height, length,
                      offset_x=0.0, offset_y=0.0, adjustments_x=None, adjustments_y=None):
     lines_x, lines_y = get_support_grid_locations(minx, maxx, miny, maxy, dist_x, dist_y, offset_x,
                                                   offset_y, adjustments_x, adjustments_y)
@@ -126,16 +135,15 @@ def get_support_grid(minx, maxx, miny, maxy, z_plane, dist_x, dist_y, thickness,
     height = number(height)
     # helper variables
     thick_half = thickness / 2
-    length_extension = max(thickness, height)
     for line_x in lines_x:
         # we make the grid slightly longer (by thickness) than necessary
         grid_model += _add_aligned_cuboid_to_model(
-            line_x - thick_half, line_x + thick_half, miny - length_extension,
-            maxy + length_extension, z_plane, z_plane + height)
+            line_x - thick_half, line_x + thick_half, miny - length,
+            maxy + length, z_plane, z_plane + height)
     for line_y in lines_y:
         # we make the grid slightly longer (by thickness) than necessary
         grid_model += _add_aligned_cuboid_to_model(
-            minx - length_extension, maxx + length_extension, line_y - thick_half,
+            minx - length, maxx + length, line_y - thick_half,
             line_y + thick_half, z_plane, z_plane + height)
     return grid_model
 
@@ -175,7 +183,7 @@ def get_support_distributed(model, z_plane, average_distance, min_bridges_per_po
     return result
 
 
-class _BridgeCorner(object):
+class _BridgeCorner:
 
     # currently we only use the xy plane
     up_vector = (0, 0, 1, 'v')
diff --git a/pycam/Toolpath/__init__.py b/pycam/Toolpath/__init__.py
index 1a921fc..f47f68c 100644
--- a/pycam/Toolpath/__init__.py
+++ b/pycam/Toolpath/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,6 +17,7 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+from enum import Enum
 from itertools import groupby
 import math
 import os
@@ -29,7 +29,7 @@ except ImportError:
     # both modules are required for visualization, only
     pass
 
-from pycam.Geometry import epsilon, number, Box3D, Point3D
+from pycam.Geometry import epsilon, number, Box3D, DimensionalObject, Point3D
 from pycam.Geometry.PointUtils import padd, pcross, pdist, pmul, pnorm, pnormalized, psub
 import pycam.Utils.log
 
@@ -39,8 +39,13 @@ _log = pycam.Utils.log.get_logger()
 
 MOVE_STRAIGHT, MOVE_STRAIGHT_RAPID, MOVE_ARC, MOVE_SAFETY, MACHINE_SETTING, COMMENT = range(6)
 MOVES_LIST = (MOVE_STRAIGHT, MOVE_STRAIGHT_RAPID, MOVE_ARC)
-CORNER_STYLE_EXACT_PATH, CORNER_STYLE_EXACT_STOP, CORNER_STYLE_OPTIMIZE_SPEED, \
-    CORNER_STYLE_OPTIMIZE_TOLERANCE = range(4)
+
+
+class ToolpathPathMode(Enum):
+    CORNER_STYLE_EXACT_PATH = "exact_path"
+    CORNER_STYLE_EXACT_STOP = "exact stop"
+    CORNER_STYLE_OPTIMIZE_SPEED = "optimize_speed"
+    CORNER_STYLE_OPTIMIZE_TOLERANCE = "optimize_tolerance"
 
 
 def _check_colinearity(p1, p2, p3):
@@ -72,10 +77,10 @@ def simplify_toolpath(path):
             index += 1
 
 
-class Toolpath(object):
+class Toolpath(DimensionalObject):
 
     def __init__(self, toolpath_path=None, toolpath_filters=None, tool=None, **kwargs):
-        super(Toolpath, self).__init__(**kwargs)
+        super().__init__(**kwargs)
         if toolpath_path is None:
             toolpath_path = []
         if toolpath_filters is None:
@@ -123,6 +128,9 @@ class Toolpath(object):
         self._minz = None
         self._maxz = None
 
+    def __hash__(self):
+        return hash((self.__path, self.__filters))
+
     def _get_limit_generic(self, idx, func):
         values = [step.position[idx] for step in self.path if step.action in MOVES_LIST]
         return func(values)
@@ -319,16 +327,6 @@ class Toolpath(object):
         self.opengl_safety_height = safety_height
         self.opengl_lines = outpaths
 
-    def get_machine_setting(self, key, default=None):
-        """ look for the first appearance of a machine setting (e.g. feedrate,
-        safety height, metric/imperial, ...). Additional occourences of this
-        setting are ignored.
-        """
-        for step in self.path:
-            if (step.action == MACHINE_SETTING) and (step.key == key):
-                return step.value
-        return default
-
     def get_machine_time(self, safety_height=0.0):
         """ calculate an estimation of the time required for processing the
         toolpath with the machine
@@ -378,7 +376,7 @@ class Toolpath(object):
         return self._cache_basic_moves
 
 
-class Bounds(object):
+class Bounds:
 
     TYPE_RELATIVE_MARGIN = 0
     TYPE_FIXED_MARGIN = 1
@@ -412,24 +410,6 @@ class Bounds(object):
         return "Bounds(%s, %s, %s)" % (bounds_type_labels[self.bounds_type],
                                        self.bounds_low, self.bounds_high)
 
-    def is_valid(self):
-        for index in range(3):
-            if self.bounds_low[index] > self.bounds_high[index]:
-                return False
-        return True
-
-    def set_reference(self, reference):
-        self.reference = reference
-
-    def set_name(self, name):
-        self.name = name
-
-    def get_name(self):
-        return self.name
-
-    def get_type(self):
-        return self.bounds_type
-
     def set_type(self, bounds_type):
         # complain if an unknown bounds_type value was given
         if bounds_type not in (Bounds.TYPE_RELATIVE_MARGIN, Bounds.TYPE_FIXED_MARGIN,
@@ -439,11 +419,6 @@ class Bounds(object):
         else:
             self.bounds_type = bounds_type
 
-    def get_referenced_bounds(self, reference):
-        return Bounds(self.bounds_type,
-                      Box3D(Point3D(*self.bounds_low), Point3D(*self.bounds_high)),
-                      reference=reference)
-
     def get_bounds(self):
         return Box3D(Point3D(*self.bounds_low), Point3D(*self.bounds_high))
 
@@ -459,7 +434,7 @@ class Bounds(object):
             this object (for the x, y and z axes). Each item must be a float
             value. This argument is ignored for the boundary type "TYPE_CUSTOM".
         @type reference: (tuple|list) of float
-        @returns: a tuple of two lists containg the low and high limits
+        @returns: a tuple of two lists containing the low and high limits
         @rvalue: tuple(list)
         """
         # use the default reference if none was given
@@ -495,61 +470,3 @@ class Bounds(object):
                                       "implemented for the bounds_type '%s'"
                                       % str(self.bounds_type))
         return Box3D(Point3D(low), Point3D(high))
-
-    def adjust_bounds_to_absolute_limits(self, box_limit, reference=None):
-        """ change the current bounds settings according to some absolute values
-
-        This does not change the type of this bounds instance (e.g. relative).
-        @value box_limit: the maximum allowed box
-        @type box_limit: Box3D
-        @value reference: a reference object described by a tuple (or list) of
-            three item. These three values describe only the lower boundary of
-            this object (for the x, y and z axes). Each item must be a float
-            value. This argument is ignored for the boundary type "TYPE_CUSTOM".
-        @type reference: (tuple|list) of float
-        """
-        # use the default reference if none was given
-        if reference is None:
-            reference = self.reference
-        # check if a reference is given (if necessary)
-        if self.bounds_type \
-                in (Bounds.TYPE_RELATIVE_MARGIN, Bounds.TYPE_FIXED_MARGIN):
-            if reference is None:
-                raise ValueError("any non-custom boundary definition requires an a reference "
-                                 "object for calculating absolute limits")
-            else:
-                ref_low, ref_high = reference.get_absolute_limits()
-        # calculate the new settings
-        if self.bounds_type == Bounds.TYPE_RELATIVE_MARGIN:
-            for index in range(3):
-                dim_width = ref_high[index] - ref_low[index]
-                if dim_width == 0:
-                    # We always loose relative margins if the specific dimension
-                    # is zero. There is no way to avoid this.
-                    message = ("Non-zero %s boundary lost during conversion to relative margins "
-                               "due to zero size dimension '%s'." % "xyz"[index])
-                    # Display warning messages, if we can't reach the requested
-                    # absolute dimension.
-                    if ref_low[index] != box_limit.lower[index]:
-                        _log.info(message, "lower")
-                    if ref_high[index] != box_limit.upper[index]:
-                        _log.info(message, "upper")
-                    self.bounds_low[index] = 0
-                    self.bounds_high[index] = 0
-                else:
-                    self.bounds_low[index] = (ref_low[index] - box_limit.lower[index]) / dim_width
-                    self.bounds_high[index] = ((box_limit.upper[index] - ref_high[index])
-                                               / dim_width)
-        elif self.bounds_type == Bounds.TYPE_FIXED_MARGIN:
-            for index in range(3):
-                self.bounds_low[index] = ref_low[index] - box_limit.lower[index]
-                self.bounds_high[index] = box_limit.upper[index] - ref_high[index]
-        elif self.bounds_type == Bounds.TYPE_CUSTOM:
-            for index in range(3):
-                self.bounds_low[index] = box_limit.lower[index]
-                self.bounds_high[index] = box_limit.upper[index]
-        else:
-            # this should not happen
-            raise NotImplementedError("the function 'adjust_bounds_to_absolute_limits' is "
-                                      "currently not implemented for the bounds_type '%s'"
-                                      % str(self.bounds_type))
diff --git a/pycam/Utils/FontCache.py b/pycam/Utils/FontCache.py
index 5c62347..abab3ea 100644
--- a/pycam/Utils/FontCache.py
+++ b/pycam/Utils/FontCache.py
@@ -1,5 +1,3 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -31,7 +29,7 @@ DEFAULT_NAMES = ("normal", "default", "standard")
 log = pycam.Utils.log.get_logger()
 
 
-class FontCache(object):
+class FontCache:
     """ The FontCache gradually loads fonts. This is more efficient than an
     immeadiate initialization of all fonts for the DXF importer.
     Use "get_font" for loading (incrementally) fonts until the requested font
diff --git a/pycam/Utils/__init__.py b/pycam/Utils/__init__.py
index a7fce80..83d26eb 100644
--- a/pycam/Utils/__init__.py
+++ b/pycam/Utils/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008 Lode Leroy
 
@@ -18,31 +17,20 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+import enum
 import os
 import re
 import socket
 import sys
 import traceback
 import urllib
-try:
-    # Python3
-    from urllib.parse import urlparse
-    from urllib.request import url2pathname
-except ImportError:
-    # Python2
-    from urlparse import urlparse
-    from urllib import url2pathname
+from urllib.parse import urlparse
+from urllib.request import url2pathname
 # this is imported below on demand
 # import win32com
 # import win32api
 
 
-PLATFORM_LINUX = 0
-PLATFORM_WINDOWS = 1
-PLATFORM_MACOS = 2
-PLATFORM_UNKNOWN = 3
-
-
 # setproctitle is (optionally) imported
 try:
     from setproctitle import setproctitle
@@ -51,15 +39,44 @@ except ImportError:
     setproctitle = lambda name: None
 
 
+__application_key = []
+
+
+class OSPlatform(enum.IntEnum):
+    LINUX = 0
+    WINDOWS = 1
+    MACOS = 2
+    UNKNOWN = 3
+
+
 def get_platform():
     if hasattr(sys, "getwindowsversion"):
-        return PLATFORM_WINDOWS
+        return OSPlatform.WINDOWS
     elif sys.platform == "darwin":
-        return PLATFORM_MACOS
+        return OSPlatform.MACOS
     elif sys.platform.startswith("linux"):
-        return PLATFORM_LINUX
+        return OSPlatform.LINUX
     else:
-        return PLATFORM_UNKNOWN
+        return OSPlatform.UNKNOWN
+
+
+def get_type_name(instance):
+    return type(instance).__name__
+
+
+def set_application_key(key):
+    while __application_key:
+        __application_key.pop()
+    __application_key.append(key)
+
+
+def get_application_key():
+    """ get the somehow unique name of the running application
+
+    This application key can be used to distinguish application-specific namespaces in the data
+    storage (e.g. "pycam-gtk" or "pycam-cli").
+    """
+    return __application_key[0] if __application_key else None
 
 
 def get_case_insensitive_file_pattern(pattern):
@@ -94,10 +111,7 @@ def get_non_conflicting_name(template, conflicts, start=None, get_next_func=None
         @returns: a usable name that was not found in "conflicts"
         @rtype: basestr
     """
-    if start is None:
-        index = len(conflicts) + 1
-    else:
-        index = start
+    index = 1 if start is None else start
     if get_next_func is None:
         get_next_func = lambda current: current + 1
     while (template % index) in conflicts:
@@ -105,7 +119,7 @@ def get_non_conflicting_name(template, conflicts, start=None, get_next_func=None
     return template % index
 
 
-class URIHandler(object):
+class URIHandler:
 
     DEFAULT_PREFIX = "file://"
 
@@ -124,7 +138,7 @@ class URIHandler(object):
             self._uri = location._uri
         elif not location:
             self._uri = urlparse(self.DEFAULT_PREFIX)
-        elif (get_platform() == PLATFORM_WINDOWS) and (location[1:3] == ":\\"):
+        elif (get_platform() == OSPlatform.WINDOWS) and (location[1:3] == ":\\"):
             self._uri = urlparse(self.DEFAULT_PREFIX + location.replace("\\", "/"))
         else:
             self._uri = urlparse(location)
@@ -144,7 +158,7 @@ class URIHandler(object):
 
     def get_path(self):
         encoded_path = self._uri.path
-        if get_platform() == PLATFORM_WINDOWS:
+        if get_platform() == OSPlatform.WINDOWS:
             # prepend "netloc" (the drive letter - e.g. "c:")
             encoded_path = self._uri.netloc + encoded_path
         # decode all special characters like "%20" and replace "/" with "\\" (Windows)
@@ -232,7 +246,7 @@ def get_all_ips():
 
 
 def get_exception_report():
-    return ("An unexpected exception occoured: please send the text below to the developers of "
+    return ("An unexpected exception occurred: please send the text below to the developers of "
             "PyCAM. Thanks a lot!" + os.linesep + traceback.format_exc())
 
 
@@ -241,7 +255,76 @@ def print_stack_trace():
     traceback.print_stack()
 
 
-class ProgressCounter(object):
+class MultiLevelDictionaryAccess:
+    """ translate a single- or multi-level dictionary access key into a target dict and key """
+
+    def __init__(self, base_dictionary):
+        self._data = base_dictionary
+
+    def get_value(self, key_or_keys):
+        source_dict, source_key = self._get_recursive_access(key_or_keys, create_if_missing=False)
+        return source_dict[source_key]
+
+    def set_value(self, key_or_keys, value):
+        target_dict, target_key = self._get_recursive_access(key_or_keys, create_if_missing=True)
+        target_dict[target_key] = value
+
+    def apply_recursive_item_modification(self, test_should_apply, func_get_modified,
+                                          current_keys=None):
+        """ modify every item in a multi-level dictionary
+
+        @param test_should_apply: callable expecting a single parameter (a value) and returning
+            True, if the value is supposed to be modified
+        @param func_get_modified: callable expecting a single parameter (a value) and returning the
+            modified value
+        """
+        if current_keys is None:
+            current_keys = ()
+            target_dict = self._data
+        else:
+            target_dict = self.get_value(current_keys)
+        for key, value in target_dict.items():
+            this_item_keys = current_keys + (key, )
+            if test_should_apply(value):
+                self.set_value(this_item_keys, func_get_modified(value))
+            if isinstance(value, dict):
+                self.apply_recursive_item_modification(test_should_apply, func_get_modified,
+                                                       current_keys=this_item_keys)
+
+    def _get_recursive_access(self, key_or_keys, create_if_missing=False):
+        """
+        @param base_dictionary: the dictionary containing the data to be accessed
+        @param key: string (single level access) or tuple of strings (multi level access)
+        @param create_if_missing: create nested dictionaries if necessary
+        @returns: tuple of (dict, str) for accessing the dictionary containing the target item
+
+        @raises:
+            - KeyError: if one part of the access chain is missing and "create_if_missing" is False
+            - TypeError: if one part of the access chain is not a dictionary
+        """
+        if isinstance(key_or_keys, tuple):
+            # multi-level dictionary access
+            keys = key_or_keys
+        else:
+            # single-level dictionary access
+            keys = [key_or_keys]
+        # recursively access the single- or multi-level target dictionary
+        target_dict = self._data
+        for key in keys[:-1]:
+            if key not in target_dict:
+                if create_if_missing:
+                    target_dict[key] = {}
+                else:
+                    raise KeyError("Key in sub-dictionary is missing: {}".format(key))
+            # enter the next level
+            target_dict = target_dict[key]
+            if not isinstance(target_dict, dict):
+                raise TypeError("Invalid multi-level parameter set access key: {}"
+                                .format(key_or_keys))
+        return target_dict, keys[-1]
+
+
+class ProgressCounter:
 
     def __init__(self, max_value, update_callback):
         if max_value <= 0:
diff --git a/pycam/Utils/events.py b/pycam/Utils/events.py
index bde4834..7e43e69 100644
--- a/pycam/Utils/events.py
+++ b/pycam/Utils/events.py
@@ -1,4 +1,5 @@
 import collections
+import contextlib
 
 import pycam.Gui.Settings
 import pycam.Utils.log
@@ -14,10 +15,56 @@ UIEvent = collections.namedtuple("UIEvent", ("handlers", "blocker_tokens"))
 UIChain = collections.namedtuple("UIChain", ("func", "weight"))
 
 
+__event_handlers = []
+__mainloop = []
+
+
+def get_mainloop(use_gtk=False):
+    """create new or return an existing mainloop
+
+    @param use_gtk: supply Gtk with timeslots for event handling (active if this parameter is True
+        at least once)
+    """
+    try:
+        mainloop = __mainloop[0]
+    except IndexError:
+        mainloop = GtkMainLoop()
+        __mainloop.append(mainloop)
+    return mainloop
+
+
+class GtkMainLoop:
+
+    def __init__(self):
+        import gi
+        gi.require_version("Gtk", "3.0")
+        from gi.repository import Gtk
+        self._gtk = Gtk
+
+    def run(self):
+        try:
+            self._gtk.main()
+        except KeyboardInterrupt:
+            pass
+
+    def stop(self):
+        self._gtk.main_quit()
+
+    def update(self):
+        while self._gtk.events_pending():
+            self._gtk.main_iteration()
+
+
+def get_event_handler():
+    if not __event_handlers:
+        __event_handlers.append(EventCore())
+    return __event_handlers[0]
+
+
 class EventCore(pycam.Gui.Settings.Settings):
 
     def __init__(self):
-        super(EventCore, self).__init__()
+        super().__init__()
         self.event_handlers = {}
         self.ui_sections = {}
         self.chains = {}
@@ -43,32 +90,55 @@ class EventCore(pycam.Gui.Settings.Settings):
             log.info("Trying to unregister an unknown event: %s", event)
 
     def emit_event(self, event, *args, **kwargs):
-        log.debug2("Event emitted: %s", str(event))
+        log.debug2("Event emitted: %s", event)
         if event in self.event_handlers:
             if self.event_handlers[event].blocker_tokens:
+                log.debug2("Ignoring blocked event: %s", event)
                 return
             # prevent infinite recursion
-            self.block_event(event)
-            for handler in self.event_handlers[event].handlers:
-                handler.func(*(handler.args + args), **kwargs)
-            self.unblock_event(event)
+            with self.blocked_events({event}):
+                for handler in self.event_handlers[event].handlers:
+                    handler.func(*(handler.args + args), **kwargs)
         else:
-            log.debug("No events registered for event '%s'", str(event))
+            log.debug("No events registered for event '%s'", event)
 
     def block_event(self, event):
         if event in self.event_handlers:
+            log.debug2("Blocking an event: %s", event)
             self.event_handlers[event].blocker_tokens.append(True)
         else:
-            log.info("Trying to block an unknown event: %s", str(event))
+            log.info("Trying to block an unknown event: %s", event)
 
     def unblock_event(self, event):
         if event in self.event_handlers:
-            if self.event_handlers[event].blocker_tokens > 0:
+            if self.event_handlers[event].blocker_tokens:
+                log.debug2("Unblocking an event: %s", event)
                 self.event_handlers[event].blocker_tokens.pop()
             else:
-                log.debug("Trying to unblock non-blocked event '%s'", str(event))
+                log.debug("Trying to unblock non-blocked event '%s'", event)
         else:
-            log.info("Trying to unblock an unknown event: %s", str(event))
+            log.info("Trying to unblock an unknown event: %s", event)
+
+    @contextlib.contextmanager
+    def blocked_events(self, events, emit_after=False):
+        """ temporarily block a number of events for the duration of this context
+
+        @param events: iterable of events to be blocked temporarily
+        @param emit_after: emit all given events at the end of the context
+        """
+        unblock_list = []
+        for event in events:
+            self.block_event(event)
+            unblock_list.append(event)
+        unblock_list.reverse()
+        try:
+            yield
+        finally:
+            for event in unblock_list:
+                self.unblock_event(event)
+        if emit_after:
+            for event in unblock_list:
+                self.emit_event(event)
 
     def register_ui_section(self, section, add_action, clear_action):
         if section not in self.ui_sections:
@@ -86,7 +156,12 @@ class EventCore(pycam.Gui.Settings.Settings):
                 ui_section.widgets.pop()
             del self.ui_sections[section]
         else:
-            log.info("Trying to unregister a non-existent ui section: %s", str(section))
+            log.info("Trying to unregister a non-existent ui section: %s", section)
+
+    def clear_ui_section(self, section):
+        ui_section = self.ui_sections[section]
+        while ui_section.widgets:
+            ui_section.widgets.pop()
 
     def _rebuild_ui_section(self, section):
         if section in self.ui_sections:
@@ -97,7 +172,7 @@ class EventCore(pycam.Gui.Settings.Settings):
                 for item in ui_section.widgets:
                     ui_section.add_func(item.obj, item.name, **(item.args or {}))
         else:
-            log.info("Failed to rebuild unknown ui section: %s", str(section))
+            log.info("Failed to rebuild unknown ui section: %s", section)
 
     def register_ui(self, section, name, widget, weight=0, args_dict=None):
         if section not in self.ui_sections:
@@ -156,12 +231,12 @@ class EventCore(pycam.Gui.Settings.Settings):
 
     def register_namespace(self, name, value):
         if name in self.namespace:
-            log.info("Trying to register the same key in namespace twice: %s", str(name))
+            log.info("Trying to register the same key in namespace twice: %s", name)
         self.namespace[name] = value
 
     def unregister_namespace(self, name):
         if name not in self.namespace:
-            log.info("Tried to unregister an unknown name from namespace: %s", str(name))
+            log.info("Tried to unregister an unknown name from namespace: %s", name)
 
     def get_namespace(self):
         return self.namespace
diff --git a/pycam/Utils/iterators.py b/pycam/Utils/iterators.py
index af6fee4..c592e3b 100644
--- a/pycam/Utils/iterators.py
+++ b/pycam/Utils/iterators.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008 Lode Leroy
 
@@ -19,12 +18,12 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
 
-class Iterator(object):
+class Iterator:
     def __init__(self, seq, start=0):
         self.seq = seq
         self.ind = start
 
-    def next(self):
+    def __next__(self):
         if self.ind >= len(self.seq):
             return None
         else:
@@ -32,7 +31,7 @@ class Iterator(object):
             self.ind += 1
             return item
 
-    def insertBefore(self, item):
+    def insert_before(self, item):
         self.seq.insert(self.ind - 1, item)
         self.ind += 1
 
@@ -53,7 +52,7 @@ class Iterator(object):
                     self.ind -= 1
                 return
 
-    def takeNext(self):
+    def take_next(self):
         if self.ind >= len(self.seq):
             return None
         else:
@@ -72,13 +71,13 @@ class Iterator(object):
         return len(self.seq) - self.ind
 
 
-class CyclicIterator(object):
+class CyclicIterator:
     def __init__(self, seq, start=0):
         self.seq = seq
         self.ind = start
         self.count = len(seq)
 
-    def next(self):
+    def __next__(self):
         item = self.seq[self.ind]
         self.ind += 1
         if self.ind == len(self.seq):
@@ -96,20 +95,20 @@ class CyclicIterator(object):
 
 
 if __name__ == "__main__":
-    l = [1, 2, 4, 6]
-    print("l=", l)
-    i = Iterator(l)
+    values = [1, 2, 4, 6]
+    print("l=", values)
+    i = Iterator(values)
     print(i.peek())
     while True:
         val = next(i)
         if val is None:
             break
         if val == 4:
-            i.insertBefore(3)
+            i.insert_before(3)
             i.insert(5)
 
-    print("l=", l)
-    i = Iterator(l)
+    print("l=", values)
+    i = Iterator(values)
     print("peek(0)=", i.peek(0))
     print("peek(1)=", i.peek(1))
     print("i.next()=", next(i))
@@ -118,9 +117,9 @@ if __name__ == "__main__":
 
     print("remains=", i.remains())
 
-    print("l=", l)
+    print("l=", values)
     sum_value = 0
-    i = CyclicIterator(l)
+    i = CyclicIterator(values)
     print("cycle :"),
     while sum_value < 30:
         val = next(i)
@@ -128,8 +127,8 @@ if __name__ == "__main__":
         sum_value += val
     print("=", sum_value)
 
-    i = Iterator(l)
-    print("l=", l)
+    i = Iterator(values)
+    print("l=", values)
     next(i)
     next(i)
     print("next,next : ", i.peek())
@@ -137,4 +136,4 @@ if __name__ == "__main__":
     print("remove(2) : ", i.peek())
     i.remove(4)
     print("remove(4) : ", i.peek())
-    print("l=", l)
+    print("l=", values)
diff --git a/pycam/Utils/locations.py b/pycam/Utils/locations.py
index 4da8f81..d74a0f1 100644
--- a/pycam/Utils/locations.py
+++ b/pycam/Utils/locations.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,9 +17,12 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
+import contextlib
 import os
 import sys
+import tempfile
 
+import pycam.Utils
 import pycam.Utils.log
 
 
@@ -59,8 +61,12 @@ def get_ui_file_location(filename, silent=False):
     return get_data_file_location(os.path.join(UI_SUBDIR, filename), silent=silent)
 
 
-def get_data_file_location(filename, silent=False):
-    for base_dir in DATA_BASE_DIRS:
+def get_data_file_location(filename, silent=False, priority_directories=None):
+    if priority_directories is None:
+        scan_dirs = DATA_BASE_DIRS
+    else:
+        scan_dirs = tuple(priority_directories) + tuple(DATA_BASE_DIRS)
+    for base_dir in scan_dirs:
         test_path = os.path.join(base_dir, filename)
         if os.path.exists(test_path):
             return test_path
@@ -103,7 +109,7 @@ def get_external_program_location(key):
         if location:
             return location
     except Exception:
-        # Wildcard (non-system exiting) exeception to match "ImportError" and
+        # Wildcard (non-system exiting) exception to match "ImportError" and
         # "pywintypes.error" (for "not found").
         pass
     # go through the PATH environment variable
@@ -143,3 +149,39 @@ def get_all_program_locations(core):
         if key.startswith(prefix) and core[key]:
             program_locations[key[len(prefix):]] = core[key]
     return program_locations
+
+
+@contextlib.contextmanager
+def open_file_context(filename, mode, is_text):
+    if isinstance(filename, pycam.Utils.URIHandler):
+        filename = filename.get_path()
+    if filename is None:
+        raise OSError("missing filename")
+    if mode == "r":
+        opened_file = open(filename, "r")
+    elif mode == "w":
+        handle, temp_filename = tempfile.mkstemp(prefix=os.path.basename(filename) + ".",
+                                                 dir=os.path.dirname(filename), text=is_text)
+        opened_file = os.fdopen(handle, mode=mode)
+    else:
+        raise ValueError("Invalid 'mode' given: {}".format(mode))
+    try:
+        yield opened_file
+    finally:
+        opened_file.close()
+    if mode == "w":
+        os.rename(temp_filename, filename)
+
+
+@contextlib.contextmanager
+def create_named_temporary_file(suffix=None):
+    file_handle, filename = tempfile.mkstemp(suffix=".dxf")
+    os.close(file_handle)
+    try:
+        yield filename
+    finally:
+        if os.path.isfile(filename):
+            try:
+                os.remove(filename)
+            except OSError as exc:
+                log.warn("Failed to remove temporary file (%s): %s", filename, exc)
diff --git a/pycam/Utils/log.py b/pycam/Utils/log.py
index d76d71b..5fd1af4 100644
--- a/pycam/Utils/log.py
+++ b/pycam/Utils/log.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -18,9 +17,7 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
-import locale
 import logging
-import re
 import time
 
 
@@ -163,34 +160,22 @@ class GTKHandler(logging.Handler):
         self.parent_window = parent_window
 
     def emit(self, record):
-        raw_message = self.format(record)
-        try:
-            message = raw_message.encode("utf-8")
-        except UnicodeDecodeError:
-            try:
-                # try to decode the string with the current locale
-                current_encoding = locale.getpreferredencoding()
-                message = raw_message.decode(current_encoding)
-            except (UnicodeDecodeError, LookupError):
-                # remove all critical characters
-                message = re.sub(r"[^\w\s]", "", raw_message)
-        # Replace all "<>" characters (invalid for markup styles) with html
-        # entities.
-        message = re.sub("<", "&lt;", message)
-        message = re.sub(">", "&gt;", message)
-        import gtk
+        message = self.format(record)
+        # Replace all "<>" characters (invalid for markup styles) with html entities.
+        message = message.replace("<", "&lt;").replace(">", "&gt;")
+        from gi.repository import Gtk
         if record.levelno <= 20:
-            message_type = gtk.MESSAGE_INFO
+            message_type = Gtk.MessageType.INFO
             message_title = "Information"
         elif record.levelno <= 30:
-            message_type = gtk.MESSAGE_WARNING
+            message_type = Gtk.MessageType.WARNING
             message_title = "Warning"
         else:
-            message_type = gtk.MESSAGE_ERROR
+            message_type = Gtk.MessageType.ERROR
             message_title = "Error"
-        window = gtk.MessageDialog(self.parent_window, type=message_type, buttons=gtk.BUTTONS_OK)
+        window = Gtk.MessageDialog(self.parent_window, type=message_type,
+                                   buttons=Gtk.ButtonsType.OK)
         window.set_markup(str(message))
-        message_title = message_title.encode("utf-8", "ignore")
         window.set_title(message_title)
         # make sure that the window gets destroyed later
         for signal in ("close", "response"):
diff --git a/pycam/Utils/polynomials.py b/pycam/Utils/polynomials.py
index c15b078..5283a31 100644
--- a/pycam/Utils/polynomials.py
+++ b/pycam/Utils/polynomials.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008 Lode Leroy
 
@@ -81,11 +80,11 @@ def poly3_roots(a, b, c, d):
     delta = b * b * INV_4 + delta * a * INV_27
     if delta > 0:
         r_delta = sqrt(delta)
-        A = -INV_2 * b + r_delta
-        B = -INV_2 * b - r_delta
-        A = cuberoot(A)
-        B = cuberoot(B)
-        return (A + B - c1_3, )
+        v_major_p3 = -INV_2 * b + r_delta
+        v_minor_p3 = -INV_2 * b - r_delta
+        v_major = cuberoot(v_major_p3)
+        v_minor = cuberoot(v_minor_p3)
+        return (v_major + v_minor - c1_3, )
     elif delta == 0:
         b_2 = -b * INV_2
         s = cuberoot(b_2)
@@ -129,12 +128,12 @@ def poly4_roots(a, b, c, d, e):
     if not roots3:
         return None
     if len(roots3) == 1:
-        U = roots3[0]
+        u = roots3[0]
     else:
-        U = max(roots3[0], roots3[1], roots3[2])
-    p = c1 * c1 * INV_4 + U - c2
-    U *= INV_2
-    q = U * U - c4
+        u = max(roots3[0], roots3[1], roots3[2])
+    p = c1 * c1 * INV_4 + u - c2
+    u *= INV_2
+    q = u * u - c4
     if p < 0:
         if p < -SMALL:
             return None
@@ -151,8 +150,8 @@ def poly4_roots(a, b, c, d, e):
     quad1 = [1.0, c1 * INV_2 - p, 0]
     quad2 = [1.0, c1 * INV_2 + p, 0]
 
-    q1 = U - q
-    q2 = U + q
+    q1 = u - q
+    q2 = u + q
     p = quad1[1] * q2 + quad2[1] * q1 - c3
     if near_zero(p):
         quad1[2] = q1
diff --git a/pycam/Utils/progress.py b/pycam/Utils/progress.py
new file mode 100644
index 0000000..d3a7084
--- /dev/null
+++ b/pycam/Utils/progress.py
@@ -0,0 +1,36 @@
+from pycam.Utils.events import get_event_handler, get_mainloop
+
+
+class ProgressContext:
+
+    def __init__(self, title):
+        self._title = title
+        self._progress = get_event_handler().get("progress")
+
+    def __enter__(self):
+        if self._progress:
+            self._progress.update(text=self._title, percent=0)
+            # start an indefinite pulse (until we receive more details)
+            self._progress.update()
+        else:
+            self._progress = None
+        return self
+
+    def __exit__(self, exc_type, exc_value, traceback):
+        if self._progress:
+            self._progress.finish()
+
+    def update(self, *args, **kwargs):
+        get_mainloop().update()
+        if self._progress:
+            return self._progress.update(*args, **kwargs)
+        else:
+            return False
+
+    def set_multiple(self, count, base_text=None):
+        if self._progress:
+            self._progress.set_multiple(count, base_text=base_text)
+
+    def update_multiple(self):
+        if self._progress:
+            self._progress.update_multiple()
diff --git a/pycam/Utils/rootsolver.py b/pycam/Utils/rootsolver.py
index 0d626ed..fbdb999 100644
--- a/pycam/Utils/rootsolver.py
+++ b/pycam/Utils/rootsolver.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008 Lode Leroy
 
diff --git a/pycam/Utils/threading.py b/pycam/Utils/threading.py
index 1942d91..a6e2954 100644
--- a/pycam/Utils/threading.py
+++ b/pycam/Utils/threading.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
@@ -22,11 +21,7 @@ along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 # import multiprocessing
 import os
 import platform
-try:
-    import queue
-except ImportError:
-    # fallback for python2
-    import Queue as queue
+import queue
 import random
 import signal
 import socket
@@ -34,7 +29,7 @@ import sys
 import time
 import uuid
 
-from pycam import CommunicationError
+from pycam.errors import CommunicationError
 import pycam.Utils
 import pycam.Utils.log
 log = pycam.Utils.log.get_logger()
@@ -95,7 +90,7 @@ def is_pool_available():
 
 
 def is_multiprocessing_available():
-    if (pycam.Utils.get_platform() == pycam.Utils.PLATFORM_WINDOWS) and \
+    if (pycam.Utils.get_platform() == pycam.Utils.OSPlatform.WINDOWS) and \
             hasattr(sys, "frozen") and sys.frozen:
         return False
     try:
@@ -164,7 +159,7 @@ def get_task_statistics():
     return result
 
 
-class ManagerInfo(object):
+class ManagerInfo:
     """ this separate class allows proper pickling for "multiprocesssing"
     """
 
@@ -221,7 +216,7 @@ def init_threading(number_of_processes=None, enable_server=False, remote=None, r
         server_credentials = ""
     if not is_multiprocessing_available():
         __multiprocessing = False
-        # Maybe a multiprocessing feature was explicitely requested?
+        # Maybe a multiprocessing feature was explicitly requested?
         # Issue some warnings if necessary.
         multiprocessing_missing_text = (
             "Failed to enable server mode due to a lack of 'multiprocessing' capabilities. Please "
@@ -268,7 +263,7 @@ def init_threading(number_of_processes=None, enable_server=False, remote=None, r
         __task_source_uuid = str(uuid.uuid1())
         if remote is None:
             # try to guess an appropriate interface for binding
-            if pycam.Utils.get_platform() == pycam.Utils.PLATFORM_WINDOWS:
+            if pycam.Utils.get_platform() == pycam.Utils.OSPlatform.WINDOWS:
                 # Windows does not support a wildcard interface listener
                 all_ips = pycam.Utils.get_all_ips()
                 if all_ips:
@@ -664,7 +659,7 @@ def run_in_parallel_local(func, args, unordered=False, disable_multiprocessing=F
             yield func(arg)
 
 
-class OneProcess(object):
+class OneProcess:
     def __init__(self, name, is_queue=False):
         self.is_queue = is_queue
         self.name = name
@@ -691,7 +686,7 @@ class OneProcess(object):
                 return "Process %s: not ready" % str(self.name)
 
 
-class ProcessStatistics(object):
+class ProcessStatistics:
 
     def __init__(self, timeout=120):
         self.processes = {}
@@ -743,7 +738,7 @@ class ProcessStatistics(object):
         now = time.time()
         result = []
         # Cache the key list instead of iterating it - otherwise a
-        # "RuntimeError: dictionary changed size during iteration" may occour.
+        # "RuntimeError: dictionary changed size during iteration" may occur.
         for key, worker_start_time in list(self.workers.items()):
             try:
                 one_process = self.processes[key]
@@ -761,7 +756,7 @@ class ProcessStatistics(object):
         return result
 
 
-class PendingTasks(object):
+class PendingTasks:
 
     def __init__(self, stale_timeout=300):
         # we assume that multiprocessing was imported before
@@ -801,7 +796,7 @@ class PendingTasks(object):
         stale_start_time = time.time() - self._stale_timeout
         stale_tasks = []
         # use a copy to prevent "dictionary changed size in iteration" errors
-        current_jobs = list(self._jobs.iteritems())
+        current_jobs = list(self._jobs.items())
         for (job_id, task_id), (start_time, info) in current_jobs:
             if start_time < stale_start_time:
                 stale_tasks.append((job_id, task_id, info))
@@ -818,7 +813,7 @@ class PendingTasks(object):
         return len(self._jobs)
 
 
-class ProcessDataCache(object):
+class ProcessDataCache:
 
     def __init__(self, timeout=600):
         self.cache = {}
@@ -870,7 +865,7 @@ class ProcessDataCache(object):
         return len(self.cache)
 
 
-class ProcessDataCacheItemID(object):
+class ProcessDataCacheItemID:
 
     def __init__(self, value):
         self.value = value
diff --git a/pycam/Utils/xml_handling.py b/pycam/Utils/xml_handling.py
deleted file mode 100644
index 1eeab6b..0000000
--- a/pycam/Utils/xml_handling.py
+++ /dev/null
@@ -1,72 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
-"""
-Copyright 2010 Lars Kruse <devel@sumpfralle.de>
-
-This file is part of PyCAM.
-
-PyCAM is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-PyCAM is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
-"""
-
-import xml.etree.ElementTree as ET
-
-
-def get_xml(item, name=None):
-    if name is None:
-        if hasattr(item, "node_key"):
-            name = item.node_key
-        else:
-            name = "value"
-    if isinstance(item, (list, tuple, set)):
-        leaf = ET.Element(name)
-        for single in item:
-            leaf.append(get_xml(single))
-        return leaf
-    elif isinstance(item, dict):
-        leaf = ET.Element(name)
-        for key, value in item.iteritems():
-            leaf.append(get_xml(value, name=key))
-        return leaf
-    else:
-        leaf = ET.Element(name)
-        leaf.text = str(item)
-        return leaf
-
-
-def parse_xml_dict(item):
-    pass
-
-
-def get_xml_lines(item):
-    lines = []
-    content = ET.tostring(item)
-    content = content.replace("><", ">\n<")
-    indent = 0
-    for line in content.split("\n"):
-        indented = False
-        if line.startswith("</"):
-            indent -= 2
-            indented = True
-        lines.append(" " * indent + line)
-        if indented:
-            pass
-        elif line.endswith("/>"):
-            pass
-        elif line.startswith("</"):
-            indent -= 2
-        elif "</" in line:
-            pass
-        else:
-            indent += 2
-    return lines
diff --git a/pycam/__init__.py b/pycam/__init__.py
index 6de6ff9..ba31852 100644
--- a/pycam/__init__.py
+++ b/pycam/__init__.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2008 Lode Leroy
 
@@ -18,19 +17,79 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
-VERSION = "0.6.3"
 
-FILTER_CONFIG = (("Config files", "*.conf"),)
-DOC_BASE_URL = "http://pycam.sourceforge.net/%s/"
+import os
+import subprocess
+import re
+
+
+try:
+    from Version import VERSION
+
+except ImportError:
+    # Failed to import Version.py, we must be running out of a git
+    # checkout, so generate the version info from git tags.
+
+    #
+    # These variables should only be changed by the release manager when
+    # creating a new stable release branch.
+    #
+    # In master:
+    #     * 'parent_branch' stays set to 'master'
+    #     * 'tag_glob' is changed to the glob for the next set of releases.
+    #
+    # In the new stable branch:
+    #     * 'parent_branch' is set to the name of the new stable branch.
+    #     * 'tag_glob' stays set to the glob for release tags on this branch.
+    #
+    parent_branch = "master"
+    tag_glob = "v0.7.*"
 
+    repo_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
 
-class GenericError(Exception):
-    pass
+    try:
+        current_branch = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"],
+                                                 cwd=repo_dir, stderr=subprocess.PIPE)
+        current_branch = current_branch.strip().decode("utf-8")
 
+        git_describe = subprocess.check_output(["git", "describe", "--always", "--dirty", "--tags",
+                                                "--match", tag_glob],
+                                               cwd=repo_dir, stderr=subprocess.PIPE)
+        # remove the "v" prefix
+        git_describe = git_describe.strip().decode("utf-8").lstrip("v")
 
-class InvalidValueError(GenericError):
-    pass
+        # Special case: a tag containing "-pre" followed by a number
+        # indicates a pre-release, so we want the version number to
+        # be *less* than the tag without the "-preX".  For example,
+        # "v0.7.0-pre2" is an earlier version than "v0.7.0".
+        #
+        # In Debian version numbers this is indicated by the
+        # tilde character "~", but git tags cannot contain tildes
+        # (https://git-scm.com/docs/git-check-ref-format, or see the
+        # "git-check-ref-format" manpage).  So we replace the first
+        # "-pre" in tag names with "~pre".
+        git_describe = re.sub('-pre([0-9])', r'~pre\1', git_describe, 1)
 
+        if current_branch == parent_branch:
+            # We're on master or on a stable/release branch, so the
+            # version number is just the 'git describe' output.
+            VERSION = git_describe
 
-class CommunicationError(GenericError):
-    pass
+        else:
+            # We're on a temporary branch, so make a version number that
+            # sorts as *older than* nearby release versions.
+            parts = git_describe.split('-')
+            parts[0] = parts[0] + '~' + current_branch
+            VERSION = '-'.join(parts)
+
+        # No matter how we made the version string, replace every "-"
+        # with ".", because that's what Debian version numbers expect.
+        # https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version
+        VERSION = VERSION.replace('-', '.')
+
+    except (subprocess.CalledProcessError, OSError) as exc:
+        # No pycam/Version.py and git failed to give us a version number, give up.
+        VERSION = "0.0-unknown"
+
+
+DOC_BASE_URL = "http://pycam.sourceforge.net/%s/"
diff --git a/pycam/errors.py b/pycam/errors.py
new file mode 100644
index 0000000..4b4f97a
--- /dev/null
+++ b/pycam/errors.py
@@ -0,0 +1,43 @@
+class PycamBaseException(Exception):
+    pass
+
+
+class AbortOperationException(PycamBaseException):
+    pass
+
+
+class CommunicationError(PycamBaseException):
+    pass
+
+
+class InitializationError(PycamBaseException):
+    pass
+
+
+class InvalidDataError(PycamBaseException):
+    pass
+
+
+class MissingAttributeError(InvalidDataError):
+    pass
+
+
+class AmbiguousDataError(InvalidDataError):
+    pass
+
+
+class UnexpectedAttributeError(InvalidDataError):
+    pass
+
+
+class InvalidKeyError(InvalidDataError):
+
+    def __init__(self, invalid_key, choice_enum):
+        # retrieve the pretty name of the enum
+        enum_name = str(choice_enum).split("'")[1]
+        super().__init__("Unknown {}: {} (should be one of: {})".format(
+            enum_name, invalid_key, ", ".join([item.value for item in choice_enum])))
+
+
+class LoadFileError(PycamBaseException):
+    pass
diff --git a/pycam/run_cli.py b/pycam/run_cli.py
new file mode 100755
index 0000000..5149ea2
--- /dev/null
+++ b/pycam/run_cli.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python3
+"""
+
+Copyright 2017 Lars Kruse <devel@sumpfralle.de>
+
+This file is part of PyCAM.
+
+PyCAM is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
+"""
+
+import argparse
+import logging
+import os
+import sys
+
+try:
+    from pycam import VERSION
+except ImportError:
+    # running locally (without a proper PYTHONPATH) requires manual intervention
+    sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(__file__)),
+                                                     os.pardir)))
+    from pycam import VERSION
+
+import pycam.errors
+from pycam.Flow.parser import parse_yaml
+import pycam.Utils
+import pycam.Utils.log
+import pycam.workspace.data_models
+
+
+_log = pycam.Utils.log.get_logger()
+
+LOG_LEVELS = {"debug": logging.DEBUG,
+              "info": logging.INFO,
+              "warning": logging.WARNING,
+              "error": logging.ERROR, }
+
+
+def get_args():
+    parser = argparse.ArgumentParser(prog="PyCAM", description="scriptable PyCAM processing flow",
+                                     epilog="PyCAM website: https://github.com/SebKuzminsky/pycam")
+    parser.add_argument("--log-level", choices=LOG_LEVELS.keys(), default="warning",
+                        help="choose the verbosity of log messages")
+    parser.add_argument("sources", metavar="FLOW_SPEC", type=argparse.FileType('r'), nargs="+",
+                        help="processing flow description files in yaml format")
+    parser.add_argument("--version", action="version", version="%(prog)s {}".format(VERSION))
+    return parser.parse_args()
+
+
+def main_func():
+    args = get_args()
+    _log.setLevel(LOG_LEVELS[args.log_level])
+    for fname in args.sources:
+        try:
+            parse_yaml(fname)
+        except pycam.errors.PycamBaseException as exc:
+            print("Flow description parse failure ({}): {}".format(fname, exc), file=sys.stderr)
+            sys.exit(1)
+    pycam.Utils.set_application_key("pycam-cli")
+    for export in pycam.workspace.data_models.Export.get_collection():
+        export.run_export()
+
+
+if __name__ == "__main__":
+    main_func()
diff --git a/pycam/run_gui.py b/pycam/run_gui.py
new file mode 100755
index 0000000..445e940
--- /dev/null
+++ b/pycam/run_gui.py
@@ -0,0 +1,293 @@
+#!/usr/bin/env python3
+"""
+
+Copyright 2010 Lars Kruse <devel@sumpfralle.de>
+Copyright 2008-2009 Lode Leroy
+
+This file is part of PyCAM.
+
+PyCAM is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
+"""
+
+import argparse
+import logging
+import os
+import socket
+import sys
+import warnings
+
+# we need the multiprocessing exception for remote connections
+try:
+    import multiprocessing
+    from multiprocessing import AuthenticationError
+except ImportError:
+    multiprocessing = None
+    # use an arbitrary other Exception
+    AuthenticationError = socket.error
+
+try:
+    from pycam import VERSION
+except ImportError:
+    # running locally (without a proper PYTHONPATH) requires manual intervention
+    sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(__file__)),
+                                                     os.pardir)))
+    from pycam import VERSION
+
+from pycam.errors import InitializationError
+from pycam.Flow.history import DataHistory, merge_history_and_block_events
+from pycam.Gui import QuestionStatus
+import pycam.Gui.common as GuiCommon
+from pycam.Gui.common import EmergencyDialog
+import pycam.Gui.Settings
+import pycam.Gui.Console
+import pycam.Importers.TestModel
+import pycam.Importers
+import pycam.Plugins
+import pycam.Utils
+from pycam.Utils.events import get_event_handler, get_mainloop
+import pycam.Utils.log
+import pycam.Utils.threading
+
+# register the glut32.dll manually for the pyinstaller standalone executable
+if hasattr(sys, "frozen") and sys.frozen and "_MEIPASS2" in os.environ:
+    from ctypes import windll
+    windll[os.path.join(os.path.normpath(os.environ["_MEIPASS2"]), "glut32.dll")]
+
+# The installer for PyODE does not add the required PATH variable.
+if pycam.Utils.get_platform() == pycam.Utils.OSPlatform.WINDOWS:
+    os.environ["PATH"] = os.environ.get("PATH", "") + os.path.pathsep + sys.exec_prefix
+# The GtkGLExt installer does not add the required PATH variable.
+if pycam.Utils.get_platform() == pycam.Utils.OSPlatform.WINDOWS:
+    import _winreg
+    path = None
+    try:
+        reg = _winreg.ConnectRegistry(None, _winreg.HKEY_LOCAL_MACHINE)
+        regkey = _winreg.OpenKey(reg, r"SOFTWARE\GtkGLExt\1.0\Runtime")
+    except WindowsError:
+        regkey = None
+    index = 0
+    while regkey:
+        try:
+            key, value = _winreg.EnumValue(regkey, index)[:2]
+        except WindowsError:
+            # no more items left
+            break
+        if key == "Path":
+            path = os.path.join(str(value), "bin")
+            break
+        index += 1
+    if path:
+        os.environ["PATH"] = os.environ.get("PATH", "") + os.path.pathsep + path
+
+
+EXIT_CODES = {"ok": 0,
+              "requirements": 1,
+              "load_model_failed": 2,
+              "write_output_failed": 3,
+              "parsing_failed": 4,
+              "server_without_password": 5,
+              "connection_error": 6,
+              "toolpath_error": 7}
+
+log = pycam.Utils.log.get_logger()
+
+
+def show_gui():
+    pycam.Utils.set_application_key("pycam-gtk")
+    deps_gtk = GuiCommon.requirements_details_gtk()
+    report_gtk = GuiCommon.get_dependency_report(deps_gtk, prefix="\t")
+    if GuiCommon.check_dependencies(deps_gtk):
+        from pycam.Gui.Project import ProjectGui
+        gui_class = ProjectGui
+    else:
+        full_report = []
+        full_report.append("PyCAM dependency problem")
+        full_report.append("Error: Failed to load the GTK interface.")
+        full_report.append("Details:")
+        full_report.append(report_gtk)
+        full_report.append("")
+        full_report.append("Detailed list of requirements: %s" % GuiCommon.REQUIREMENTS_LINK)
+        log.critical(os.linesep.join(full_report))
+        return EXIT_CODES["requirements"]
+
+    event_manager = get_event_handler()
+    event_manager.set("history", DataHistory())
+
+    with merge_history_and_block_events(event_manager):
+        gui = gui_class(event_manager)
+        # initialize plugins
+        plugin_manager = pycam.Plugins.PluginManager(core=event_manager)
+        plugin_manager.import_plugins()
+        # some more initialization
+        gui.reset_preferences()
+        gui.load_preferences()
+        gui.load_startup_workspace()
+
+    # open the GUI
+    get_mainloop(use_gtk=True).run()
+
+    # optionally save workspace (based on configuration or dialog response)
+    if event_manager.get("save_workspace_on_exit") == QuestionStatus.ASK.value:
+        response = gui.get_question_response("Save Workspace?", True, allow_memorize=True)
+        if response.should_memorize:
+            event_manager.set("save_workspace_on_exit",
+                              (QuestionStatus.YES if response.is_yes else QuestionStatus.NO).value)
+        should_store = response.is_yes
+    elif event_manager.get("save_workspace_on_exit") == QuestionStatus.YES.value:
+        should_store = True
+    else:
+        should_store = False
+    if should_store:
+        gui.save_startup_workspace()
+
+    gui.save_preferences()
+
+    # no error -> return no error code
+    return None
+
+
+def execute(parser, args, pycam):
+    # try to change the process name
+    pycam.Utils.setproctitle("pycam")
+
+    if args.trace:
+        log.setLevel(logging.DEBUG // 2)
+    elif args.debug:
+        log.setLevel(logging.DEBUG)
+    elif args.quiet:
+        log.setLevel(logging.WARNING)
+        # disable the progress bar
+        args.progress = "none"
+        # silence all warnings
+        warnings.filterwarnings("ignore")
+    else:
+        log.setLevel(logging.INFO)
+
+    # check if server-auth-key is given -> this is mandatory for server mode
+    if (args.enable_server or args.start_server) and not args.server_authkey:
+        parser.error(
+            "You need to supply a shared secret for server mode. This is supposed to prevent you "
+            "from exposing your host to remote access without authentication.\nPlease add the "
+            "'--server-auth-key' argument followed by a shared secret password.")
+        return EXIT_CODES["server_without_password"]
+
+    # initialize multiprocessing
+    try:
+        if args.server_authkey is None:
+            server_auth_key = None
+        else:
+            server_auth_key = args.server_authkey.encode("utf-8")
+        if args.start_server:
+            pycam.Utils.threading.init_threading(
+                args.parallel_processes, remote=args.remote_server, run_server=True,
+                server_credentials=server_auth_key)
+            pycam.Utils.threading.cleanup()
+            return EXIT_CODES["ok"]
+        else:
+            pycam.Utils.threading.init_threading(
+                args.parallel_processes, enable_server=args.enable_server,
+                remote=args.remote_server, server_credentials=server_auth_key)
+    except socket.error as err_msg:
+        log.error("Failed to connect to remote server: %s", err_msg)
+        return EXIT_CODES["connection_error"]
+    except AuthenticationError as err_msg:
+        log.error("The remote server rejected your authentication key: %s", err_msg)
+        return EXIT_CODES["connection_error"]
+
+    try:
+        show_gui()
+    except InitializationError as exc:
+        EmergencyDialog("PyCAM startup failure", str(exc))
+        return EXIT_CODES["requirements"]
+
+
+def get_args_parser():
+    parser = argparse.ArgumentParser(prog="PyCAM", description="Toolpath generator",
+                                     epilog="PyCAM website: https://github.com/SebKuzminsky/pycam")
+    # general options
+    group_processing = parser.add_argument_group("Processing")
+    group_processing.add_argument(
+        "--number-of-processes", dest="parallel_processes", default=None, type=int,
+        action="store",
+        help=("override the default detection of multiple CPU cores. Parallel processing only "
+              "works with Python 2.6 (or later) or with the additional 'multiprocessing' module."))
+    group_processing.add_argument(
+        "--enable-server", dest="enable_server", default=False, action="store_true",
+        help="enable a local server and (optionally) remote worker servers.")
+    group_processing.add_argument(
+        "--remote-server", dest="remote_server", default=None, action="store",
+        help=("Connect to a remote task server to distribute the processing load. "
+              "The server is given as an IP or a hostname with an optional port (default: 1250) "
+              "separated by a colon."))
+    group_processing.add_argument(
+        "--start-server-only", dest="start_server", default=False, action="store_true",
+        help="Start only a local server for handling remote requests.")
+    group_processing.add_argument(
+        "--server-auth-key", dest="server_authkey", default="", action="store",
+        help=("Secret used for connecting to a remote server or for granting access to remote "
+              "clients."))
+    group_verbosity = parser.add_argument_group("Verbosity")
+    group_verbosity.add_argument(
+        "-q", "--quiet", dest="quiet", default=False, action="store_true",
+        help="output only warnings and errors.")
+    group_verbosity.add_argument(
+        "-d", "--debug", dest="debug", default=False, action="store_true",
+        help="enable output of debug messages.")
+    group_verbosity.add_argument(
+        "--trace", dest="trace", default=False, action="store_true",
+        help="enable more verbose debug messages.")
+    group_verbosity.add_argument(
+        "--progress", dest="progress", default="text", action="store",
+        choices=["none", "text", "bar", "dot"],
+        help=("specify the type of progress bar used in non-GUI mode. The following options are "
+              "available: text, none, bar, dot."))
+    group_introspection = parser.add_argument_group("Introspection")
+    group_introspection.add_argument(
+        "--profiling", dest="profile_destination", action="store",
+        help="store profiling statistics in a file (only for debugging)")
+    group_introspection.add_argument("--version", action="version",
+                                     version="%(prog)s {}".format(VERSION))
+    return parser
+
+
+def main_func():
+    # The PyInstaller standalone executable requires this "freeze_support" call. Otherwise we will
+    # see a warning regarding an invalid argument called "--multiprocessing-fork". This problem can
+    # be triggered on single-core systems with these arguments:
+    #    "--enable-server --server-auth-key foo".
+    if hasattr(multiprocessing, "freeze_support"):
+        multiprocessing.freeze_support()
+    parser = get_args_parser()
+    args = parser.parse_args()
+    try:
+        if args.profile_destination:
+            import cProfile
+            exit_code = cProfile.run('execute(parser, args, pycam)',
+                                     args.profile_destination)
+        else:
+            # We need to add the parameter "pycam" to avoid weeeeird namespace
+            # issues. Any idea how to fix this?
+            exit_code = execute(parser, args, pycam)
+    except KeyboardInterrupt:
+        log.info("Quit requested")
+        exit_code = None
+    pycam.Utils.threading.cleanup()
+    if exit_code is not None:
+        sys.exit(exit_code)
+    else:
+        sys.exit(EXIT_CODES["ok"])
+
+
+if __name__ == "__main__":
+    main_func()
diff --git a/pycam/workspace/__init__.py b/pycam/workspace/__init__.py
new file mode 100644
index 0000000..1f09036
--- /dev/null
+++ b/pycam/workspace/__init__.py
@@ -0,0 +1,150 @@
+from enum import Enum
+
+
+class CollectionName(Enum):
+    MODELS = "models"
+    TOOLS = "tools"
+    PROCESSES = "processes"
+    BOUNDS = "bounds"
+    TASKS = "tasks"
+    TOOLPATHS = "toolpaths"
+    EXPORT_SETTINGS = "export_settings"
+    EXPORTS = "exports"
+
+
+class ToolShape(Enum):
+    FLAT_BOTTOM = "flat_bottom"
+    BALL_NOSE = "ball_nose"
+    TORUS = "torus"
+
+
+class ProcessStrategy(Enum):
+    SLICE = "slice"
+    CONTOUR = "contour"
+    SURFACE = "surface"
+    ENGRAVE = "engrave"
+
+
+class PathPattern(Enum):
+    SPIRAL = "spiral"
+    GRID = "grid"
+
+
+class BoundsSpecification(Enum):
+    ABSOLUTE = "absolute"
+    MARGINS = "margins"
+
+
+class TaskType(Enum):
+    MILLING = "milling"
+
+
+class SourceType(Enum):
+    FILE = "file"
+    URL = "url"
+    COPY = "copy"
+    MODEL = "model"
+    TASK = "task"
+    TOOLPATH = "toolpath"
+    OBJECT = "object"
+    SUPPORT_BRIDGES = "support_bridges"
+
+
+class ModelTransformationAction(Enum):
+    SCALE = "scale"
+    SHIFT = "shift"
+    ROTATE = "rotate"
+    MULTIPLY_MATRIX = "multiply_matrix"
+    PROJECTION = "projection"
+    TOGGLE_POLYGON_DIRECTIONS = "toggle_polygon_directions"
+    REVISE_POLYGON_DIRECTIONS = "revise_polygon_directions"
+
+
+class ToolpathTransformationAction(Enum):
+    CROP = "crop"
+    CLONE = "clone"
+    SHIFT = "shift"
+
+
+class ModelScaleTarget(Enum):
+    FACTOR = "factor"
+    SIZE = "size"
+
+
+class PositionShiftTarget(Enum):
+    DISTANCE = "distance"
+    ALIGN_MIN = "align_min"
+    ALIGN_MAX = "align_max"
+    CENTER = "center"
+
+    @classmethod
+    def _get_shift_offset(cls, shift_target, shift_axes, obj):
+        offset = []
+        if shift_target == cls.DISTANCE:
+            for value in shift_axes:
+                offset.append(0.0 if value is None else value)
+        elif shift_target == cls.ALIGN_MIN:
+            for value, current_position in zip(shift_axes, (obj.minx, obj.miny, obj.minz)):
+                offset.append(0.0 if value is None else (value - current_position))
+        elif shift_target == cls.ALIGN_MAX:
+            for value, current_position in zip(shift_axes, (obj.maxx, obj.maxy, obj.maxz)):
+                offset.append(0.0 if value is None else (value - current_position))
+        elif shift_target == cls.CENTER:
+            for value, current_position in zip(shift_axes, obj.get_center()):
+                offset.append(0.0 if value is None else (value - current_position))
+        else:
+            assert False
+        return offset
+
+
+class SupportBridgesLayout(Enum):
+    GRID = "grid"
+    DISTRIBUTED = "distributed"
+
+
+class DistributionStrategy(Enum):
+    CORNERS = "corners"
+    EVENLY = "evenly"
+
+
+class TargetType(Enum):
+    FILE = "file"
+
+
+class FormatType(Enum):
+    GCODE = "gcode"
+    MODEL = "model"
+
+
+class FileType(Enum):
+    STL = "stl"
+
+
+class GCodeDialect(Enum):
+    LINUXCNC = "linuxcnc"
+
+
+class ToolpathFilter(Enum):
+    SAFETY_HEIGHT = "safety_height"
+    PLUNGE_FEEDRATE = "plunge_feedrate"
+    STEP_WIDTH = "step_width"
+    CORNER_STYLE = "corner_style"
+    FILENAME_EXTENSION = "filename_extension"
+    TOUCH_OFF = "touch_off"
+    UNIT = "unit"
+
+
+class ToolBoundaryMode(Enum):
+    INSIDE = "inside"
+    ALONG = "along"
+    AROUND = "around"
+
+
+class ModelType(Enum):
+    TRIMESH = "trimesh"
+    POLYGON = "polygon"
+
+
+class LengthUnit(Enum):
+    METRIC_MM = "metric_mm"
+    IMPERIAL_INCH = "imperial_inch"
diff --git a/pycam/workspace/data_models.py b/pycam/workspace/data_models.py
new file mode 100644
index 0000000..7cfd28d
--- /dev/null
+++ b/pycam/workspace/data_models.py
@@ -0,0 +1,1648 @@
+"""
+Copyright 2017 Lars Kruse <devel@sumpfralle.de>
+
+This file is part of PyCAM.
+
+PyCAM is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
+"""
+
+import collections
+import copy
+from enum import Enum
+import functools
+import io
+import os.path
+import time
+import uuid
+
+from pycam.Cutters.CylindricalCutter import CylindricalCutter
+from pycam.Cutters.SphericalCutter import SphericalCutter
+from pycam.Cutters.ToroidalCutter import ToroidalCutter
+from pycam.Geometry import Box3D, Point3D
+import pycam.Geometry.Model
+from pycam.Geometry.Plane import Plane
+from pycam.PathGenerators import UpdateToolView
+import pycam.PathGenerators.DropCutter
+import pycam.PathGenerators.EngraveCutter
+import pycam.PathGenerators.PushCutter
+import pycam.Toolpath
+import pycam.Toolpath.Filters as tp_filters
+import pycam.Toolpath.MotionGrid as MotionGrid
+import pycam.Toolpath.SupportGrid
+from pycam.Importers import detect_file_type
+from pycam.Utils import get_application_key, get_type_name, MultiLevelDictionaryAccess
+from pycam.Utils.events import get_event_handler
+from pycam.Utils.progress import ProgressContext
+from pycam.Utils.locations import get_data_file_location
+import pycam.Utils.log
+from pycam.workspace import (
+    BoundsSpecification, CollectionName, DistributionStrategy, FileType, FormatType, GCodeDialect,
+    ModelScaleTarget, ModelTransformationAction, ModelType, LengthUnit, PathPattern,
+    PositionShiftTarget, ProcessStrategy, SourceType, SupportBridgesLayout, TargetType, TaskType,
+    ToolBoundaryMode, ToolpathFilter, ToolpathTransformationAction, ToolShape)
+from pycam.errors import (LoadFileError, PycamBaseException, InvalidDataError, InvalidKeyError,
+                          MissingAttributeError, UnexpectedAttributeError)
+
+_log = pycam.Utils.log.get_logger()
+
+
+# dictionary of all collections by name
+_data_collections = {}
+_cache = {}
+
+
+APPLICATION_ATTRIBUTES_KEY = "X-Application"
+
+
+def _get_enum_value(enum_class, value):
+    try:
+        return enum_class(value)
+    except ValueError:
+        raise InvalidKeyError(value, enum_class)
+
+
+def _get_enum_resolver(enum_class):
+    """ return a function that would convert a raw value to an enum item of the given class """
+    return functools.partial(_get_enum_value, enum_class)
+
+
+def _get_list_item_value(item_converter, values):
+    return [item_converter(value) for value in values]
+
+
+def _get_list_resolver(item_converter):
+    return functools.partial(_get_list_item_value, item_converter)
+
+
+def _bool_converter(value):
+    if isinstance(value, int):
+        if value == 1:
+            return True
+        elif value == 0:
+            return False
+        else:
+            raise InvalidDataError("Invalid boolean value: {} (int)".format(value))
+    elif isinstance(value, str):
+        if value.lower() in ("true", "yes", "1", "on", "enabled"):
+            return True
+        elif value.lower() in ("false", "no", "0", "off", "disabled"):
+            return False
+        else:
+            raise InvalidDataError("Invalid boolean value: {} (string)".format(value))
+    elif isinstance(value, bool):
+        return value
+    else:
+        raise InvalidDataError("Invalid boolean value type ({}): {}"
+                               .format(get_type_name(value), value))
+
+
+class LimitSingle(collections.namedtuple("LimitSingle", ("value", "is_relative"))):
+
+    @property
+    def export(self):
+        """return the storage string for later parsing"""
+        if self.is_relative:
+            return "{:f}%".format(100.0 * self.value)
+        else:
+            return self.value
+
+
+Limit3D = collections.namedtuple("Limit3D", ("x", "y", "z"))
+AxesValues = collections.namedtuple("AxesValues", ("x", "y", "z"))
+CacheItem = collections.namedtuple("CacheItem", ("timestamp", "content"))
+
+
+def _limit3d_converter(point):
+    """ convert a tuple or list of three numbers or a dict with x/y/z keys into a 'Limit3D' """
+    if len(point) != 3:
+        raise InvalidDataError("A 3D limit needs to contain exactly three items: {}"
+                               .format(point))
+    result = []
+    if isinstance(point, dict):
+        try:
+            point = (point["x"], point["y"], point["z"])
+        except KeyError:
+            raise InvalidDataError("All three axis are required for lower/upper limits")
+    for value in point:
+        is_relative = False
+        if isinstance(value, LimitSingle):
+            value, is_relative = value
+        elif isinstance(value, str):
+            try:
+                if value.endswith("%"):
+                    is_relative = True
+                    # convert percent value to 0..1
+                    value = float(value[:-1]) / 100.0
+                else:
+                    value = float(value)
+            except ValueError:
+                raise InvalidDataError("Failed to parse float from 3D limit: {}".format(value))
+        elif isinstance(value, (int, float)):
+            value = float(value)
+        else:
+            raise InvalidDataError("Non-numeric data supplied for 3D limit: {}".format(value))
+        result.append(LimitSingle(value, is_relative))
+    return Limit3D(*result)
+
+
+def _axes_values_converter(data, allow_none=False, wanted_axes="xyz"):
+    result = {key: None for key in "xyz"}
+    if isinstance(data, (list, dict)):
+        if isinstance(data, dict):
+            data = dict(data)
+            for key in wanted_axes:
+                try:
+                    value = data.pop(key)
+                except KeyError:
+                    if allow_none:
+                        value = None
+                    else:
+                        raise InvalidDataError("Missing mandatory axis component ({})".format(key))
+                result[key] = value
+            if data:
+                raise InvalidDataError("Superfluous axes key(s) supplied: {} (expected: x / y / z)"
+                                       .format(" / ".join(data.keys())))
+        else:
+            # a list
+            data = list(data)
+            if len(data) != len(wanted_axes):
+                raise InvalidDataError("Invalid number of axis components supplied: {:d} "
+                                       "(expected: {:d})".format(len(result), len(wanted_axes)))
+            for key, value in zip(wanted_axes, data):
+                result[key] = value
+        for key, value in result.items():
+            try:
+                result[key] = None if value is None else float(value)
+            except ValueError:
+                raise InvalidDataError("Axis value is not a float: {} ({})"
+                                       .format(value, get_type_name(value)))
+    else:
+        try:
+            factor = float(data)
+        except ValueError:
+            raise InvalidDataError("Axis value is not a float: {} ({})"
+                                   .format(data, get_type_name(data)))
+        for key in result:
+            result[key] = factor
+    return AxesValues(**result)
+
+
+def _get_from_collection(collection_name, wanted, many=False):
+    """ retrieve one or more items from a collection
+
+    @param collection_name: identifier of the relevant collection
+    @param wanted: ID (or list of IDs) to be used for filtering the collection items
+    @param many: expect "wanted" to be a list; return a tuple instead of a single value
+    """
+    default_result = [] if many else None
+    try:
+        collection = _data_collections[collection_name]
+    except KeyError:
+        _log.info("Requested item (%s) from unknown collection (%s)", wanted, collection_name)
+        return default_result
+    try:
+        if many:
+            return tuple(collection[item_id] for item_id in wanted
+                         if collection[item_id] is not None)
+        else:
+            return collection[wanted]
+    except KeyError:
+        return default_result
+
+
+def _get_collection_resolver(collection_name, many=False):
+    assert isinstance(collection_name, CollectionName)
+    return functools.partial(_get_from_collection, collection_name, many=many)
+
+
+def _set_parser_context(description):
+    """ store a string describing the current parser context (useful for error messages) """
+    def wrap(func):
+        @functools.wraps(func)
+        def inner_function(self, *args, **kwargs):
+            original_description = getattr(self, "_current_parser_context", None)
+            self._current_parser_context = description
+            try:
+                result = func(self, *args, **kwargs)
+            except PycamBaseException as exc:
+                # add a prefix to exceptions
+                exc.message = "{} -> {}".format(self._current_parser_context, exc)
+                raise exc
+            if original_description is None:
+                delattr(self, "_current_parser_context")
+            else:
+                self._current_parser_context = original_description
+            return result
+        return inner_function
+    return wrap
+
+
+def _set_allowed_attributes(attr_set):
+    def wrap(func):
+        @functools.wraps(func)
+        def inner_function(self, *args, **kwargs):
+            self.validate_allowed_attributes(attr_set)
+            return func(self, *args, **kwargs)
+        return inner_function
+    return wrap
+
+
+def _require_model_type(wanted_type):
+    def wrap(func):
+        @functools.wraps(func)
+        def inner_function(self, model, *args, **kwargs):
+            if (wanted_type == ModelType.TRIMESH) and not hasattr(model, "triangles"):
+                raise InvalidDataError(
+                    "Expected 3D mesh model, but received '{}'".format(type(model)))
+            elif (wanted_type == ModelType.POLYGON) and not hasattr(model, "get_polygons"):
+                raise InvalidDataError(
+                    "Expected 2D polygon model, but received '{}'".format(type(model)))
+            else:
+                return func(self, model, *args, **kwargs)
+        return inner_function
+    return wrap
+
+
+class CacheStorage:
+    """ cache result values of a method
+
+    The method's instance object may be a BaseDataContainer (or another non-trivial object).
+    Arguments for the method call are hashed.
+    Multiple data keys for a BaseDataContainer may be specified - a change of their value
+    invalidates cached values.
+    """
+
+    def __init__(self, relevant_dict_keys, max_cache_size=10):
+        self._relevant_dict_keys = tuple(relevant_dict_keys)
+        self._max_cache_size = max_cache_size
+
+    def __call__(self, calc_function):
+        def wrapped(inst, *args, **kwargs):
+            return self.get_cached(inst, args, kwargs, calc_function)
+        return wrapped
+
+    @classmethod
+    def _get_stable_hashs_for_value(cls, value):
+        """calculate a hash value for simple values and complex objects"""
+        if isinstance(value, dict):
+            for key_value in sorted(value.items()):
+                yield from cls._get_stable_hashs_for_value(key_value)
+        elif isinstance(value, (list, tuple)):
+            for item in value:
+                yield from cls._get_stable_hashs_for_value(item)
+        elif isinstance(value, (float, int, str)):
+            yield hash(value)
+        elif isinstance(value, pycam.Toolpath.Toolpath):
+            yield hash(value)
+        elif value is None:
+            yield hash(None)
+        elif isinstance(value, BaseDataContainer):
+            yield from cls._get_stable_hashs_for_value(value.get_dict())
+        elif isinstance(value, Enum):
+            yield hash(value.value)
+        else:
+            assert False, ("Non-hashable type needs hash conversion for cache key: {}"
+                           .format(type(value)))
+
+    def _get_cache_key(self, inst, args, kwargs):
+        hashes = []
+        for key in self._relevant_dict_keys:
+            value = inst.get_value(key)
+            hashes.append(hash(key))
+            hashes.extend(self._get_stable_hashs_for_value(value))
+        return (tuple(hashes)
+                + tuple(self._get_stable_hashs_for_value(args))
+                + tuple(self._get_stable_hashs_for_value(kwargs)))
+
+    def get_cached(self, inst, args, kwargs, calc_function):
+        # every instance manages its own cache
+        try:
+            my_cache = _cache[hash(inst)]
+        except KeyError:
+            my_cache = {}
+            _cache[hash(inst)] = my_cache
+        cache_key = self._get_cache_key(inst, args, kwargs)
+        try:
+            return my_cache[cache_key].content
+        except KeyError:
+            pass
+        cache_item = CacheItem(time.time(), calc_function(inst, *args, **kwargs))
+        my_cache[cache_key] = cache_item
+        if len(my_cache) > self._max_cache_size:
+            # remove the oldest cache item
+            item_list = [(key, value.timestamp) for key, value in my_cache.items()]
+            item_list.sort(key=lambda item: item[1])
+            my_cache.pop(item_list[0][0])
+        return cache_item.content
+
+
+class BaseDataContainer:
+
+    attribute_converters = {}
+    attribute_defaults = {}
+    changed_event = None
+
+    def __init__(self, data):
+        assert isinstance(data, dict), "Expecting a dict, but received '{}'".format(type(data))
+        data = copy.deepcopy(data)
+        # split the application-specific data (e.g. colors or visibility flags) from the model data
+        self._application_attributes = data.pop(APPLICATION_ATTRIBUTES_KEY, {})
+        self._data = data
+        self._multi_level_dict = MultiLevelDictionaryAccess(self._data)
+
+    @classmethod
+    def parse_from_dict(cls, data):
+        return cls(data)
+
+    def get_value(self, key, default=None, raw=False):
+        """ get a value from the data dictionary
+
+        @param key may be a simple string or a tuple of strings (multi-level access)
+        """
+        try:
+            raw_value = self._multi_level_dict.get_value(key)
+        except KeyError:
+            if default is not None:
+                raw_value = default
+            elif key in self.attribute_defaults:
+                raw_value = copy.deepcopy(self.attribute_defaults[key])
+            else:
+                if hasattr(self, "_current_parser_context"):
+                    # the context will be added automatically
+                    raise MissingAttributeError("missing attribute '{}'".format(key))
+                else:
+                    # generate a suitable context based on the object itself
+                    raise MissingAttributeError("{} -> missing attribute '{}'"
+                                                .format(get_type_name(self), key))
+        if raw:
+            return raw_value
+        elif key in self.attribute_converters:
+            value = self.attribute_converters[key](raw_value)
+            if hasattr(value, "set_related_collection"):
+                # special case for Source: we need the original collection for "copy"
+                value.set_related_collection(self.collection_name)
+            return value
+        else:
+            return raw_value
+
+    def set_value(self, key, value):
+        """ set a value of the data dictionary and notify subscribes in case of changes
+
+        @param key may be a simple string or a tuple of strings (multi-level access)
+        """
+        new_value = copy.deepcopy(value)
+        try:
+            is_different = (self._multi_level_dict.get_value(key) != new_value)
+        except KeyError:
+            # the key is missing
+            is_different = True
+        if is_different:
+            self._multi_level_dict.set_value(key, new_value)
+            self.notify_changed()
+
+    def extend_value(self, key, values):
+        """extend a value (which must be a list) with additional values
+
+        This is just a convenience wrapper for the combination of "get_value", "get_dict",
+        "extend" and "set_value".
+        @param key may be a simple string or a tuple of strings (multi-level access)
+        """
+        if values:
+            try:
+                current_list = self._multi_level_dict.get_value(key)
+            except KeyError:
+                current_list = []
+                self._multi_level_dict.set_value(key, current_list)
+            current_list.extend(values)
+            self.notify_changed()
+
+    def get_dict(self, with_application_attributes=False):
+        result = copy.deepcopy(self._data)
+        # fill missing slots with their default values
+        result_multi_level = MultiLevelDictionaryAccess(result)
+        # replace all enum variables with their value
+        result_multi_level.apply_recursive_item_modification(lambda value: isinstance(value, Enum),
+                                                             lambda value: value.value)
+        for key, value in self.attribute_defaults.items():
+            value = copy.deepcopy(value)
+            # resolve enums into their string representation
+            if isinstance(value, Enum):
+                value = value.value
+            try:
+                # check if the value for this key exists
+                result_multi_level.get_value(key)
+            except KeyError:
+                # the value does not exist: set it with its default
+                result_multi_level.set_value(key, value)
+        if with_application_attributes:
+            minimized_data = {key: value
+                              for key, value in copy.deepcopy(self._application_attributes).items()
+                              if value}
+            if minimized_data:
+                result[APPLICATION_ATTRIBUTES_KEY] = minimized_data
+        return result
+
+    def _get_current_application_dict(self):
+        try:
+            return self._application_attributes[get_application_key()]
+        except KeyError:
+            self._application_attributes[get_application_key()] = {}
+        return self._application_attributes[get_application_key()]
+
+    def set_application_value(self, key, value):
+        new_value = copy.deepcopy(value)
+        value_dict = self._get_current_application_dict()
+        if value_dict.get(key) != new_value:
+            value_dict[key] = new_value
+            self.notify_changed()
+
+    def get_application_value(self, key, default=None):
+        return self._get_current_application_dict().get(key, default)
+
+    @classmethod
+    def _get_not_matching_keys(cls, data_dict, allowed_keys):
+        """ retrieve hierarchical keys from a nested dictionary that are not part of 'allowed_keys'
+
+        The items of the dict are tested for being contained in "allowed_keys".
+        Nested keys are specified as tuples of the keys of the nesting levels.
+        Valid examples (returning an empty result):
+            {"foo": "bar"}, {"foo", "baz", "fu"}
+            {"foo": {"bar": "baz"}}, {("foo", "bar"), "fu"}
+            {}, {"foo"}
+            {"foo": 1, "bar": {"baz": 2, "fu": {"foobar": 3}}},
+                {"foo", ("bar", "baz"), ("bar, "fu", "foobar")}
+        """
+        non_matching = set()
+        for key, value in data_dict.items():
+            if key not in allowed_keys and (key, ) not in allowed_keys:
+                if isinstance(value, dict):
+                    # the key itself is not allowed - try to go down to the next level
+                    sub_keys = {tuple(allowed_key[1:])
+                                for allowed_key in allowed_keys
+                                if isinstance(allowed_key, tuple) and (key == allowed_key[0])}
+                    for sub_non_matching in cls._get_not_matching_keys(value, sub_keys):
+                        if isinstance(sub_non_matching, tuple):
+                            non_matching.add((key, ) + sub_non_matching)
+                        else:
+                            non_matching.add((key, sub_non_matching))
+                else:
+                    non_matching.add(key)
+        return non_matching
+
+    def validate_allowed_attributes(self, allowed_attributes):
+        unexpected_attributes = self._get_not_matching_keys(self._data, allowed_attributes)
+        if unexpected_attributes:
+            unexpected_attributes_string = " / ".join(
+                "->".join(item) if isinstance(item, tuple) else item
+                for item in unexpected_attributes)
+            raise UnexpectedAttributeError("unexpected attributes were given: {}"
+                                           .format(unexpected_attributes_string))
+
+    def notify_changed(self):
+        if self.changed_event:
+            get_event_handler().emit_event(self.changed_event)
+
+    def validate(self):
+        """ try to verify the validity of a data item
+
+        All operations of the items are executed (avoiding permanent side-effects).  Most problems
+        of the data structure should be discovered during this operation.  Non-trivial problems
+        (e.g. missing permissions for file operations) are not guaranteed to be detected.
+
+        throws PycamBaseException in case of errors
+        """
+        raise NotImplementedError
+
+    def __str__(self):
+        attr_dict_string = ", ".join("{}={}".format(key, value)
+                                     for key, value in self.get_dict().items())
+        return "{}({})".format(get_type_name(self), attr_dict_string)
+
+
+class BaseCollection:
+
+    def __init__(self, name, list_changed_event=None):
+        self._name = name
+        self._list_changed_event = list_changed_event
+        self._data = []
+
+    @property
+    def list_changed_event(self):
+        return self._list_changed_event
+
+    def clear(self):
+        if self._data:
+            while self._data:
+                self._data.pop()
+            self.notify_list_changed()
+
+    def __setitem__(self, index, value):
+        if self._data[index] != value:
+            self._data[index] = value
+            self.notify_list_changed()
+
+    def append(self, value):
+        self._data.append(value)
+        self.notify_list_changed()
+
+    def __getitem__(self, index_or_key):
+        for item in self._data:
+            if index_or_key == item.get_id():
+                return item
+        else:
+            # Not found by ID? Interprete the value as an index.
+            if isinstance(index_or_key, int):
+                return self._data[index_or_key]
+            else:
+                _log.warning("Failed to find item in collection (%s): %s (expected: %s)",
+                             self._name, index_or_key, [item.get_id() for item in self._data])
+                return None
+
+    def __delitem__(self, index):
+        item = self[index]
+        if item is not None:
+            try:
+                self.remove(item)
+            except ValueError:
+                pass
+
+    def remove(self, item):
+        _log.info("Removing '{}' from collection '{}'".format(item.get_id(), self._name))
+        try:
+            self._data.remove(item)
+        except ValueError:
+            raise KeyError("Failed to remove '{}' from collection '{}'"
+                           .format(item.get_id(), self._name))
+        self.notify_list_changed()
+
+    def __iter__(self):
+        return iter(self._data)
+
+    def __len__(self):
+        return len(self._data)
+
+    def __contains__(self, key):
+        return (key in self._data) or (key in [item.get_id() for item in self._data])
+
+    def __bool__(self):
+        return len(self._data) > 0
+
+    def swap_by_index(self, index1, index2):
+        assert index1 != index2
+        smaller, bigger = min(index1, index2), max(index1, index2)
+        item1 = self._data.pop(bigger)
+        item2 = self._data.pop(smaller)
+        self._data.insert(smaller, item1)
+        self._data.insert(bigger, item2)
+        self.notify_list_changed()
+
+    def get_dict(self, with_application_attributes=False, without_uuids=False):
+        result = {}
+        for item in self._data:
+            item_id = item.get_id()
+            data = item.get_dict(with_application_attributes=with_application_attributes)
+            if without_uuids:
+                try:
+                    data.pop(item.unique_attribute)
+                except KeyError:
+                    pass
+            result[item_id] = data
+        return result
+
+    def notify_list_changed(self):
+        if self._list_changed_event:
+            get_event_handler().emit_event(self._list_changed_event)
+
+    def validate(self):
+        for item in self._data:
+            item.validate()
+
+
+class BaseCollectionItemDataContainer(BaseDataContainer):
+
+    # the name of the collection should be overwritten in every subclass
+    collection_name = None
+    list_changed_event = None
+    unique_attribute = "uuid"
+
+    def __init__(self, item_id, data, add_to_collection=True):
+        super().__init__(data)
+        assert self.collection_name is not None, (
+            "Missing unique attribute ({}) of '{}' class"
+            .format(self.unique_attribute, get_type_name(self)))
+        if item_id is None:
+            item_id = uuid.uuid4().hex
+        try:
+            hash(item_id)
+        except TypeError:
+            raise InvalidDataError("Invalid item ID ({}): not hashable".format(item_id))
+        self._data[self.unique_attribute] = item_id
+        if add_to_collection:
+            self.get_collection().append(self)
+
+    def get_id(self):
+        return self.get_dict()[self.unique_attribute]
+
+    @classmethod
+    def get_collection(cls):
+        try:
+            return _data_collections[cls.collection_name]
+        except KeyError:
+            collection = BaseCollection(cls.collection_name,
+                                        list_changed_event=cls.list_changed_event)
+            _data_collections[cls.collection_name] = collection
+            return collection
+
+
+class Source(BaseDataContainer):
+
+    attribute_converters = {
+        "type": _get_enum_resolver(SourceType),
+        "models": _get_collection_resolver(CollectionName.MODELS, many=True),
+        "layout": _get_enum_resolver(SupportBridgesLayout),
+        "distribution": _get_enum_resolver(DistributionStrategy),
+        ("grid", "distances"): functools.partial(_axes_values_converter, wanted_axes="xy"),
+        ("grid", "offsets", "x"): _get_list_resolver(float),
+        ("grid", "offsets", "y"): _get_list_resolver(float),
+        ("shape", "height"): float,
+        ("shape", "thickness"): float,
+        ("shape", "length"): float,
+        "average_distance": float,
+        "minimum_count": int,
+    }
+    attribute_defaults = {
+        ("grid", "offsets", "x"): [],
+        ("grid", "offsets", "y"): [],
+        "minimum_count": 3,
+        "average_distance": None,
+    }
+
+    def __hash__(self):
+        source_type = self.get_value("type")
+        if source_type == SourceType.COPY:
+            return hash(self._get_source_copy())
+        elif source_type in (SourceType.FILE, SourceType.URL):
+            return hash(self.get_value("location"))
+        elif source_type == SourceType.MODEL:
+            return hash(self._get_source_model())
+        elif source_type == SourceType.TASK:
+            return hash(self._get_source_task())
+        elif source_type == SourceType.TOOLPATH:
+            return hash(self._get_source_toolpath())
+        elif source_type == SourceType.OBJECT:
+            return hash(self._get_source_object())
+        elif source_type == SourceType.SUPPORT_BRIDGES:
+            return hash(self._get_source_support_bridges())
+        else:
+            raise InvalidKeyError(source_type, SourceType)
+
+    @CacheStorage({"type"})
+    @_set_parser_context("Source")
+    def get(self, related_collection_name):
+        _log.debug("Retrieving source {}".format(self))
+        source_type = self.get_value("type")
+        if source_type == SourceType.COPY:
+            if related_collection_name is None:
+                # handle "validate" check gracefully
+                raise ValueError("'related_collection_name' may not be None")
+            else:
+                return self._get_source_copy(related_collection_name)
+        elif source_type in (SourceType.FILE, SourceType.URL):
+            return self._get_source_location(source_type)
+        elif source_type == SourceType.MODEL:
+            return self._get_source_model()
+        elif source_type == SourceType.TASK:
+            return self._get_source_task()
+        elif source_type == SourceType.TOOLPATH:
+            return self._get_source_toolpath()
+        elif source_type == SourceType.OBJECT:
+            return self._get_source_object()
+        elif source_type == SourceType.SUPPORT_BRIDGES:
+            return self._get_source_support_bridges()
+        else:
+            raise InvalidKeyError(source_type, SourceType)
+
+    @_set_parser_context("Source 'copy'")
+    @_set_allowed_attributes({"type", "original"})
+    def _get_source_copy(self, related_collection_name):
+        source_name = self.get_value("original")
+        return _get_from_collection(related_collection_name, source_name).get_model()
+
+    @_set_parser_context("Source 'file/url'")
+    @_set_allowed_attributes({"type", "location"})
+    def _get_source_location(self, source_type):
+        location = self.get_value("location")
+        if source_type == SourceType.FILE:
+            if not os.path.isabs(location):
+                # try to guess the absolute location
+                # TODO: add the directory of the most recently loaded workspace file
+                # guess the git base directory
+                git_checkout_dir = os.path.join(os.path.dirname(__file__),
+                                                os.path.pardir, os.path.pardir)
+                search_directories = [os.getcwd(), git_checkout_dir]
+                abs_location = get_data_file_location(location, silent=True,
+                                                      priority_directories=search_directories)
+                # hopefully it worked - otherwise normal error handling will happen
+                if abs_location is not None:
+                    location = abs_location
+            location = "file://" + os.path.abspath(location)
+        detected_filetype = detect_file_type(location)
+        if detected_filetype:
+            try:
+                return detected_filetype.importer(detected_filetype.uri)
+            except LoadFileError as exc:
+                raise InvalidDataError("Failed to detect file type ({}): {}".format(location, exc))
+        else:
+            raise InvalidDataError("Failed to load data from '{}'".format(location))
+
+    @_set_parser_context("Source 'model'")
+    @_set_allowed_attributes({"type", "items"})
+    def _get_source_model(self):
+        model_names = self.get_value("items")
+        return _get_from_collection(CollectionName.MODELS, model_names, many=True)
+
+    @_set_parser_context("Source 'task'")
+    @_set_allowed_attributes({"type", "item"})
+    def _get_source_task(self):
+        task_name = self.get_value("item")
+        return _get_from_collection(CollectionName.TASKS, task_name)
+
+    @_set_parser_context("Source 'toolpath'")
+    @_set_allowed_attributes({"type", "items"})
+    def _get_source_toolpath(self):
+        toolpath_names = self.get_value("items")
+        return _get_from_collection(CollectionName.TOOLPATHS, toolpath_names, many=True)
+
+    @_set_parser_context("Source 'object'")
+    @_set_allowed_attributes({"type", "data"})
+    def _get_source_object(self):
+        """ transfer method for intra-process transfer """
+        return self.get_value("data")
+
+    @staticmethod
+    def _get_values_or_repeat_last(input_values, default=0):
+        """ pass through values taken from an input list
+
+        The last value is repeated forever, after the input list is exhausted.
+        In case of an empty list, the default value is returned again and again.
+        """
+        value = default
+        for value in input_values:
+            yield value
+        # continue yielding the last value forever
+        while True:
+            yield value
+
+    @_set_parser_context("Source 'support_bridges'")
+    @_set_allowed_attributes({
+        "type", "models", "layout", "distribution", ("grid", "distances"),
+        "average_distance", "minimum_count", ("grid", "offsets", "x"), ("grid", "offsets", "y"),
+        ("shape", "height"), ("shape", "width"), ("shape", "length")})
+    def _get_source_support_bridges(self):
+        layout = self.get_value("layout")
+        models = self.get_value("models")
+        height = self.get_value(("shape", "height"))
+        width = self.get_value(("shape", "width"))
+        bridge_length = self.get_value(("shape", "length"))
+        if layout == SupportBridgesLayout.GRID:
+            box = pycam.Geometry.Model.get_combined_bounds(model.get_model() for model in models)
+            if box is None:
+                return None
+            else:
+                grid_distances = self.get_value(("grid", "distances"))
+                grid_offsets_x = self.get_value(("grid", "offsets", "x"))
+                grid_offsets_y = self.get_value(("grid", "offsets", "y"))
+                return pycam.Toolpath.SupportGrid.get_support_grid(
+                    box.lower.x, box.upper.x, box.lower.y, box.upper.y, box.lower.z,
+                    grid_distances.x, grid_distances.y, height, width, bridge_length,
+                    adjustments_x=self._get_values_or_repeat_last(grid_offsets_x),
+                    adjustments_y=self._get_values_or_repeat_last(grid_offsets_y))
+        elif layout == SupportBridgesLayout.DISTRIBUTED:
+            if not models:
+                return None
+            else:
+                distribution = self.get_value("distribution")
+                minimum_count = self.get_value("minimum_count")
+                average_distance = self.get_value("average_distance")
+                box = pycam.Geometry.Model.get_combined_bounds(model.get_model()
+                                                               for model in models)
+                if box is None:
+                    return None
+                else:
+                    if distribution == DistributionStrategy.CORNERS:
+                        start_at_corners = True
+                    elif distribution == DistributionStrategy.EVENLY:
+                        start_at_corners = False
+                    else:
+                        assert False
+                    if average_distance is None:
+                        dim_x, dim_y = box.get_dimensions()[:2]
+                        # default distance: at least three pieces per side
+                        average_distance = (dim_x + dim_y) / 6
+                    combined_model = pycam.Geometry.Model.get_combined_model(model.get_model()
+                                                                             for model in models)
+                    return pycam.Toolpath.SupportGrid.get_support_distributed(
+                        combined_model, combined_model.minz, average_distance, minimum_count,
+                        width, height, bridge_length, start_at_corners=start_at_corners)
+        else:
+            assert False
+
+    def validate(self):
+        try:
+            # try it with a invalid "related_collection_name" - hopefully it works
+            self.get(None)
+        except ValueError:
+            # The "copy" source requires a suitable "related_collection_name" parameter. Thus we
+            # cannot fully check the validity.
+            pass
+
+
+class ModelTransformation(BaseDataContainer):
+
+    attribute_converters = {"action": _get_enum_resolver(ModelTransformationAction),
+                            "scale_target": _get_enum_resolver(ModelScaleTarget),
+                            "shift_target": _get_enum_resolver(PositionShiftTarget),
+                            "center": _axes_values_converter,
+                            "vector": _axes_values_converter,
+                            "angle": float,
+                            "axes": functools.partial(_axes_values_converter, allow_none=True)}
+
+    def get_transformed_model(self, model):
+        action = self.get_value("action")
+        if action == ModelTransformationAction.SCALE:
+            return self._get_scaled_model(model)
+        elif action == ModelTransformationAction.SHIFT:
+            return self._get_shifted_model(model)
+        elif action == ModelTransformationAction.ROTATE:
+            return self._get_rotated_model(model)
+        elif action == ModelTransformationAction.MULTIPLY_MATRIX:
+            return self._get_matrix_multiplied_model(model)
+        elif action == ModelTransformationAction.PROJECTION:
+            return self._get_projected_model(model)
+        elif action in (ModelTransformationAction.TOGGLE_POLYGON_DIRECTIONS,
+                        ModelTransformationAction.REVISE_POLYGON_DIRECTIONS):
+            return self._get_polygon_transformed(model)
+        else:
+            raise InvalidKeyError(action, ModelTransformationAction)
+
+    @_set_parser_context("Model transformation 'scale'")
+    @_set_allowed_attributes({"action", "scale_target", "axes"})
+    def _get_scaled_model(self, model):
+        target = self.get_value("scale_target")
+        axes = self.get_value("axes")
+        kwargs = {}
+        if target == ModelScaleTarget.FACTOR:
+            for key, value in zip(("scale_x", "scale_y", "scale_z"), axes):
+                kwargs[key] = 1.0 if value is None else value
+        elif target == ModelScaleTarget.SIZE:
+            for key, current_size, target_size in zip(
+                    ("scale_x", "scale_y", "scale_z"), model.get_dimensions(), axes):
+                if current_size == 0:
+                    raise InvalidDataError("Model transformation 'scale' does not accept "
+                                           "zero as a target size ({}).".format(key))
+                elif target_size is None:
+                    kwargs[key] = 1.0
+                else:
+                    kwargs[key] = target_size / current_size
+        else:
+            assert False
+        new_model = model.copy()
+        with ProgressContext("Scaling model") as progress:
+            new_model.scale(callback=progress.update, **kwargs)
+        return new_model
+
+    @_set_parser_context("Model transformation 'shift'")
+    @_set_allowed_attributes({"action", "shift_target", "axes"})
+    def _get_shifted_model(self, model):
+        target = self.get_value("shift_target")
+        axes = self.get_value("axes")
+        offset = target._get_shift_offset(target, axes, model)
+        new_model = model.copy()
+        with ProgressContext("Shifting Model") as progress:
+            new_model.shift(*offset, callback=progress.update)
+        return new_model
+
+    @_set_parser_context("Model transformation 'rotate'")
+    @_set_allowed_attributes({"action", "center", "vector", "angle"})
+    def _get_rotated_model(self, model):
+        center = self.get_value("center")
+        vector = self.get_value("vector")
+        angle = self.get_value("angle")
+        new_model = model.copy()
+        with ProgressContext("Rotating Model") as progress:
+            new_model.rotate(center, vector, angle, callback=progress.update)
+        return new_model
+
+    @_set_parser_context("Model transformation 'matrix multiplication'")
+    @_set_allowed_attributes({"action", "matrix"})
+    def _get_matrix_multiplied_model(self, model):
+        matrix = self.get_value("matrix")
+        lengths = [len(row) for row in matrix]
+        if not lengths == [3, 3, 3]:
+            raise InvalidDataError("Invalid Matrix row lengths ({}) - expected [3, 3, 3] instead."
+                                   .format(lengths))
+        # add zero shift offsets (the fourth column)
+        for row in matrix:
+            row.append(0)
+        new_model = model.copy()
+        with ProgressContext("Transform Model") as progress:
+            new_model.transform_by_matrix(matrix, callback=progress.update)
+        return new_model
+
+    @_set_parser_context("Model transformation 'projection'")
+    @_set_allowed_attributes({"action", "center", "vector"})
+    @_require_model_type(ModelType.TRIMESH)
+    def _get_projected_model(self, model):
+        center = self.get_value("center")
+        vector = self.get_value("vector")
+        plane = Plane(center, vector)
+        with ProgressContext("Calculate waterline of model") as progress:
+            return model.get_waterline_contour(plane, callback=progress.update)
+
+    @_set_parser_context("Model transformation 'polygon directions'")
+    @_set_allowed_attributes({"action"})
+    @_require_model_type(ModelType.POLYGON)
+    def _get_polygon_transformed(self, model):
+        action = self.get_value("action")
+        new_model = model.copy()
+        if action == ModelTransformationAction.REVISE_POLYGON_DIRECTIONS:
+            with ProgressContext("Revise polygon directions") as progress:
+                new_model.revise_directions(callback=progress.update)
+        elif action == ModelTransformationAction.TOGGLE_POLYGON_DIRECTIONS:
+            with ProgressContext("Reverse polygon directions") as progress:
+                new_model.reverse_directions(callback=progress.update)
+        else:
+            assert False
+        return new_model
+
+    def validate(self):
+        model = pycam.Geometry.Model.Model()
+        self.get_transformed_model(model)
+
+
+class Model(BaseCollectionItemDataContainer):
+
+    collection_name = CollectionName.MODELS
+    changed_event = "model-changed"
+    list_changed_event = "model-list-changed"
+    attribute_converters = {"source": Source,
+                            "transformations": _get_list_resolver(ModelTransformation)}
+    attribute_defaults = {"transformations": []}
+
+    @CacheStorage({"source", "transformations"})
+    @_set_parser_context("Model")
+    def get_model(self):
+        _log.debug("Generating model {}".format(self.get_id()))
+        model = self.get_value("source").get(CollectionName.MODELS)
+        for transformation in self.get_value("transformations"):
+            model = transformation.get_transformed_model(model)
+        return model
+
+    def validate(self):
+        self.get_model()
+
+
+class Tool(BaseCollectionItemDataContainer):
+
+    collection_name = CollectionName.TOOLS
+    changed_event = "tool-changed"
+    list_changed_event = "tool-list-changed"
+    attribute_converters = {"shape": _get_enum_resolver(ToolShape),
+                            "tool_id": int,
+                            "radius": float,
+                            "diameter": float,
+                            "toroid_radius": float,
+                            "height": float,
+                            "feed": float,
+                            ("spindle", "speed"): float,
+                            ("spindle", "spin_up_delay"): float,
+                            ("spindle", "spin_up_enabled"): _bool_converter}
+    attribute_defaults = {"tool_id": 1,
+                          "height": 10,
+                          "feed": 300,
+                          ("spindle", "speed"): 1000,
+                          ("spindle", "spin_up_delay"): 0,
+                          ("spindle", "spin_up_enabled"): True}
+
+    @_set_parser_context("Tool")
+    def get_tool_geometry(self):
+        height = self.get_value("height")
+        shape = self.get_value("shape")
+        if shape == ToolShape.FLAT_BOTTOM:
+            return CylindricalCutter(self.radius, height=height)
+        elif shape == ToolShape.BALL_NOSE:
+            return SphericalCutter(self.radius, height=height)
+        elif shape == ToolShape.TORUS:
+            toroid_radius = self.get_value("toroid_radius")
+            return ToroidalCutter(self.radius, toroid_radius, height=height)
+        else:
+            raise InvalidKeyError(shape, ToolShape)
+
+    @property
+    @_set_parser_context("Tool radius")
+    def radius(self):
+        """ offer a uniform interface for retrieving the radius value from "radius" or "diameter"
+
+        May raise MissingAttributeError if valid input sources are missing.
+        """
+        try:
+            return self.get_value("radius")
+        except MissingAttributeError:
+            pass
+        return self.get_value("diameter") / 2.0
+
+    @property
+    def diameter(self):
+        return 2 * self.radius
+
+    def get_toolpath_filters(self):
+        result = []
+        result.append(tp_filters.SelectTool(self.get_value("tool_id")))
+        result.append(tp_filters.MachineSetting("feedrate", self.get_value("feed")))
+        result.append(tp_filters.SpindleSpeed(self.get_value(("spindle", "speed"))))
+        if self.get_value(("spindle", "spin_up_enabled")):
+            result.append(tp_filters.TriggerSpindle(
+                delay=self.get_value(("spindle", "spin_up_delay"))))
+        return result
+
+    def validate(self):
+        self.get_tool_geometry()
+        self.get_toolpath_filters()
+
+
+class Process(BaseCollectionItemDataContainer):
+
+    collection_name = CollectionName.PROCESSES
+    changed_event = "process-changed"
+    list_changed_event = "process-list-changed"
+    attribute_converters = {"strategy": _get_enum_resolver(ProcessStrategy),
+                            "milling_style": _get_enum_resolver(MotionGrid.MillingStyle),
+                            "path_pattern": _get_enum_resolver(PathPattern),
+                            "grid_direction": _get_enum_resolver(MotionGrid.GridDirection),
+                            "spiral_direction": _get_enum_resolver(MotionGrid.SpiralDirection),
+                            "pocketing_type": _get_enum_resolver(MotionGrid.PocketingType),
+                            "trace_models": _get_collection_resolver(CollectionName.MODELS,
+                                                                     many=True),
+                            "rounded_corners": _bool_converter,
+                            "radius_compensation": _bool_converter,
+                            "overlap": float,
+                            "step_down": float}
+    attribute_defaults = {"overlap": 0,
+                          "path_pattern": PathPattern.GRID,
+                          "grid_direction": MotionGrid.GridDirection.X,
+                          "spiral_direction": MotionGrid.SpiralDirection.OUT,
+                          "rounded_corners": True,
+                          "radius_compensation": False}
+
+    @_set_parser_context("Process")
+    def get_path_generator(self):
+        _log.debug("Retrieving path generator for process {}".format(self.get_id()))
+        strategy = _get_enum_value(ProcessStrategy, self.get_value("strategy"))
+        if strategy == ProcessStrategy.SLICE:
+            return pycam.PathGenerators.PushCutter.PushCutter(waterlines=False)
+        elif strategy == ProcessStrategy.CONTOUR:
+            return pycam.PathGenerators.PushCutter.PushCutter(waterlines=True)
+        elif strategy == ProcessStrategy.SURFACE:
+            return pycam.PathGenerators.DropCutter.DropCutter()
+        elif strategy == ProcessStrategy.ENGRAVE:
+            return pycam.PathGenerators.EngraveCutter.EngraveCutter()
+        else:
+            raise InvalidKeyError(strategy, ProcessStrategy)
+
+    @_set_parser_context("Process")
+    def get_motion_grid(self, tool_radius, box, recurse_immediately=False):
+        """ create a generator for the moves to be tried (while respecting obstacles) for a process
+        """
+        _log.debug("Generating motion grid for process {}".format(self.get_id()))
+        strategy = self.get_value("strategy")
+        overlap = self.get_value("overlap")
+        line_distance = 2 * tool_radius * (1 - overlap)
+        with ProgressContext("Calculating moves") as progress:
+            if strategy == ProcessStrategy.SLICE:
+                milling_style = self.get_value("milling_style")
+                path_pattern = self.get_value("path_pattern")
+                if path_pattern == PathPattern.SPIRAL:
+                    func = functools.partial(MotionGrid.get_spiral,
+                                             spiral_direction=self.get_value("spiral_direction"),
+                                             rounded_corners=self.get_value("rounded_corners"))
+                elif path_pattern == PathPattern.GRID:
+                    func = functools.partial(MotionGrid.get_fixed_grid,
+                                             grid_direction=self.get_value("grid_direction"))
+                else:
+                    raise InvalidKeyError(path_pattern, PathPattern)
+                motion_grid = func(box, self.get_value("step_down"), line_distance=line_distance,
+                                   milling_style=milling_style)
+            elif strategy == ProcessStrategy.CONTOUR:
+                # The waterline only works with a millingstyle generating parallel lines in the
+                # same direction (not going backwards and forwards). Thus we just pick one of the
+                # "same direction" styles.
+                # TODO: probably the milling style should be configurable (but never "IGNORE").
+                motion_grid = MotionGrid.get_fixed_grid(
+                    box, self.get_value("step_down"), line_distance=line_distance,
+                    grid_direction=MotionGrid.GridDirection.X,
+                    milling_style=MotionGrid.MillingStyle.CONVENTIONAL,
+                    use_fixed_start_position=True)
+            elif strategy == ProcessStrategy.SURFACE:
+                milling_style = self.get_value("milling_style")
+                path_pattern = self.get_value("path_pattern")
+                if path_pattern == PathPattern.SPIRAL:
+                    func = functools.partial(MotionGrid.get_spiral,
+                                             spiral_direction=self.get_value("spiral_direction"),
+                                             rounded_corners=self.get_value("rounded_corners"))
+                elif path_pattern == PathPattern.GRID:
+                    func = functools.partial(MotionGrid.get_fixed_grid,
+                                             grid_direction=self.get_value("grid_direction"))
+                else:
+                    raise InvalidKeyError(path_pattern, PathPattern)
+                # surfacing requires a finer grid (arbitrary factor)
+                step_width = tool_radius / 4.0
+                motion_grid = func(box, None, step_width=step_width, line_distance=line_distance,
+                                   milling_style=milling_style)
+            elif strategy == ProcessStrategy.ENGRAVE:
+                milling_style = self.get_value("milling_style")
+                models = [m.get_model() for m in self.get_value("trace_models")]
+                if not models:
+                    _log.error("No trace models given: you need to assign a 2D model to the "
+                               "engraving process.")
+                    return None
+                radius_compensation = self.get_value("radius_compensation")
+                if radius_compensation:
+                    with ProgressContext("Offsetting models") as offset_progress:
+                        offset_progress.set_multiple(len(models), "Model")
+                        for index, model in enumerate(models):
+                            models[index] = model.get_offset_model(tool_radius,
+                                                                   callback=offset_progress.update)
+                            offset_progress.update_multiple()
+                line_distance = 1.8 * tool_radius
+                step_width = tool_radius / 4.0
+                pocketing_type = self.get_value("pocketing_type")
+                motion_grid = MotionGrid.get_lines_grid(
+                    models, box, self.get_value("step_down"), line_distance=line_distance,
+                    step_width=step_width, milling_style=milling_style,
+                    pocketing_type=pocketing_type, skip_first_layer=True, callback=progress.update)
+            else:
+                raise InvalidKeyError(strategy, ProcessStrategy)
+            if recurse_immediately:
+                motion_grid = MotionGrid.resolve_multi_level_generator(motion_grid, 2)
+        return motion_grid
+
+    def validate(self):
+        self.get_path_generator()
+        self.get_motion_grid(tool_radius=1, box=Box3D(Point3D(0, 0, 0), Point3D(1, 1, 1)))
+
+
+class Boundary(BaseCollectionItemDataContainer):
+
+    collection_name = CollectionName.BOUNDS
+    changed_event = "bounds-changed"
+    list_changed_event = "bounds-list-changed"
+    attribute_converters = {"specification": _get_enum_resolver(BoundsSpecification),
+                            "reference_models": _get_collection_resolver(CollectionName.MODELS,
+                                                                         many=True),
+                            "lower": _limit3d_converter,
+                            "upper": _limit3d_converter,
+                            "tool_boundary": _get_enum_resolver(ToolBoundaryMode)}
+    attribute_defaults = {"tool_boundary": ToolBoundaryMode.ALONG,
+                          "reference_models": []}
+
+    @_set_parser_context("Boundary")
+    def coerce_limits(self, models=None):
+        abs_boundary = self.get_absolute_limits(models=models)
+        if abs_boundary is None:
+            # nothing to be changed
+            return
+        for axis_name, lower, upper in (("X", abs_boundary.minx, abs_boundary.maxx),
+                                        ("Y", abs_boundary.miny, abs_boundary.maxy),
+                                        ("Z", abs_boundary.minz, abs_boundary.maxz)):
+            if upper < lower:
+                # TODO: implement boundary adjustment in case of conflicts
+                _log.warning("Negative Boundary encounterd for %s: %g < %g. "
+                             "Coercing is not implemented, yet.", axis_name, lower, upper)
+
+    @CacheStorage({"specification", "reference_models", "lower", "upper", "tool_boundary"})
+    @_set_parser_context("Boundary")
+    def get_absolute_limits(self, tool_radius=None, models=None):
+        lower = self.get_value("lower")
+        upper = self.get_value("upper")
+        if self.get_value("specification") == BoundsSpecification.MARGINS:
+            # choose the appropriate set of models
+            reference_models = self.get_value("reference_models")
+            if reference_models:
+                # configured models always take precedence
+                models = reference_models
+            elif models:
+                # use the supplied models (e.g. for toolpath calculation)
+                pass
+            else:
+                # use all visible models -> for live visualization
+                # TODO: filter for visible models
+                models = Model.get_collection()
+            model_box = pycam.Geometry.Model.get_combined_bounds([model.get_model()
+                                                                  for model in models])
+            if model_box is None:
+                # zero-sized models -> no action
+                return None
+            low, high = [], []
+            for model_lower, model_upper, margin_lower, margin_upper in zip(
+                    model_box.lower, model_box.upper, lower, upper):
+                dim = model_upper - model_lower
+                if margin_lower.is_relative:
+                    low.append(model_lower - margin_lower.value * dim)
+                else:
+                    low.append(model_lower - margin_lower.value)
+                if margin_upper.is_relative:
+                    high.append(model_upper + margin_upper.value * dim)
+                else:
+                    high.append(model_upper + margin_upper.value)
+        else:
+            # absolute boundary
+            low, high = [], []
+            for abs_lower, abs_upper in zip(lower, upper):
+                if abs_lower.is_relative:
+                    raise InvalidDataError("Relative (%) values not allowed for absolute boundary")
+                low.append(abs_lower.value)
+                if abs_upper.is_relative:
+                    raise InvalidDataError("Relative (%) values not allowed for absolute boundary")
+                high.append(abs_upper.value)
+        tool_limit = self.get_value("tool_boundary")
+        # apply inside/along/outside if a tool is given
+        if tool_radius and (tool_limit != ToolBoundaryMode.ALONG):
+            if tool_limit == ToolBoundaryMode.INSIDE:
+                offset = -tool_radius
+            else:
+                offset = tool_radius
+            # apply offset only for x and y
+            for index in range(2):
+                low[index] -= offset
+                high[index] += offset
+        return Box3D(Point3D(*low), Point3D(*high))
+
+    def validate(self):
+        self.get_absolute_limits()
+
+
+class Task(BaseCollectionItemDataContainer):
+
+    collection_name = CollectionName.TASKS
+    changed_event = "task-changed"
+    list_changed_event = "task-list-changed"
+    attribute_converters = {"process": _get_collection_resolver(CollectionName.PROCESSES),
+                            "bounds": _get_collection_resolver(CollectionName.BOUNDS),
+                            "tool": _get_collection_resolver(CollectionName.TOOLS),
+                            "type": _get_enum_resolver(TaskType),
+                            "collision_models": _get_collection_resolver(CollectionName.MODELS,
+                                                                         many=True)}
+
+    @CacheStorage({"process", "bounds", "tool", "type", "collision_models"})
+    @_set_parser_context("Task")
+    def generate_toolpath(self):
+        _log.debug("Generating toolpath for task {}".format(self.get_id()))
+        process = self.get_value("process")
+        bounds = self.get_value("bounds")
+        task_type = self.get_value("type")
+        if task_type == TaskType.MILLING:
+            tool = self.get_value("tool")
+            box = bounds.get_absolute_limits(tool_radius=tool.radius,
+                                             models=self.get_value("collision_models"))
+            path_generator = process.get_path_generator()
+            if path_generator is None:
+                # we assume that an error message was given already
+                return
+            models = [m.get_model() for m in self.get_value("collision_models")]
+            if not models:
+                # issue a warning - and go ahead ...
+                _log.warn("No collision model was selected. This can be intentional, but maybe "
+                          "you simply forgot it.")
+            motion_grid = process.get_motion_grid(tool.radius, box, recurse_immediately=True)
+            _log.debug("MotionGrid completed")
+            if motion_grid is None:
+                # we assume that an error message was given already
+                return
+            with ProgressContext("Calculating toolpath") as progress:
+                draw_callback = UpdateToolView(
+                    progress.update,
+                    max_fps=get_event_handler().get("tool_progress_max_fps", 1)).update
+                moves = path_generator.generate_toolpath(
+                    tool.get_tool_geometry(), models, motion_grid, minz=box.lower.z,
+                    maxz=box.upper.z, draw_callback=draw_callback)
+            if not moves:
+                _log.info("No valid moves found")
+                return None
+            return pycam.Toolpath.Toolpath(toolpath_path=moves, tool=tool,
+                                           toolpath_filters=tool.get_toolpath_filters())
+        else:
+            raise InvalidKeyError(task_type, TaskType)
+
+    def validate(self):
+        # We cannot call "get_toolpath" - this would be too expensive. Use its attribute accesses
+        # directly instead.
+        self.get_value("process")
+        self.get_value("bounds")
+        task_type = self.get_value("type")
+        if task_type != TaskType.MILLING:
+            raise InvalidKeyError(task_type, TaskType)
+
+
+class ToolpathTransformation(BaseDataContainer):
+
+    attribute_converters = {"action": _get_enum_resolver(ToolpathTransformationAction),
+                            # TODO: we should add and implement 'allow_percent=True' here
+                            "offset": _axes_values_converter,
+                            "clone_count": int,
+                            "lower": functools.partial(_axes_values_converter, allow_none=True),
+                            "upper": functools.partial(_axes_values_converter, allow_none=True),
+                            "shift_target": _get_enum_resolver(PositionShiftTarget),
+                            "axes": functools.partial(_axes_values_converter, allow_none=True),
+                            "models": _get_collection_resolver(CollectionName.MODELS, many=True)}
+
+    def get_transformed_toolpath(self, toolpath):
+        action = self.get_value("action")
+        if action == ToolpathTransformationAction.CROP:
+            return self._get_cropped_toolpath(toolpath)
+        elif action == ToolpathTransformationAction.CLONE:
+            return self._get_cloned_toolpath(toolpath)
+        elif action == ToolpathTransformationAction.SHIFT:
+            return self._get_shifted_toolpath(toolpath)
+        else:
+            raise InvalidKeyError(action, ToolpathTransformationAction)
+
+    @CacheStorage({"action", "offset", "clone_count"})
+    @_set_parser_context("Toolpath transformation 'clone'")
+    @_set_allowed_attributes({"action", "offset", "clone_count"})
+    def _get_cloned_toolpath(self, toolpath):
+        offset = self.get_value("offset")
+        clone_count = self.get_value("clone_count")
+        new_moves = list(toolpath.path)
+        for index in range(1, (clone_count + 1)):
+            shift_matrix = ((1, 0, 0, index * offset[0]),
+                            (0, 1, 0, index * offset[1]),
+                            (0, 0, 1, index * offset[2]))
+            shifted = toolpath | tp_filters.TransformPosition(shift_matrix)
+            new_moves.extend(shifted)
+        new_toolpath = toolpath.copy()
+        new_toolpath.path = new_moves
+        return new_toolpath
+
+    @CacheStorage({"action", "shift_target", "axes"})
+    @_set_parser_context("Model transformation 'shift'")
+    @_set_allowed_attributes({"action", "shift_target", "axes"})
+    def _get_shifted_toolpath(self, toolpath):
+        target = self.get_value("shift_target")
+        axes = self.get_value("axes")
+        offset = target._get_shift_offset(target, axes, toolpath)
+        shift_matrix = ((1, 0, 0, offset[0]),
+                        (0, 1, 0, offset[1]),
+                        (0, 0, 1, offset[2]))
+        new_toolpath = toolpath.copy()
+        new_toolpath.path = toolpath | tp_filters.TransformPosition(shift_matrix)
+        return new_toolpath
+
+    @CacheStorage({"action", "models"})
+    @_set_parser_context("Model transformation 'crop'")
+    @_set_allowed_attributes({"action", "models"})
+    def _get_cropped_toolpath(self, toolpath):
+        polygons = []
+        for model in [m.get_model() for m in self.get_value("models")]:
+            if hasattr(model, "get_polygons"):
+                polygons.extend(model.get_polygons())
+            else:
+                raise InvalidDataError("Toolpath Crop: 'models' may only contain 2D models")
+        # Store the new toolpath first separately - otherwise we can't
+        # revert the changes in case of an empty result.
+        new_moves = toolpath | tp_filters.Crop(polygons)
+        if new_moves | tp_filters.MovesOnly():
+            new_toolpath = toolpath.copy()
+            new_toolpath.path = new_moves
+            return new_toolpath
+        else:
+            _log.info("Toolpath cropping: the result is empty")
+            return None
+
+    def validate(self):
+        toolpath = pycam.Toolpath.Toolpath()
+        self.get_transformed_toolpath(toolpath)
+
+
+class Toolpath(BaseCollectionItemDataContainer):
+
+    collection_name = CollectionName.TOOLPATHS
+    changed_event = "toolpath-changed"
+    list_changed_event = "toolpath-list-changed"
+    attribute_converters = {"source": Source,
+                            "transformations": _get_list_resolver(ToolpathTransformation)}
+    attribute_defaults = {"transformations": []}
+
+    @CacheStorage({"source", "transformations"})
+    @_set_parser_context("Toolpath")
+    def get_toolpath(self):
+        _log.debug("Generating toolpath {}".format(self.get_id()))
+        task = self.get_value("source").get(CollectionName.TOOLPATHS)
+        toolpath = task.generate_toolpath()
+        for transformation in self.get_value("transformations"):
+            # the toolpath may be empty or invalidated by a transformation
+            if toolpath is not None:
+                toolpath = transformation.get_transformed_toolpath(toolpath)
+        return toolpath
+
+    def append_transformation(self, transform_dict):
+        current_transformations = self.get_value("transformations", raw=True)
+        current_transformations.append(copy.deepcopy(transform_dict))
+        # verify the result (bail out on error)
+        self.attribute_converters["transformations"](current_transformations)
+        # there was no problem - overwrite the previous transformations
+        self.set_value("transformations", current_transformations)
+
+    def validate(self):
+        self.get_toolpath()
+
+
+class ExportSettings(BaseCollectionItemDataContainer):
+
+    collection_name = CollectionName.EXPORT_SETTINGS
+    changed_event = "export-settings-changed"
+    list_changed_event = "export-settings-list-changed"
+
+    attribute_converters = {("gcode", ToolpathFilter.UNIT.value): _get_enum_resolver(LengthUnit)}
+    attribute_defaults = {("gcode", ToolpathFilter.UNIT.value): LengthUnit.METRIC_MM}
+
+    def get_settings_by_type(self, export_type):
+        return self.get_dict().get(export_type, {})
+
+    def set_settings_by_type(self, export_type, value):
+        return self.set_value(export_type, value)
+
+    @_set_parser_context("Export settings")
+    def get_toolpath_filters(self):
+        result = []
+        for text_name, parameters in self.get_settings_by_type("gcode").items():
+            filter_name = _get_enum_value(ToolpathFilter, text_name)
+            if filter_name == ToolpathFilter.SAFETY_HEIGHT:
+                result.append(tp_filters.SafetyHeight(float(parameters)))
+            elif filter_name == ToolpathFilter.PLUNGE_FEEDRATE:
+                result.append(tp_filters.PlungeFeedrate(float(parameters)))
+            elif filter_name == ToolpathFilter.STEP_WIDTH:
+                result.append(tp_filters.StepWidth({key: float(parameters[key]) for key in "xyz"}))
+            elif filter_name == ToolpathFilter.CORNER_STYLE:
+                mode = _get_enum_value(pycam.Toolpath.ToolpathPathMode, parameters["mode"])
+                motion_tolerance = parameters.get("motion_tolerance", 0)
+                naive_tolerance = parameters.get("naive_tolerance", 0)
+                result.append(tp_filters.CornerStyle(mode, motion_tolerance, naive_tolerance))
+            elif filter_name == ToolpathFilter.FILENAME_EXTENSION:
+                # this export setting is only used for filename dialogs
+                pass
+            elif filter_name == ToolpathFilter.UNIT:
+                unit = _get_enum_value(LengthUnit, parameters)
+                result.append(tp_filters.MachineSetting("unit", unit))
+            elif filter_name == ToolpathFilter.TOUCH_OFF:
+                # TODO: implement this (see pycam/Exporters/GCodeExporter.py)
+                pass
+            else:
+                raise InvalidKeyError(filter_name, ToolpathFilter)
+        return result
+
+    def validate(self):
+        self.get_toolpath_filters()
+
+
+class Target(BaseDataContainer):
+
+    attribute_converters = {"type": _get_enum_resolver(TargetType)}
+
+    @_set_parser_context("Export target")
+    def open(self, dry_run=False):
+        _log.debug("Opening target {}".format(self))
+        target_type = self.get_value("type")
+        if target_type == TargetType.FILE:
+            location = self.get_value("location")
+            if dry_run:
+                # run basic checks and raise errors in case of obvious problems
+                if not os.path.isdir(os.path.dirname(location)):
+                    raise LoadFileError("Directory of target ({}) does not exist"
+                                        .format(location))
+            else:
+                try:
+                    return open(location, "w")
+                except OSError as exc:
+                    raise LoadFileError(exc)
+        else:
+            raise InvalidKeyError(target_type, TargetType)
+
+    def validate(self):
+        self.open(dry_run=True)
+
+
+class Formatter(BaseDataContainer):
+
+    attribute_converters = {"type": _get_enum_resolver(FormatType),
+                            "filetype": _get_enum_resolver(FileType),
+                            "dialect": _get_enum_resolver(GCodeDialect),
+                            "export_settings": _get_collection_resolver(
+                                CollectionName.EXPORT_SETTINGS)}
+    attribute_defaults = {"dialect": GCodeDialect.LINUXCNC,
+                          "export_settings": None,
+                          "comment": ""}
+
+    @staticmethod
+    def _test_sources(items, test_function, message_template):
+        failing_items = [item for item in items if not test_function(item)]
+        if failing_items:
+            raise InvalidDataError(
+                message_template.format(" / ".join(get_type_name(item) for item in failing_items)))
+
+    @_set_parser_context("Export formatter: type selection")
+    def write_data(self, source, target):
+        _log.debug("Writing formatter data {}".format(self))
+        # we expect a tuple of items as input
+        if not isinstance(source, (list, tuple)):
+            raise InvalidDataError("Invalid source data type: {} (expected: list of items)"
+                                   .format(get_type_name(source)))
+        format_type = self.get_value("type")
+        if format_type == FormatType.GCODE:
+            self._test_sources(source, lambda item: isinstance(item, Toolpath),
+                               "Invalid source data type: {} (expected: list of toolpaths)")
+            return self._write_gcode(source, target)
+        elif format_type == FormatType.MODEL:
+            self._test_sources(source, lambda item: isinstance(item, Model),
+                               "Invalid source data type: {} (expected: list of models)")
+            self._test_sources(source, lambda item: item.get_model().is_export_supported(),
+                               "Sources lacking 'export' support: {}")
+            return self._write_model(source, target)
+        else:
+            raise InvalidKeyError(format_type, FormatType)
+
+    @_set_parser_context("Export formatter 'GCode'")
+    @_set_allowed_attributes({"type", "comment", "dialect", "export_settings"})
+    def _write_gcode(self, source, target):
+        comment = self.get_value("comment")
+        dialect = self.get_value("dialect")
+        if dialect == GCodeDialect.LINUXCNC:
+            generator = pycam.Exporters.GCode.LinuxCNC.LinuxCNC(target, comment=comment)
+        else:
+            raise InvalidKeyError(dialect, GCodeDialect)
+        export_settings = self.get_value("export_settings")
+        if export_settings:
+            generator.add_filters(export_settings.get_toolpath_filters())
+        for toolpath in source:
+            calculated = toolpath.get_toolpath()
+            # TODO: implement toolpath.get_meta_data()
+            generator.add_moves(calculated.path, calculated.filters)
+        generator.finish()
+        target.close()
+        return True
+
+    @_set_parser_context("Export formatter 'Model'")
+    @_set_allowed_attributes({"type", "filetype"})
+    def _write_model(self, source, target):
+        source = tuple(source)
+        if source:
+            export_name = " / ".join(item.get_id() for item in source)
+        else:
+            export_name = "unknown"
+        combined_model = pycam.Geometry.Model.get_combined_model(item.get_model()
+                                                                 for item in source)
+        filetype = self.get_value("filetype")
+        if filetype == FileType.STL:
+            from pycam.Exporters.STLExporter import STLExporter
+            self._test_sources(source, lambda item: hasattr(item.get_model(), "triangles"),
+                               "Models without triangles: {}")
+            exporter = STLExporter(combined_model, name=export_name)
+            exporter.write(target)
+            target.close()
+        else:
+            raise InvalidKeyError(filetype, FileType)
+
+    def validate(self):
+        self.write_data([], io.StringIO())
+
+
+class Export(BaseCollectionItemDataContainer):
+
+    collection_name = CollectionName.EXPORTS
+    attribute_converters = {"format": Formatter,
+                            "source": Source,
+                            "target": Target}
+
+    def run_export(self, dry_run=False):
+        _log.debug("Running export {}".format(self.get_id()))
+        formatter = self.get_value("format")
+        source = self.get_value("source").get(CollectionName.EXPORTS)
+        target = self.get_value("target")
+        if dry_run:
+            open_target = io.StringIO()
+        else:
+            open_target = target.open()
+        formatter.write_data(source, open_target)
+
+    def validate(self):
+        self.run_export(dry_run=True)
diff --git a/pyinstaller/hooks/hook-pycam.py b/pyinstaller/hooks/hook-pycam.py
index c6d579a..ce5c8fa 100644
--- a/pyinstaller/hooks/hook-pycam.py
+++ b/pyinstaller/hooks/hook-pycam.py
@@ -1,4 +1,3 @@
 # keysyms does not seem to be recognized by pyinstaller
 # There will be exceptions after any keypress without this line.
-# rsvg is required for SVG icons (dynamically loaded on demand)
-hiddenimports = ["gtk.keysyms", "rsvg"]
+hiddenimports = ["gtk.keysyms"]
diff --git a/pyinstaller/pycam.spec b/pyinstaller/pycam.spec
index ce7f35d..4ec594d 100644
--- a/pyinstaller/pycam.spec
+++ b/pyinstaller/pycam.spec
@@ -1,9 +1,5 @@
 # -*- mode: python -*-
 
-# for "print" to stderr
-from __future__ import print_function
-
-
 BASE_DIR = os.path.realpath(os.path.join(os.path.dirname(locals()["spec"]),
         os.path.pardir))
 
diff --git a/release_info.txt b/release_info.txt
index 4740d14..81567f5 100644
--- a/release_info.txt
+++ b/release_info.txt
@@ -39,3 +39,49 @@
  - create a new release tag for the bug tracker:
    https://sourceforge.net/tracker/admin/index.php?group_id=237831&atid=1104176&add_group=1
 
+
+# Version numbers
+
+If the user runs pycam out of a git working directory without
+taking any special action with respect to versioning,
+pycam determines the version dynamically each time it's
+invoked. The algorithm is at the top of pycam/__init__.py.
+
+When building Debian packages of pycam, the build system uses that code to
+produce pycam/Version.py, which just sets the VERSION variable according
+to the git working directory that the package was built from.
+
+Version numbers are determined like this:
+
+* Some commits correspond to actual releases, these are indicated by
+  special tags (like our "v0.5.1" tag, "v0.6.0", etc). The version
+  number of a commit with a release tag is just the release tag itself,
+  of course.
+
+* The version number of a commit without a release tag is constructed in a
+  "git describe"-like way: the most recent release tag, followed by the
+  number of commits since then, followed by the SHA of the current commit,
+  followed by "dirty" if there are uncommited, non-ignored changes in
+  the git working directory.
+
+However, there's a complication needed to handle multiple branches. The
+versioning code considers two kinds of branches:
+
+* Long-lived branches like master (for current development) and stable
+  release branches (we don't have any yet, but imagine a "v0" branch,
+  "v1", etc). These branches are where the release tags live. We
+  want un-tagged commits in these branches to have the simple kind of
+  version number described above (tag, commits since tag, SHA). Example:
+  v0.6.1.345.gabc123 ("345 commits after v0.6.1").
+
+* Short-lived temporary branches (for new features, bug fixes, etc). These
+  branches have more complicated version numbers. Version numbers here
+  should show which long-lived branch this temporary branch came from
+  (by having a version number from that long-lived branch), but should
+  be clearly differentiated from versions actually from that long-lived
+  branch, and should include the name of the short-lived branch. Example:
+  v0.6.1~deb.version.sumpfralle.86.g6789cc3 ("deb-version-sumpfralle
+  branch, 86 commits after v0.6.1"). The "~" tilde character there
+  is deliberate: it sorts as "older than" in Debian version numbers,
+  so debs from short-lived branches will not replace debs from stable
+  release branches by mistake.
diff --git a/requirements.txt b/requirements.txt
index ca70dd9..40887f4 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,4 +1,3 @@
-gtk
-gtk.gtkgl
-OpenGL
-enum34
+PyOpenGL
+PyYAML
+svg.path
diff --git a/samples/problem.conf b/samples/problem.conf
deleted file mode 100644
index 461de10..0000000
--- a/samples/problem.conf
+++ /dev/null
@@ -1,151 +0,0 @@
-[ProcessDefault]
-engrave_offset: 0.0
-pocketing_type: none
-
-[Process0]
-name: Remove material y
-path_strategy: PushRemoveStrategy
-path_direction: y
-milling_style: ignore
-material_allowance: 0.01
-overlap_percent: 25
-step_down: 0.12
-
-[Process1]
-name: Carve contour
-path_strategy: ContourPolygonStrategy
-path_direction: x
-milling_style: ignore
-material_allowance: 0.01
-overlap_percent: 40
-step_down: 1.0
-
-[Process2]
-name: Cleanup x
-path_strategy: SurfaceStrategy
-path_direction: x
-milling_style: ignore
-material_allowance: 0.0
-overlap_percent: 75
-step_down: 0.11811023622
-
-[Process3]
-name: cleanup y
-path_strategy: SurfaceStrategy
-path_direction: y
-milling_style: ignore
-material_allowance: 0.0
-overlap_percent: 75
-step_down: 0.11811023622
-
-[Process4]
-name: Gravure
-path_strategy: EngraveStrategy
-path_direction: x
-milling_style: conventional
-material_allowance: 0.0
-overlap_percent: 50
-step_down: 0.0393700787402
-
-[Tool0]
-name: Cylindrical
-shape: CylindricalCutter
-tool_radius: 0.0625
-torus_radius: 0.25
-feedrate: 60.0
-speed: 10000.0
-
-[Tool1]
-name: Toroidal
-shape: ToroidalCutter
-tool_radius: 0.062
-torus_radius: 0.02
-feedrate: 30.0
-speed: 1000.0
-
-[Tool2]
-name: Spherical
-shape: SphericalCutter
-tool_radius: 0.0625
-torus_radius: 0.00984251968504
-feedrate: 30.0
-speed: 1000.0
-
-[TaskDefault]
-tool: 0
-
-[Task0]
-name: Rough top
-process: 0
-bounds: 0
-enabled: 0
-
-[Task1]
-name: rough2 bottom
-process: 0
-bounds: 0
-enabled: 0
-
-[Task2]
-name: finish x top
-process: 2
-bounds: 0
-enabled: 0
-
-[Task3]
-name: finish x middle
-process: 2
-bounds: 0
-enabled: 0
-
-[Task4]
-name: finish x bottom
-process: 2
-bounds: 2
-enabled: 0
-
-[Task5]
-name: finish y top
-process: 3
-bounds: 0
-enabled: 0
-
-[Task6]
-name: finish y middle
-process: 3
-bounds: 0
-enabled: 0
-
-[Task7]
-name: finish y bottom
-process: 3
-bounds: 2
-enabled: 1
-
-[BoundsDefault]
-type: relative_margin
-z_high: 0.0
-
-[Bounds0]
-name: Minimum
-x_low: 0.0
-x_high: 0.0
-y_low: 0.0
-y_high: 0.0
-z_low: 0.0
-
-[Bounds1]
-name: 10% margin
-x_low: 0.1
-x_high: 0.1
-y_low: 0.1
-y_high: 0.1
-z_low: 0.05
-
-[Bounds2]
-name: problem
-x_low: -0.13
-x_high: -0.83
-y_low: -0.28
-y_high: -0.68
-z_low: 0.05
diff --git a/samples/simple-shapes.dxf b/samples/simple-shapes.dxf
new file mode 100644
index 0000000..7faa402
--- /dev/null
+++ b/samples/simple-shapes.dxf
@@ -0,0 +1,2836 @@
+999
+dxfrw 0.6.3
+  0
+SECTION
+  2
+HEADER
+  9
+$ACADVER
+  1
+AC1021
+  9
+$DWGCODEPAGE
+  3
+ANSI_1252
+  9
+$INSBASE
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$EXTMIN
+ 10
+-1.722074691379333
+ 20
+0
+ 30
+0
+  9
+$EXTMAX
+ 10
+200
+ 20
+147.2369667870751
+ 30
+0
+  9
+$LIMMIN
+ 10
+0
+ 20
+0
+  9
+$LIMMAX
+ 10
+420
+ 20
+297
+  9
+$ORTHOMODE
+ 70
+    0
+  9
+$REGENMODE
+ 70
+    1
+  9
+$FILLMODE
+ 70
+    1
+  9
+$QTEXTMODE
+ 70
+    0
+  9
+$MIRRTEXT
+ 70
+    0
+  9
+$LTSCALE
+ 40
+1
+  9
+$ATTMODE
+ 70
+    0
+  9
+$TEXTSIZE
+ 40
+2.5
+  9
+$TRACEWID
+ 40
+15.68
+  9
+$TEXTSTYLE
+  7
+STANDARD
+  9
+$CLAYER
+  8
+0
+  9
+$CELTYPE
+  6
+BYLAYER
+  9
+$CECOLOR
+ 62
+  256
+  9
+$CELTSCALE
+ 40
+1
+  9
+$DISPSILH
+ 70
+    0
+  9
+$DIMSCALE
+ 40
+2.5
+  9
+$DIMASZ
+ 40
+2.5
+  9
+$DIMEXO
+ 40
+0.625
+  9
+$DIMDLI
+ 40
+3.75
+  9
+$DIMRND
+ 40
+0
+  9
+$DIMDLE
+ 40
+0
+  9
+$DIMEXE
+ 40
+1.25
+  9
+$DIMTP
+ 40
+0
+  9
+$DIMTM
+ 40
+0
+  9
+$DIMTXT
+ 40
+2.5
+  9
+$DIMCEN
+ 40
+2.5
+  9
+$DIMTSZ
+ 40
+0
+  9
+$DIMTOL
+ 70
+    0
+  9
+$DIMLIM
+ 70
+    0
+  9
+$DIMTIH
+ 70
+    0
+  9
+$DIMTOH
+ 70
+    0
+  9
+$DIMSE1
+ 70
+    0
+  9
+$DIMSE2
+ 70
+    0
+  9
+$DIMTAD
+ 70
+    1
+  9
+$DIMZIN
+ 70
+    8
+  9
+$DIMBLK
+  1
+
+  9
+$DIMASO
+ 70
+    1
+  9
+$DIMSHO
+ 70
+    1
+  9
+$DIMPOST
+  1
+
+  9
+$DIMAPOST
+  1
+
+  9
+$DIMALT
+ 70
+    0
+  9
+$DIMALTD
+ 70
+    3
+  9
+$DIMALTF
+ 40
+0.03937
+  9
+$DIMLFAC
+ 40
+1
+  9
+$DIMTOFL
+ 70
+    1
+  9
+$DIMTVP
+ 40
+0
+  9
+$DIMTIX
+ 70
+    0
+  9
+$DIMSOXD
+ 70
+    0
+  9
+$DIMSAH
+ 70
+    0
+  9
+$DIMBLK1
+  1
+
+  9
+$DIMBLK2
+  1
+
+  9
+$DIMSTYLE
+  2
+STANDARD
+  9
+$DIMCLRD
+ 70
+    0
+  9
+$DIMCLRE
+ 70
+    0
+  9
+$DIMCLRT
+ 70
+    0
+  9
+$DIMTFAC
+ 40
+1
+  9
+$DIMGAP
+ 40
+0.625
+  9
+$DIMJUST
+ 70
+    0
+  9
+$DIMSD1
+ 70
+    0
+  9
+$DIMSD2
+ 70
+    0
+  9
+$DIMTOLJ
+ 70
+    0
+  9
+$DIMTZIN
+ 70
+    8
+  9
+$DIMALTZ
+ 70
+    0
+  9
+$DIMALTTZ
+ 70
+    0
+  9
+$DIMUPT
+ 70
+    0
+  9
+$DIMDEC
+ 70
+    2
+  9
+$DIMTDEC
+ 70
+    2
+  9
+$DIMALTU
+ 70
+    2
+  9
+$DIMALTTD
+ 70
+    3
+  9
+$DIMTXSTY
+  7
+STANDARD
+  9
+$DIMAUNIT
+ 70
+    0
+  9
+$DIMADEC
+ 70
+    0
+  9
+$DIMALTRND
+ 40
+0
+  9
+$DIMAZIN
+ 70
+    0
+  9
+$DIMDSEP
+ 70
+   44
+  9
+$DIMATFIT
+ 70
+    3
+  9
+$DIMFRAC
+ 70
+    0
+  9
+$DIMLDRBLK
+  1
+STANDARD
+  9
+$DIMLUNIT
+ 70
+    2
+  9
+$DIMLWD
+ 70
+   -2
+  9
+$DIMLWE
+ 70
+   -2
+  9
+$DIMTMOVE
+ 70
+    0
+  9
+$DIMFXL
+ 40
+1
+  9
+$DIMFXLON
+ 70
+    0
+  9
+$DIMJOGANG
+ 40
+0.7854
+  9
+$DIMTFILL
+ 70
+    0
+  9
+$DIMTFILLCLR
+ 70
+    0
+  9
+$DIMARCSYM
+ 70
+    0
+  9
+$DIMLTYPE
+  6
+
+  9
+$DIMLTEX1
+  6
+
+  9
+$DIMLTEX2
+  6
+
+  9
+$LUNITS
+ 70
+    2
+  9
+$LUPREC
+ 70
+    4
+  9
+$SKETCHINC
+ 40
+1
+  9
+$FILLETRAD
+ 40
+0
+  9
+$AUNITS
+ 70
+    0
+  9
+$AUPREC
+ 70
+    2
+  9
+$MENU
+  1
+.
+  9
+$ELEVATION
+ 40
+0
+  9
+$PELEVATION
+ 40
+0
+  9
+$THICKNESS
+ 40
+0
+  9
+$LIMCHECK
+ 70
+    0
+  9
+$CHAMFERA
+ 40
+0
+  9
+$CHAMFERB
+ 40
+0
+  9
+$CHAMFERC
+ 40
+0
+  9
+$CHAMFERD
+ 40
+0
+  9
+$SKPOLY
+ 70
+    0
+  9
+$USRTIMER
+ 70
+    1
+  9
+$ANGBASE
+ 50
+0
+  9
+$ANGDIR
+ 70
+    0
+  9
+$PDMODE
+ 70
+   34
+  9
+$PDSIZE
+ 40
+0
+  9
+$PLINEWID
+ 40
+0
+  9
+$SPLFRAME
+ 70
+    0
+  9
+$SPLINETYPE
+ 70
+    2
+  9
+$SPLINESEGS
+ 70
+    8
+  9
+$HANDSEED
+  5
+20000
+  9
+$SURFTAB1
+ 70
+    6
+  9
+$SURFTAB2
+ 70
+    6
+  9
+$SURFTYPE
+ 70
+    6
+  9
+$SURFU
+ 70
+    6
+  9
+$SURFV
+ 70
+    6
+  9
+$UCSBASE
+  2
+
+  9
+$UCSNAME
+  2
+
+  9
+$UCSORG
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$UCSXDIR
+ 10
+1
+ 20
+0
+ 30
+0
+  9
+$UCSYDIR
+ 10
+0
+ 20
+1
+ 30
+0
+  9
+$UCSORTHOREF
+  2
+
+  9
+$UCSORTHOVIEW
+ 70
+    0
+  9
+$UCSORGTOP
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$UCSORGBOTTOM
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$UCSORGLEFT
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$UCSORGRIGHT
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$UCSORGFRONT
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$UCSORGBACK
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$PUCSBASE
+  2
+
+  9
+$PUCSNAME
+  2
+
+  9
+$PUCSORG
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$PUCSXDIR
+ 10
+1
+ 20
+0
+ 30
+0
+  9
+$PUCSYDIR
+ 10
+0
+ 20
+1
+ 30
+0
+  9
+$PUCSORTHOREF
+  2
+
+  9
+$PUCSORTHOVIEW
+ 70
+    0
+  9
+$PUCSORGTOP
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$PUCSORGBOTTOM
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$PUCSORGLEFT
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$PUCSORGRIGHT
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$PUCSORGFRONT
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$PUCSORGBACK
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$USERI1
+ 70
+    0
+  9
+$USERI2
+ 70
+    0
+  9
+$USERI3
+ 70
+    0
+  9
+$USERI4
+ 70
+    0
+  9
+$USERI5
+ 70
+    0
+  9
+$USERR1
+ 40
+0
+  9
+$USERR2
+ 40
+0
+  9
+$USERR3
+ 40
+0
+  9
+$USERR4
+ 40
+0
+  9
+$USERR5
+ 40
+0
+  9
+$WORLDVIEW
+ 70
+    1
+  9
+$SHADEDGE
+ 70
+    3
+  9
+$SHADEDIF
+ 70
+   70
+  9
+$TILEMODE
+ 70
+    1
+  9
+$MAXACTVP
+ 70
+   64
+  9
+$PINSBASE
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$PLIMCHECK
+ 70
+    0
+  9
+$PEXTMIN
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$PEXTMAX
+ 10
+0
+ 20
+0
+ 30
+0
+  9
+$SNAPSTYLE
+ 70
+    0
+  9
+$PLIMMIN
+ 10
+0
+ 20
+0
+  9
+$PLIMMAX
+ 10
+210
+ 20
+297
+  9
+$UNITMODE
+ 70
+    0
+  9
+$VISRETAIN
+ 70
+    1
+  9
+$PLINEGEN
+ 70
+    0
+  9
+$PSLTSCALE
+ 70
+    1
+  9
+$TREEDEPTH
+ 70
+ 3020
+  9
+$CMLSTYLE
+  2
+Standard
+  9
+$CMLJUST
+ 70
+    0
+  9
+$CMLSCALE
+ 40
+20
+  9
+$PROXYGRAPHICS
+ 70
+    1
+  9
+$MEASUREMENT
+ 70
+    1
+  9
+$CELWEIGHT
+370
+   -1
+  9
+$ENDCAPS
+280
+    0
+  9
+$JOINSTYLE
+280
+    0
+  9
+$LWDISPLAY
+290
+    0
+  9
+$INSUNITS
+ 70
+    4
+  9
+$HYPERLINKBASE
+  1
+
+  9
+$STYLESHEET
+  1
+
+  9
+$XEDIT
+290
+    1
+  9
+$CEPSNTYPE
+380
+    0
+  9
+$PSTYLEMODE
+290
+    1
+  9
+$EXTNAMES
+290
+    1
+  9
+$PSVPSCALE
+ 40
+1
+  9
+$OLESTARTUP
+290
+    0
+  9
+$SORTENTS
+280
+  127
+  9
+$INDEXCTL
+280
+    0
+  9
+$HIDETEXT
+280
+    1
+  9
+$XCLIPFRAME
+290
+    0
+  9
+$HALOGAP
+280
+    0
+  9
+$OBSCOLOR
+ 70
+  257
+  9
+$OBSLTYPE
+280
+    0
+  9
+$INTERSECTIONDISPLAY
+280
+    0
+  9
+$INTERSECTIONCOLOR
+ 70
+  257
+  9
+$DIMASSOC
+280
+    1
+  9
+$PROJECTNAME
+  1
+
+  9
+$CAMERADISPLAY
+290
+    0
+  9
+$LENSLENGTH
+ 40
+50
+  9
+$CAMERAHEIGHT
+ 40
+0
+  9
+$STEPSPERSEC
+ 40
+2
+  9
+$STEPSIZE
+ 40
+50
+  9
+$3DDWFPREC
+ 40
+2
+  9
+$PSOLWIDTH
+ 40
+5
+  9
+$PSOLHEIGHT
+ 40
+80
+  9
+$LOFTANG1
+ 40
+1.570796326794897
+  9
+$LOFTANG2
+ 40
+1.570796326794897
+  9
+$LOFTMAG1
+ 40
+0
+  9
+$LOFTMAG2
+ 40
+0
+  9
+$LOFTPARAM
+ 70
+    7
+  9
+$LOFTNORMALS
+280
+    1
+  9
+$LATITUDE
+ 40
+1
+  9
+$LONGITUDE
+ 40
+1
+  9
+$NORTHDIRECTION
+ 40
+0
+  9
+$TIMEZONE
+ 70
+-8000
+  9
+$LIGHTGLYPHDISPLAY
+280
+    1
+  9
+$TILEMODELIGHTSYNCH
+280
+    1
+  9
+$SOLIDHIST
+280
+    1
+  9
+$SHOWHIST
+280
+    1
+  9
+$DWFFRAME
+280
+    2
+  9
+$DGNFRAME
+280
+    0
+  9
+$REALWORLDSCALE
+290
+    1
+  9
+$INTERFERECOLOR
+ 62
+    1
+  9
+$CSHADOW
+280
+    0
+  9
+$SHADOWPLANELOCATION
+ 40
+0
+  0
+ENDSEC
+  0
+SECTION
+  2
+CLASSES
+  0
+ENDSEC
+  0
+SECTION
+  2
+TABLES
+  0
+TABLE
+  2
+VPORT
+  5
+8
+330
+0
+100
+AcDbSymbolTable
+ 70
+    1
+  0
+VPORT
+  5
+31
+330
+2
+100
+AcDbSymbolTableRecord
+100
+AcDbViewportTableRecord
+  2
+*ACTIVE
+ 70
+    0
+ 10
+0
+ 20
+0
+ 11
+1
+ 21
+1
+ 12
+121
+ 22
+78.25
+ 13
+0
+ 23
+0
+ 14
+10
+ 24
+10
+ 15
+10
+ 25
+10
+ 16
+0
+ 26
+0
+ 36
+1
+ 17
+0
+ 27
+0
+ 37
+0
+ 40
+169
+ 41
+1.505917159763314
+ 42
+50
+ 43
+0
+ 44
+0
+ 50
+0
+ 51
+0
+ 71
+    0
+ 72
+  100
+ 73
+    1
+ 74
+    3
+ 75
+    0
+ 76
+    1
+ 77
+    0
+ 78
+    0
+281
+    0
+ 65
+    1
+110
+0
+120
+0
+130
+0
+111
+1
+121
+0
+131
+0
+112
+0
+122
+1
+132
+0
+ 79
+    0
+146
+0
+348
+10020
+ 60
+    7
+ 61
+    5
+292
+1
+282
+    1
+141
+0
+142
+0
+ 63
+  250
+421
+3358443
+  0
+ENDTAB
+  0
+TABLE
+  2
+LTYPE
+  5
+5
+330
+0
+100
+AcDbSymbolTable
+ 70
+    4
+  0
+LTYPE
+  5
+14
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+ByBlock
+ 70
+    0
+  3
+
+ 72
+   65
+ 73
+    0
+ 40
+0
+  0
+LTYPE
+  5
+15
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+ByLayer
+ 70
+    0
+  3
+
+ 72
+   65
+ 73
+    0
+ 40
+0
+  0
+LTYPE
+  5
+16
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+Continuous
+ 70
+    0
+  3
+Solid line
+ 72
+   65
+ 73
+    0
+ 40
+0
+  0
+LTYPE
+  5
+32
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DOT
+ 70
+    0
+  3
+Dot . . . . . . . . . . . . . . . . . . . . . .
+ 72
+   65
+ 73
+    2
+ 40
+6.35
+ 49
+0
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+  0
+LTYPE
+  5
+33
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DOTTINY
+ 70
+    0
+  3
+Dot (.15x) .....................................
+ 72
+   65
+ 73
+    2
+ 40
+0.9525
+ 49
+0
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+  0
+LTYPE
+  5
+34
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DOT2
+ 70
+    0
+  3
+Dot (.5x) .....................................
+ 72
+   65
+ 73
+    2
+ 40
+3.175
+ 49
+0
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+  0
+LTYPE
+  5
+35
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DOTX2
+ 70
+    0
+  3
+Dot (2x) .  .  .  .  .  .  .  .  .  .  .  .  .
+ 72
+   65
+ 73
+    2
+ 40
+12.7
+ 49
+0
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+  0
+LTYPE
+  5
+36
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DASHED
+ 70
+    0
+  3
+Dashed _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
+ 72
+   65
+ 73
+    2
+ 40
+19.05
+ 49
+12.7
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+  0
+LTYPE
+  5
+37
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DASHEDTINY
+ 70
+    0
+  3
+Dashed (.15x) _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
+ 72
+   65
+ 73
+    2
+ 40
+2.8575
+ 49
+1.905
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+  0
+LTYPE
+  5
+38
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DASHED2
+ 70
+    0
+  3
+Dashed (.5x) _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
+ 72
+   65
+ 73
+    2
+ 40
+9.524999999999999
+ 49
+6.35
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+  0
+LTYPE
+  5
+39
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DASHEDX2
+ 70
+    0
+  3
+Dashed (2x) ____  ____  ____  ____  ____  ___
+ 72
+   65
+ 73
+    2
+ 40
+38.09999999999999
+ 49
+25.4
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+  0
+LTYPE
+  5
+3A
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DASHDOT
+ 70
+    0
+  3
+Dash dot __ . __ . __ . __ . __ . __ . __ . __
+ 72
+   65
+ 73
+    4
+ 40
+25.4
+ 49
+12.7
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+  0
+LTYPE
+  5
+3B
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DASHDOTTINY
+ 70
+    0
+  3
+Dash dot (.15x) _._._._._._._._._._._._._._._.
+ 72
+   65
+ 73
+    4
+ 40
+3.81
+ 49
+1.905
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+  0
+LTYPE
+  5
+3C
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DASHDOT2
+ 70
+    0
+  3
+Dash dot (.5x) _._._._._._._._._._._._._._._.
+ 72
+   65
+ 73
+    4
+ 40
+12.7
+ 49
+6.35
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+  0
+LTYPE
+  5
+3D
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DASHDOTX2
+ 70
+    0
+  3
+Dash dot (2x) ____  .  ____  .  ____  .  ___
+ 72
+   65
+ 73
+    4
+ 40
+50.8
+ 49
+25.4
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+  0
+LTYPE
+  5
+3E
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DIVIDE
+ 70
+    0
+  3
+Divide ____ . . ____ . . ____ . . ____ . . ____
+ 72
+   65
+ 73
+    6
+ 40
+31.75
+ 49
+12.7
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+  0
+LTYPE
+  5
+3F
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DIVIDETINY
+ 70
+    0
+  3
+Divide (.15x) __..__..__..__..__..__..__..__.._
+ 72
+   65
+ 73
+    6
+ 40
+4.7625
+ 49
+1.905
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+  0
+LTYPE
+  5
+40
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DIVIDE2
+ 70
+    0
+  3
+Divide (.5x) __..__..__..__..__..__..__..__.._
+ 72
+   65
+ 73
+    6
+ 40
+15.875
+ 49
+6.35
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+  0
+LTYPE
+  5
+41
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+DIVIDEX2
+ 70
+    0
+  3
+Divide (2x) ________  .  .  ________  .  .  _
+ 72
+   65
+ 73
+    6
+ 40
+63.5
+ 49
+25.4
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+  0
+LTYPE
+  5
+42
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+BORDER
+ 70
+    0
+  3
+Border __ __ . __ __ . __ __ . __ __ . __ __ .
+ 72
+   65
+ 73
+    6
+ 40
+44.45
+ 49
+12.7
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+ 49
+12.7
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+  0
+LTYPE
+  5
+43
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+BORDERTINY
+ 70
+    0
+  3
+Border (.15x) __.__.__.__.__.__.__.__.__.__.__.
+ 72
+   65
+ 73
+    6
+ 40
+6.6675
+ 49
+1.905
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+ 49
+1.905
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+  0
+LTYPE
+  5
+44
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+BORDER2
+ 70
+    0
+  3
+Border (.5x) __.__.__.__.__.__.__.__.__.__.__.
+ 72
+   65
+ 73
+    6
+ 40
+22.225
+ 49
+6.35
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+ 49
+6.35
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+  0
+LTYPE
+  5
+45
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+BORDERX2
+ 70
+    0
+  3
+Border (2x) ____  ____  .  ____  ____  .  ___
+ 72
+   65
+ 73
+    6
+ 40
+88.89999999999999
+ 49
+25.4
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+ 49
+25.4
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+ 49
+0
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+  0
+LTYPE
+  5
+46
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+CENTER
+ 70
+    0
+  3
+Center ____ _ ____ _ ____ _ ____ _ ____ _ ____
+ 72
+   65
+ 73
+    4
+ 40
+50.8
+ 49
+31.75
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+ 49
+6.35
+ 74
+    0
+ 49
+-6.35
+ 74
+    0
+  0
+LTYPE
+  5
+47
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+CENTERTINY
+ 70
+    0
+  3
+Center (.15x) ___ _ ___ _ ___ _ ___ _ ___ _ ___
+ 72
+   65
+ 73
+    4
+ 40
+7.62
+ 49
+4.7625
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+ 49
+0.9525
+ 74
+    0
+ 49
+-0.9525
+ 74
+    0
+  0
+LTYPE
+  5
+48
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+CENTER2
+ 70
+    0
+  3
+Center (.5x) ___ _ ___ _ ___ _ ___ _ ___ _ ___
+ 72
+   65
+ 73
+    4
+ 40
+28.575
+ 49
+19.05
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+ 49
+3.175
+ 74
+    0
+ 49
+-3.175
+ 74
+    0
+  0
+LTYPE
+  5
+49
+330
+5
+100
+AcDbSymbolTableRecord
+100
+AcDbLinetypeTableRecord
+  2
+CENTERX2
+ 70
+    0
+  3
+Center (2x) ________  __  ________  __  _____
+ 72
+   65
+ 73
+    4
+ 40
+101.6
+ 49
+63.5
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+ 49
+12.7
+ 74
+    0
+ 49
+-12.7
+ 74
+    0
+  0
+ENDTAB
+  0
+TABLE
+  2
+LAYER
+  5
+2
+330
+0
+100
+AcDbSymbolTable
+ 70
+    1
+  0
+LAYER
+  5
+10
+330
+2
+100
+AcDbSymbolTableRecord
+100
+AcDbLayerTableRecord
+  2
+0
+ 70
+    0
+ 62
+    7
+  6
+CONTINUOUS
+370
+    0
+390
+F
+  0
+ENDTAB
+  0
+TABLE
+  2
+STYLE
+  5
+3
+330
+0
+100
+AcDbSymbolTable
+ 70
+    3
+  0
+STYLE
+  5
+4A
+330
+2
+100
+AcDbSymbolTableRecord
+100
+AcDbTextStyleTableRecord
+  2
+Standard
+ 70
+    0
+ 40
+0
+ 41
+1
+ 50
+0
+ 71
+    0
+ 42
+1
+  3
+txt
+  4
+
+  0
+ENDTAB
+  0
+TABLE
+  2
+VIEW
+  5
+6
+330
+0
+100
+AcDbSymbolTable
+ 70
+    0
+  0
+ENDTAB
+  0
+TABLE
+  2
+UCS
+  5
+7
+330
+0
+100
+AcDbSymbolTable
+ 70
+    0
+  0
+ENDTAB
+  0
+TABLE
+  2
+APPID
+  5
+9
+330
+0
+100
+AcDbSymbolTable
+ 70
+    1
+  0
+APPID
+  5
+12
+330
+9
+100
+AcDbSymbolTableRecord
+100
+AcDbRegAppTableRecord
+  2
+ACAD
+ 70
+    0
+  0
+APPID
+  5
+4B
+330
+9
+100
+AcDbSymbolTableRecord
+100
+AcDbRegAppTableRecord
+  2
+LibreCad
+ 70
+    0
+  0
+ENDTAB
+  0
+TABLE
+  2
+DIMSTYLE
+  5
+A
+330
+0
+100
+AcDbSymbolTable
+ 70
+    1
+100
+AcDbDimStyleTable
+ 71
+    1
+  0
+DIMSTYLE
+105
+4C
+330
+A
+100
+AcDbSymbolTableRecord
+100
+AcDbDimStyleTableRecord
+  2
+Standard
+ 70
+    0
+ 40
+1
+ 41
+2.5
+ 42
+0.625
+ 43
+0.38
+ 44
+1.25
+ 45
+0
+ 46
+0
+ 47
+0
+ 48
+0
+ 49
+1
+140
+2.5
+141
+0.09
+142
+2.5
+143
+25.4
+144
+1
+145
+0
+146
+1
+147
+0.625
+148
+0
+ 71
+    0
+ 72
+    0
+ 73
+    0
+ 74
+    1
+ 75
+    0
+ 76
+    0
+ 77
+    0
+ 78
+    1
+ 79
+    0
+170
+    0
+171
+    2
+172
+    0
+173
+    0
+174
+    0
+175
+    0
+176
+    0
+177
+    0
+178
+    0
+179
+    0
+271
+    2
+272
+    4
+273
+    2
+274
+    2
+275
+    0
+276
+    0
+277
+    2
+278
+    0
+279
+    0
+280
+    0
+281
+    0
+282
+    0
+283
+    1
+284
+    0
+285
+    0
+286
+    0
+288
+    0
+289
+    3
+340
+standard
+341
+
+371
+   -2
+372
+   -2
+  0
+ENDTAB
+  0
+TABLE
+  2
+BLOCK_RECORD
+  5
+1
+330
+0
+100
+AcDbSymbolTable
+ 70
+    2
+  0
+BLOCK_RECORD
+  5
+1F
+330
+1
+100
+AcDbSymbolTableRecord
+100
+AcDbBlockTableRecord
+  2
+*Model_Space
+ 70
+    0
+280
+    1
+281
+    0
+  0
+BLOCK_RECORD
+  5
+1E
+330
+1
+100
+AcDbSymbolTableRecord
+100
+AcDbBlockTableRecord
+  2
+*Paper_Space
+ 70
+    0
+280
+    1
+281
+    0
+  0
+ENDTAB
+  0
+ENDSEC
+  0
+SECTION
+  2
+BLOCKS
+  0
+BLOCK
+  5
+20
+330
+1F
+100
+AcDbEntity
+  8
+0
+100
+AcDbBlockBegin
+  2
+*Model_Space
+ 70
+    0
+ 10
+0
+ 20
+0
+ 30
+0
+  3
+*Model_Space
+  1
+
+  0
+ENDBLK
+  5
+21
+330
+1F
+100
+AcDbEntity
+  8
+0
+100
+AcDbBlockEnd
+  0
+BLOCK
+  5
+1C
+330
+1B
+100
+AcDbEntity
+  8
+0
+100
+AcDbBlockBegin
+  2
+*Paper_Space
+ 70
+    0
+ 10
+0
+ 20
+0
+ 30
+0
+  3
+*Paper_Space
+  1
+
+  0
+ENDBLK
+  5
+1D
+330
+1F
+100
+AcDbEntity
+  8
+0
+100
+AcDbBlockEnd
+  0
+ENDSEC
+  0
+SECTION
+  2
+ENTITIES
+  0
+ELLIPSE
+  5
+4D
+100
+AcDbEntity
+  8
+0
+  6
+ByLayer
+ 62
+  256
+370
+   -1
+100
+AcDbEllipse
+ 10
+50
+ 20
+110
+ 30
+0
+ 11
+50
+ 21
+-30
+ 31
+0
+ 40
+0.4411764705882353
+ 41
+0
+ 42
+6.283185307179586
+  0
+LWPOLYLINE
+  5
+4E
+100
+AcDbEntity
+  8
+0
+  6
+ByLayer
+ 62
+  256
+370
+   -1
+100
+AcDbPolyline
+ 90
+    5
+ 70
+    0
+ 43
+0
+ 10
+10
+ 20
+60
+ 10
+10
+ 20
+10
+ 10
+90
+ 20
+10
+ 10
+90
+ 20
+60
+ 10
+10
+ 20
+60
+  0
+LWPOLYLINE
+  5
+4F
+100
+AcDbEntity
+  8
+0
+  6
+ByLayer
+ 62
+  256
+370
+   -1
+100
+AcDbPolyline
+ 90
+    5
+ 70
+    0
+ 43
+0
+ 10
+130
+ 20
+110
+ 10
+200
+ 20
+80
+ 10
+200
+ 20
+50
+ 10
+160
+ 20
+30
+ 10
+130
+ 20
+110
+  0
+LWPOLYLINE
+  5
+50
+100
+AcDbEntity
+  8
+0
+  6
+ByLayer
+ 62
+  256
+370
+   -1
+100
+AcDbPolyline
+ 90
+    4
+ 70
+    0
+ 43
+0
+ 10
+110
+ 20
+70
+ 10
+100
+ 20
+0
+ 10
+160
+ 20
+-10
+ 10
+110
+ 20
+70
+  0
+ENDSEC
+  0
+SECTION
+  2
+OBJECTS
+  0
+DICTIONARY
+  5
+C
+330
+0
+100
+AcDbDictionary
+281
+    1
+  3
+ACAD_GROUP
+350
+D
+  0
+DICTIONARY
+  5
+D
+330
+C
+100
+AcDbDictionary
+281
+    1
+  0
+ENDSEC
+  0
+EOF
diff --git a/scripts/profile_pycam.py b/scripts/profile_pycam.py
index 7436f92..66f119c 100644
--- a/scripts/profile_pycam.py
+++ b/scripts/profile_pycam.py
@@ -7,7 +7,7 @@ from time import time
 from pycam.Cutters.CylindricalCutter import CylindricalCutter
 from pycam.Geometry import Box3D, Point3D
 from pycam.Gui.Console import ConsoleProgressBar
-from pycam.Importers.STLImporter import ImportModel
+from pycam.Importers.STLImporter import import_model
 from pycam.PathGenerators.DropCutter import DropCutter
 from pycam.PathProcessors.PathAccumulator import PathAccumulator
 from pycam.Toolpath import Bounds
@@ -22,7 +22,7 @@ threading.__multiprocessing = False
 (sorted by actual local runtime) methods.
 """
 
-model = ImportModel(get_data_file_location(join('samples', 'pycam-textbox.stl')))
+model = import_model(get_data_file_location(join('samples', 'pycam-textbox.stl')))
 
 
 def run_dropcutter():
diff --git a/scripts/pycam b/scripts/pycam
deleted file mode 100755
index 2f02c09..0000000
--- a/scripts/pycam
+++ /dev/null
@@ -1,731 +0,0 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
-"""
-
-Copyright 2010 Lars Kruse <devel@sumpfralle.de>
-Copyright 2008-2009 Lode Leroy
-
-This file is part of PyCAM.
-
-PyCAM is free software: you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation, either version 3 of the License, or
-(at your option) any later version.
-
-PyCAM is distributed in the hope that it will be useful,
-but WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
-"""
-
-# for "print" to stderr
-from __future__ import print_function
-
-import logging
-from optparse import OptionParser
-import os
-import socket
-import sys
-import time
-import warnings
-
-# we need the multiprocessing exception for remote connections
-try:
-    import multiprocessing
-    from multiprocessing import AuthenticationError
-except ImportError:
-    multiprocessing = None
-    # use an arbitrary other Exception
-    AuthenticationError = socket.error
-
-try:
-    from pycam import VERSION
-except ImportError:
-    # running locally (without a proper PYTHONPATH) requires manual intervention
-    sys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(__file__)),
-                                                     os.pardir)))
-    from pycam import VERSION
-
-from pycam import GenericError
-import pycam.Exporters.GCodeExporter
-from pycam.Geometry import Box3D, Point3D
-import pycam.Gui.common as GuiCommon
-import pycam.Gui.Settings
-import pycam.Gui.Console
-import pycam.Importers.TestModel
-import pycam.Importers
-import pycam.Plugins
-from pycam.Toolpath import Bounds, Toolpath
-import pycam.Utils
-from pycam.Utils.events import EventCore
-import pycam.Utils.log
-import pycam.Utils.threading
-
-# register the glut32.dll manually for the pyinstaller standalone executable
-if hasattr(sys, "frozen") and sys.frozen and "_MEIPASS2" in os.environ:
-    from ctypes import windll
-    windll[os.path.join(os.path.normpath(os.environ["_MEIPASS2"]), "glut32.dll")]
-
-# The installer for PyODE does not add the required PATH variable.
-if pycam.Utils.get_platform() == pycam.Utils.PLATFORM_WINDOWS:
-    os.environ["PATH"] = os.environ.get("PATH", "") + os.path.pathsep + sys.exec_prefix
-# The GtkGLExt installer does not add the required PATH variable.
-if pycam.Utils.get_platform() == pycam.Utils.PLATFORM_WINDOWS:
-    import _winreg
-    path = None
-    try:
-        reg = _winreg.ConnectRegistry(None, _winreg.HKEY_LOCAL_MACHINE)
-        regkey = _winreg.OpenKey(reg, r"SOFTWARE\GtkGLExt\1.0\Runtime")
-    except WindowsError:
-        regkey = None
-    index = 0
-    while regkey:
-        try:
-            key, value = _winreg.EnumValue(regkey, index)[:2]
-        except WindowsError:
-            # no more items left
-            break
-        if key == "Path":
-            path = os.path.join(str(value), "bin")
-            break
-        index += 1
-    if path:
-        os.environ["PATH"] = os.environ.get("PATH", "") + os.path.pathsep + path
-
-BASE_DIR = os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))
-
-EXAMPLE_MODEL_LOCATIONS = [
-    os.path.join(BASE_DIR, "samples"),
-    os.path.join(sys.prefix, "share", "pycam", "samples"),
-    os.path.join(sys.prefix, "local", "share", "pycam", "samples"),
-    os.path.join("usr", "share", "pycam", "samples")]
-
-# for pyinstaller (windows distribution)
-if "_MEIPASS2" in os.environ:
-    EXAMPLE_MODEL_LOCATIONS.insert(0, os.path.join(os.path.normpath(os.environ["_MEIPASS2"]),
-                                                   "samples"))
-DEFAULT_MODEL_FILE = "pycam-textbox.stl"
-# DEFAULT_MODEL_FILE = "problem_1_triangle.stl"
-EXIT_CODES = {"ok": 0,
-              "requirements": 1,
-              "load_model_failed": 2,
-              "write_output_failed": 3,
-              "parsing_failed": 4,
-              "server_without_password": 5,
-              "connection_error": 6,
-              "toolpath_error": 7}
-
-log = pycam.Utils.log.get_logger()
-
-
-def show_gui(inputfile=None, task_settings_file=None):
-    deps_gtk = GuiCommon.requirements_details_gtk()
-    report_gtk = GuiCommon.get_dependency_report(deps_gtk, prefix="\t")
-    if GuiCommon.check_dependencies(deps_gtk):
-        from pycam.Gui.Project import ProjectGui
-        gui_class = ProjectGui
-    else:
-        full_report = []
-        full_report.append("PyCAM dependency problem")
-        full_report.append("Error: Failed to load the GTK interface.")
-        full_report.append("Details:")
-        full_report.append(report_gtk)
-        full_report.append("")
-        full_report.append("Detailed list of requirements: %s" % GuiCommon.REQUIREMENTS_LINK)
-        log.critical(os.linesep.join(full_report))
-        return EXIT_CODES["requirements"]
-
-    event_manager = EventCore()
-    gui = gui_class(event_manager)
-    # initialize plugins
-    plugin_manager = pycam.Plugins.PluginManager(core=event_manager)
-    plugin_manager.import_plugins()
-    # some more initialization
-    gui.reset_preferences()
-    # TODO: preferences are not loaded until the new format is stable
-#   self.load_preferences()
-#   self.load_task_settings()
-
-    # load the given model or the default
-    if not inputfile:
-        default_model = get_default_model()
-        if hasattr(default_model, "split") or isinstance(default_model, pycam.Utils.URIHandler):
-            gui.load_model_file(filename=default_model, store_filename=False)
-        else:
-            gui.load_model(default_model)
-    else:
-        gui.load_model_file(filename=inputfile)
-
-    # load task settings file
-    if task_settings_file is not None:
-        gui.settings.get("open-task-settings-file-func")(task_settings_file)
-
-    # tell the GUI to empty the "undo" queue
-    gui.clear_undo_states()
-
-    event_manager.emit_event("notify-initialization-finished")
-
-    # open the GUI
-    gui.mainloop()
-    # no error -> return no error code
-    return None
-
-
-def get_default_model():
-    """ return a filename or a Model instance """
-    # try to load the default model file ("pycam" logo)
-    for inputdir in EXAMPLE_MODEL_LOCATIONS:
-        inputfile = os.path.join(inputdir, DEFAULT_MODEL_FILE)
-        if os.path.isfile(inputfile):
-            return inputfile
-    # fall back to the simple test model
-    log.warn("Failed to find the default model (%s) in the following locations: %s",
-             DEFAULT_MODEL_FILE, ", ".join(EXAMPLE_MODEL_LOCATIONS))
-    return pycam.Importers.TestModel.get_test_model()
-
-
-def load_model_file(filename, program_locations, unit=None):
-    uri = pycam.Utils.URIHandler(filename)
-    if uri.is_local():
-        uri = pycam.Utils.URIHandler(os.path.expanduser(str(filename)))
-    if not uri.exists():
-        log.warn("The input file ('%s') was not found!", uri)
-        return None
-    importer = pycam.Importers.detect_file_type(uri)[1]
-    model = importer(uri, program_locations=program_locations, unit=unit)
-    if not model:
-        log.warn("Failed to load the model file (%s).", uri)
-        return None
-    else:
-        return model
-
-
-def get_output_handler(destination):
-    if destination == "-":
-        handler = sys.stdout
-        closer = lambda: None
-    else:
-        # support paths with a tilde (~)
-        destination = os.path.expanduser(destination)
-        try:
-            handler = open(destination, "w")
-        except IOError as err_msg:
-            log.error("Failed to open output file (%s) for writing: %s", destination, err_msg)
-            return None, None
-        closer = handler.close
-    return (handler, closer)
-
-
-def execute(parser, opts, args, pycam):
-    # try to change the process name
-    pycam.Utils.setproctitle("pycam")
-
-    if len(args) > 0:
-        inputfile = pycam.Utils.URIHandler(args[0])
-    else:
-        inputfile = None
-
-    if opts.trace:
-        log.setLevel(logging.DEBUG / 2)
-    elif opts.debug:
-        log.setLevel(logging.DEBUG)
-    elif opts.quiet:
-        log.setLevel(logging.WARNING)
-        # disable the progress bar
-        opts.progress = "none"
-        # silence all warnings
-        warnings.filterwarnings("ignore")
-    else:
-        # silence gtk warnings
-        try:
-            import gtk
-            warnings.filterwarnings("ignore", category=gtk.Warning)
-        except ImportError:
-            pass
-
-    # show version and exit
-    if opts.show_version:
-        if opts.quiet:
-            # print only the bare version number
-            print(VERSION)
-        else:
-            text = '''PyCAM %s
-Copyright (C) 2008-2010 Lode Leroy
-Copyright (C) 2010-2011 Lars Kruse
-
-License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
-This is free software: you are free to change and redistribute it.
-There is NO WARRANTY, to the extent permitted by law.''' % VERSION
-            print(text)
-        return EXIT_CODES["ok"]
-
-    # check if server-auth-key is given -> this is mandatory for server mode
-    if (opts.enable_server or opts.start_server) and not opts.server_authkey:
-        parser.error(
-            "You need to supply a shared secret for server mode. This is supposed to prevent you "
-            "from exposing your host to remote access without authentication.\nPlease add the "
-            "'--server-auth-key' argument followed by a shared secret password.")
-        return EXIT_CODES["server_without_password"]
-
-    # initialize multiprocessing
-    try:
-        if opts.start_server:
-            pycam.Utils.threading.init_threading(
-                opts.parallel_processes, remote=opts.remote_server, run_server=True,
-                server_credentials=opts.server_authkey)
-            pycam.Utils.threading.cleanup()
-            return EXIT_CODES["ok"]
-        else:
-            pycam.Utils.threading.init_threading(
-                opts.parallel_processes, enable_server=opts.enable_server,
-                remote=opts.remote_server, server_credentials=opts.server_authkey)
-    except socket.error as err_msg:
-        log.error("Failed to connect to remote server: %s", err_msg)
-        return EXIT_CODES["connection_error"]
-    except AuthenticationError as err_msg:
-        log.error("The remote server rejected your authentication key: %s", err_msg)
-        return EXIT_CODES["connection_error"]
-
-    # initialize the progress bar
-    progress_styles = {"none": pycam.Gui.Console.ConsoleProgressBar.STYLE_NONE,
-                       "text": pycam.Gui.Console.ConsoleProgressBar.STYLE_TEXT,
-                       "bar": pycam.Gui.Console.ConsoleProgressBar.STYLE_BAR,
-                       "dot": pycam.Gui.Console.ConsoleProgressBar.STYLE_DOT}
-    progress_bar = pycam.Gui.Console.ConsoleProgressBar(sys.stdout, progress_styles[opts.progress])
-
-    if opts.config_file:
-        opts.config_file = os.path.expanduser(opts.config_file)
-
-    if not opts.export_gcode and not opts.export_task_config:
-        result = show_gui(inputfile, opts.config_file)
-        if result is not None:
-            # deliver the error code to our caller
-            return result
-    else:
-        # generate toolpath
-        tps = pycam.Gui.Settings.ToolpathSettings()
-        tool_shape = {
-            "cylindrical": "CylindricalCutter",
-            "spherical": "SphericalCutter",
-            "toroidal": "ToroidalCutter",
-        }[opts.tool_shape]
-        tps.set_tool(opts.tool_id, tool_shape, 0.5 * opts.tool_diameter,
-                     0.5 * opts.tool_torus_diameter, opts.tool_spindle_speed, opts.tool_feedrate)
-        if opts.support_type == "grid":
-            tps.set_support_grid(opts.support_grid_distance_x, opts.support_grid_distance_y,
-                                 opts.support_profile_thickness, opts.support_profile_height,
-                                 opts.support_grid_offset_x, opts.support_grid_offset_y)
-        elif opts.support_type in ("distributed-edges", "distributed-corners"):
-            start_at_corners = (opts.support_type == "distributed-corners")
-            tps.set_support_distributed(opts.support_distributed_distance,
-                                        opts.support_distributed_minimum,
-                                        opts.support_profile_thickness,
-                                        opts.support_profile_height,
-                                        opts.support_distributed_length,
-                                        start_at_corners=start_at_corners)
-        elif opts.support_type == "none":
-            pass
-        else:
-            raise NotImplementedError("Invalid support type specified: %s" % opts.support_type)
-        tps.set_unit_size(opts.unit_size)
-        path_generator, postprocessor = {
-            "layer": ("PushCutter", "SimpleCutter"),
-            "contour-follow": ("ContourFollow", "SimpleCutter"),
-            "contour-polygon": ("PushCutter", "ContourCutter"),
-            "surface": ("DropCutter", "PathAccumulator"),
-            "engrave": ("EngraveCutter", "SimpleCutter"),
-        }[opts.process_path_strategy]
-        tps.set_process_settings(
-            path_generator, postprocessor, opts.process_path_direction,
-            material_allowance=opts.process_material_allowance,
-            overlap_percent=opts.process_overlap_percent, step_down=opts.process_step_down,
-            engrave_offset=opts.process_engrave_offset, milling_style=opts.process_milling_style)
-        # set locations of external programs
-        program_locations = {}
-        if opts.external_program_inkscape:
-            program_locations["inkscape"] = opts.external_program_inkscape
-        if opts.external_program_pstoedit:
-            program_locations["pstoedit"] = opts.external_program_pstoedit
-        # load the model
-        if inputfile is None:
-            model = get_default_model()
-            # the "get_default_model" function returns a string or a model
-            if hasattr(model, "split"):
-                model = load_model_file(model, program_locations=program_locations,
-                                        unit=opts.unit_size)
-        else:
-            model = load_model_file(inputfile, program_locations=program_locations,
-                                    unit=opts.unit_size)
-        if not model:
-            # something went wrong - we quit
-            return EXIT_CODES["load_model_failed"]
-        # calculate the processing boundary
-        bounds = Bounds(Bounds.TYPE_CUSTOM)
-        bounds.set_reference(model.get_bounds())
-        # set the bounds type and let the default bounding box match the model
-        if opts.bounds_type == "relative-margin":
-            bounds.set_type(Bounds.TYPE_RELATIVE_MARGIN)
-            bounds_default_low = (0, 0, 0)
-            bounds_default_high = (0, 0, 0)
-        elif opts.bounds_type == "fixed-margin":
-            bounds.set_type(Bounds.TYPE_FIXED_MARGIN)
-            bounds_default_low = (0, 0, 0)
-            bounds_default_high = (0, 0, 0)
-        else:
-            # custom boundary setting
-            bounds.set_type(Bounds.TYPE_CUSTOM)
-            bounds_default_low = (model.minx, model.miny, model.minz)
-            bounds_default_high = (model.maxx, model.maxy, model.maxz)
-
-        # TODO: use the optparse conversion callback instead
-        def parse_triple_float(text):
-            nums = text.split(",")
-            if len(nums) != 3:
-                return None
-            result = []
-            for num in nums:
-                try:
-                    result.append(float(num))
-                except ValueError:
-                    if num == "":
-                        result.append(0.0)
-                    else:
-                        return None
-            return result
-
-        bounds_lower_nums = parse_triple_float(opts.bounds_lower)
-        if opts.bounds_lower and not bounds_lower_nums:
-            parser.error("Failed to parse the lower boundary limit: %s" % opts.bounds_lower)
-            return EXIT_CODES["parsing_failed"]
-        bounds_upper_nums = parse_triple_float(opts.bounds_upper)
-        if opts.bounds_upper and not bounds_upper_nums:
-            parser.error("Failed to parse the upper boundary limit: %s" % opts.bounds_upper)
-            return EXIT_CODES["parsing_failed"]
-        if bounds_lower_nums is None:
-            bounds_lower_nums = bounds_default_low
-        if bounds_upper_nums is None:
-            bounds_upper_nums = bounds_default_high
-        # both lower and upper bounds were specified
-        bounds.set_bounds(bounds_lower_nums, bounds_upper_nums)
-        # adjust the bounding box according to the "boundary_mode"
-        if opts.boundary_mode == "along":
-            offset = (0, 0, 0)
-        elif opts.boundary_mode == "inside":
-            offset = (-0.5 * opts.tool_diameter, -0.5 * opts.tool_diameter, 0)
-        else:
-            # "outside"
-            offset = (0.5 * opts.tool_diameter, 0.5 * opts.tool_diameter, 0)
-        process_bounds = Bounds(Bounds.TYPE_FIXED_MARGIN, Box3D(Point3D(*offset),
-                                                                Point3D(*offset)))
-        process_bounds.set_reference(bounds)
-        tps.set_bounds(process_bounds)
-        if opts.export_gcode:
-            # generate the toolpath
-            # TODO: convert to the new toolpath generator code
-            import pycam.Toolpath.Generator
-            start_time = time.time()
-            try:
-                toolpath = pycam.Toolpath.Generator.generate_toolpath_from_settings(
-                    model, tps, callback=progress_bar.update)
-            except GenericError as exc:
-                log.error("Failed to generate toolpath: %s", exc)
-                return EXIT_CODES["toolpath_error"]
-            finally:
-                progress_bar.finish()
-            log.info("Toolpath generation time: %f", time.time() - start_time)
-            description = "Toolpath generated via PyCAM v%s" % VERSION
-            tp_obj = Toolpath(toolpath, description, tps)
-            handler, closer = get_output_handler(opts.export_gcode)
-            if handler is None:
-                return EXIT_CODES["write_output_failed"]
-            generator = pycam.Exporters.GCodeExporter.GCodeGenerator(
-                handler, metric_units=(opts.unit_size == "mm"),
-                safety_height=opts.safety_height,
-                toggle_spindle_status=opts.gcode_no_start_stop_spindle,
-                minimum_steps=[opts.gcode_minimum_step])
-            generator.set_speed(opts.tool_feedrate, opts.tool_spindle_speed)
-            path_mode = opts.gcode_path_mode
-            PATH_MODES = pycam.Exporters.GCodeExporter.PATH_MODES
-            if (path_mode == "continuous") and (opts.gcode_motion_tolerance is not None):
-                if opts.gcode_naive_tolerance == 0:
-                    naive_tolerance = None
-                else:
-                    naive_tolerance = opts.gcode_naive_tolerance
-                generator.set_path_mode(PATH_MODES["continuous"], opts.gcode_motion_tolerance,
-                                        naive_tolerance)
-            else:
-                generator.set_path_mode(PATH_MODES[opts.gcode_path_mode])
-            generator.add_moves(tp_obj.get_moves(opts.safety_height),
-                                comment=tp_obj.get_meta_data())
-            generator.finish()
-            closer()
-        if opts.export_task_config:
-            handler, closer = get_output_handler(opts.export_task_config)
-            if handler is None:
-                return EXIT_CODES["write_output_failed"]
-            print(tps.get_string(), file=handler)
-            closer()
-    # no error -> don't return a specific exit code
-    return None
-
-
-# define the commandline interface
-if __name__ == "__main__":
-    # The PyInstaller standalone executable requires this "freeze_support" call. Otherwise we will
-    # see a warning regarding an invalid argument called "--multiprocessing-fork". This problem can
-    # be triggered on single-core systems with these arguments:
-    #    "--enable-server --server-auth-key foo".
-    if hasattr(multiprocessing, "freeze_support"):
-        multiprocessing.freeze_support()
-    parser = OptionParser(
-        prog="PyCAM", usage=("usage: pycam [options] [inputfile]\n\n"
-                             "Start the PyCAM toolpath generator. Supplying one of the "
-                             "'--export-?' parameters will cause PyCAM to start in batch mode. "
-                             "Most parameters are useful only for batch mode."),
-        epilog="PyCAM website: https://github.com/SebKuzminsky/pycam")
-    group_general = parser.add_option_group("General options")
-    group_export = parser.add_option_group(
-        "Export formats", ("Export the resulting toolpath or meta-data in various formats. These "
-                           "options trigger the non-interactive mode. Thus the GUI is disabled."))
-    group_tool = parser.add_option_group(
-        "Tool definition", ("Specify the tool parameters. The default tool is spherical and has a "
-                            "diameter of 1 unit. The default speeds are 1000 units/minute "
-                            "(feedrate) and 250 (spindle rotations per minute)"))
-    group_process = parser.add_option_group(
-        "Process definition", ("Specify the process parameters: toolpath strategy, layer height, "
-                               "and more. A typical roughing operation is configured by default."))
-    group_bounds = parser.add_option_group(
-        "Boundary definition", ("Specify the outer limits of the processing area (x/y/z). "
-                                "You may choose between 'relative_margin' (margin is given as "
-                                "percentage of the respective model dimension), 'fixed_margin' "
-                                "(margin for each face given in absolute units of length) and "
-                                "'custom' (absolute coordinates of the bounding box - regardless "
-                                "of the model size and position). Negative values are allowed and "
-                                "can make sense (e.g. negative margin)."))
-    group_support_structure = parser.add_option_group(
-        "Support structure", ("An optional support structure can be used to keep the object in "
-                              "place during the mill operation. The support structure can be "
-                              "removed manually afterwards. Various types of support structures "
-                              "are available. Support structures are disabled by default."))
-    group_gcode = parser.add_option_group(
-        "GCode settings", "Specify some details of the generated GCode.")
-    group_external_programs = parser.add_option_group(
-        "External programs", "Some optional external programs are used for format conversions.")
-    # general options
-    group_general.add_option(
-        "-c", "--config", dest="config_file", default=None, action="store", type="string",
-        help="load a task settings file")
-    group_general.add_option(
-        "", "--unit", dest="unit_size", default="mm", action="store", type="choice",
-        choices=["mm", "inch"],
-        help="choose 'mm' or 'inch' for all numbers. By default 'mm' is assumed.")
-    group_general.add_option(
-        "", "--collision-engine", dest="collision_engine", default="triangles", action="store",
-        type="choice", choices=["triangles"],
-        help=("choose a specific collision detection engine. The default is 'triangles'. "
-              "Use 'help' to get a list of possible engines."))
-    group_general.add_option(
-        "", "--boundary-mode", dest="boundary_mode", default="along", action="store",
-        type="choice", choices=["inside", "along", "outside"],
-        help=("specify if the mill tool (including its radius) should move completely 'inside', "
-              "'along' or 'outside' the defined processing boundary."))
-    group_general.add_option(
-        "", "--number-of-processes", dest="parallel_processes", default=None, type="int",
-        action="store",
-        help=("override the default detection of multiple CPU cores. Parallel processing only "
-              "works with Python 2.6 (or later) or with the additional 'multiprocessing' module."))
-    group_general.add_option(
-        "", "--enable-server", dest="enable_server", default=False, action="store_true",
-        help="enable a local server and (optionally) remote worker servers.")
-    group_general.add_option(
-        "", "--remote-server", dest="remote_server", default=None, action="store", type="string",
-        help=("Connect to a remote task server to distribute the processing load. "
-              "The server is given as an IP or a hostname with an optional port (default: 1250) "
-              "separated by a colon."))
-    group_general.add_option(
-        "", "--start-server-only", dest="start_server", default=False, action="store_true",
-        help="Start only a local server for handling remote requests.")
-    group_general.add_option(
-        "", "--server-auth-key", dest="server_authkey", default="", action="store", type="string",
-        help=("Secret used for connecting to a remote server or for granting access to remote "
-              "clients."))
-    group_general.add_option(
-        "-q", "--quiet", dest="quiet", default=False, action="store_true",
-        help="output only warnings and errors.")
-    group_general.add_option(
-        "-d", "--debug", dest="debug", default=False, action="store_true",
-        help="enable output of debug messages.")
-    group_general.add_option(
-        "", "--trace", dest="trace", default=False, action="store_true",
-        help="enable more verbose debug messages.")
-    group_general.add_option(
-        "", "--progress", dest="progress", default="text", action="store", type="choice",
-        choices=["none", "text", "bar", "dot"],
-        help=("specify the type of progress bar used in non-GUI mode. The following options are "
-              "available: text, none, bar, dot."))
-    group_general.add_option(
-        "", "--profiling", dest="profile_destination", action="store", type="string",
-        help="store profiling statistics in a file (only for debugging)")
-    group_general.add_option(
-        "-v", "--version", dest="show_version", default=False, action="store_true",
-        help="output the current version of PyCAM and exit")
-    # export options
-    group_export.add_option(
-        "", "--export-gcode", dest="export_gcode", default=None, action="store", type="string",
-        help="export the generated toolpaths to a file")
-    group_export.add_option(
-        "", "--export-task-config", dest="export_task_config", default=None, action="store",
-        type="string", help="export the current task configuration (mainly for debugging)")
-    # tool options
-    group_tool.add_option(
-        "", "--tool-shape", dest="tool_shape", default="cylindrical", action="store",
-        type="choice", choices=["cylindrical", "spherical", "toroidal"],
-        help="tool shape for the operation (cylindrical, spherical, toroidal)")
-    group_tool.add_option(
-        "", "--tool-size", dest="tool_diameter", default=1.0, action="store", type="float",
-        help="diameter of the tool")
-    group_tool.add_option(
-        "", "--tool-torus-size", dest="tool_torus_diameter", default=0.25, action="store",
-        type="float", help="torus diameter of the tool (only for toroidal tool shape)")
-    group_tool.add_option(
-        "", "--tool-feedrate", dest="tool_feedrate", default=1000, action="store", type="float",
-        help="allowed movement velocity of the tool (units/minute)")
-    group_tool.add_option(
-        "", "--tool-spindle-speed", dest="tool_spindle_speed", default=250, action="store",
-        type="float", help="rotation speed of the tool (per minute)")
-    group_tool.add_option(
-        "", "--tool-id", dest="tool_id", default=1, action="store", type="int",
-        help="tool ID - to be used for tool selection via GCode (default: 1)")
-    # process options
-    group_process.add_option(
-        "", "--process-path-direction", dest="process_path_direction", default="x", action="store",
-        type="choice", choices=["x", "y", "xy"],
-        help="primary direction of the generated toolpath (x/y/xy)")
-    group_process.add_option(
-        "", "--process-path-strategy", dest="process_path_strategy", default="surface",
-        action="store", type="choice",
-        choices=["layer", "contour-follow", "contour-polygon", "surface", "engrave"],
-        help=("one of the available toolpath strategies (layer, surface, contour-follow, "
-              "contour-polygon, engrave)"))
-    group_process.add_option(
-        "", "--process-material-allowance", dest="process_material_allowance", default=0.0,
-        action="store", type="float",
-        help="minimum distance between the tool and the object (for rough processing)")
-    group_process.add_option(
-        "", "--process-step-down", dest="process_step_down", default=3.0, action="store",
-        type="float",
-        help="the maximum thickness of each processed material layer (only for 'layer' strategy)")
-    group_process.add_option(
-        "", "--process-overlap-percent", dest="process_overlap_percent", default=0, action="store",
-        type="int",
-        help="how much should two adjacent parallel toolpaths overlap each other (0..99)")
-    group_process.add_option(
-        "", "--process-milling-style", dest="process_milling_style", default="ignore",
-        action="store", type="choice", choices=["ignore", "conventional", "climb"],
-        help="milling style (conventional / climb / ignore)")
-    group_process.add_option(
-        "", "--safety-height", dest="safety_height", default=25.0, action="store", type="float",
-        help="height for safe re-positioning moves")
-    group_process.add_option(
-        "", "--process-engrave-offset", dest="process_engrave_offset", default=0.0, action="store",
-        type="float", help=("engrave along the contour of a model with a given distance (only for "
-                            "'engrave' strategy)"))
-    # bounds settings
-    group_bounds.add_option(
-        "", "--bounds-type", dest="bounds_type", default="fixed-margin", action="store",
-        type="choice", choices=["relative-margin", "fixed-margin", "custom"],
-        help="type of the boundary definition (relative-margin, fixed-margin, custom)")
-    group_bounds.add_option(
-        "", "--bounds-lower", dest="bounds_lower", default="", action="store", type="string",
-        help="comma-separated x/y/z combination of the lower boundary (e.g. '4,4,-0.5')")
-    group_bounds.add_option(
-        "", "--bounds-upper", dest="bounds_upper", default="", action="store", type="string",
-        help="comma-separated x/y/z combination of the upper boundary (e.g. '12,5.5,0')")
-    # support grid settings
-    group_support_structure.add_option(
-        "", "--support-type", dest="support_type", default="none", type="choice", action="store",
-        choices=["none", "grid", "distributed-edges", "distributed-corners"],
-        help="type of the support structure (default: none)")
-    group_support_structure.add_option(
-        "", "--support-profile-height", dest="support_profile_height", default=2.0, action="store",
-        type="float", help="height of the support profile")
-    group_support_structure.add_option(
-        "", "--support-profile-thickness", dest="support_profile_thickness", default=0.5,
-        action="store", type="float", help="width of the support profile")
-    group_support_structure.add_option(
-        "", "--support-grid-distance-x", dest="support_grid_distance_x", default=10.0,
-        action="store", type="float",
-        help=("distance along the x-axis between two adjacent parallel lines of the support "
-              "structure (only for grid type)"))
-    group_support_structure.add_option(
-        "", "--support-grid-distance-y", dest="support_grid_distance_y", default=10.0,
-        action="store", type="float",
-        help=("distance along the y-axis between two adjacent parallel lines of the support "
-              "structure (only for grid type)"))
-    group_support_structure.add_option(
-        "", "--support-grid-offset-x", dest="support_grid_offset_x", default=0.0, action="store",
-        type="float", help="shift the support grid along the x axis")
-    group_support_structure.add_option(
-        "", "--support-grid-offset-y", dest="support_grid_offset_y", default=0.0, action="store",
-        type="float", help="shift the support grid along the y axis")
-    group_support_structure.add_option(
-        "", "--support-distributed-distance", dest="support_distributed_distance", default=30.0,
-        action="store", type="float", help="average distance between two adjacent support bridges")
-    group_support_structure.add_option(
-        "", "--support-distributed-minimum", dest="support_distributed_minimum", default=2,
-        action="store", type="int", help="minimum number of support bridges per polygon")
-    group_support_structure.add_option(
-        "", "--support-distributed-length", dest="support_distributed_length", default=5.0,
-        action="store", type="float", help="length of each support bridge")
-    # gcode options
-    group_gcode.add_option(
-        "", "--gcode-no-start-stop-spindle", dest="gcode_no_start_stop_spindle", default=True,
-        action="store_false",
-        help="do not start the spindle before and stop it after each operation (M3/M5)")
-    group_gcode.add_option(
-        "", "--gcode-minimum-step", dest="gcode_minimum_step", default=0.00001, type="float",
-        action="store", help=("minimum axial distance between two machine positions. Any shorter "
-                              "move is not written to GCode (default: 0.00001)."))
-    group_gcode.add_option(
-        "", "--gcode-path-mode", dest="gcode_path_mode", default="exact_path", action="store",
-        type="choice", choices=["exact_path", "exact_stop", "continuous"],
-        help=("choose the GCode path mode from 'exact_path', 'exact_stop' and 'continuous'. "
-              "Use '--gcode-motion-tolerance' and and '--gcode-naive-tolerance' if you want to "
-              "limit the deviation. See http://linuxcnc.org/docs/html/gcode_main.html (G61) for "
-              "details."))
-    group_gcode.add_option(
-        "", "--gcode-motion-tolerance", dest="gcode_motion_tolerance", default=None,
-        action="store", help="the optional motion tolerance for 'continuous' path mode (G64).")
-    group_gcode.add_option(
-        "", "--gcode-naive-tolerance", dest="gcode_naive_tolerance", default=None, action="store",
-        help="the optional naive CAM tolerance for 'continuous' path mode (G64).")
-    # external program settings
-    group_external_programs.add_option(
-        "", "--location-inkscape", dest="external_program_inkscape", default="", action="store",
-        type="string", help=("location of the Inkscape executable. This program is required for "
-                             "importing SVG files."))
-    group_external_programs.add_option(
-        "", "--location-pstoedit", dest="external_program_pstoedit", default="", action="store",
-        type="string", help=("location of the PStoEdit executable. This program is required for "
-                             "importing SVG files."))
-    (opts, args) = parser.parse_args()
-    try:
-        if opts.profile_destination:
-            import cProfile
-            exit_code = cProfile.run('execute(parser, opts, args, pycam)',
-                                     opts.profile_destination)
-        else:
-            # We need to add the parameter "pycam" to avoid weeeeird namespace
-            # issues. Any idea how to fix this?
-            exit_code = execute(parser, opts, args, pycam)
-    except KeyboardInterrupt:
-        log.info("Quit requested")
-        exit_code = None
-    pycam.Utils.threading.cleanup()
-    if exit_code is not None:
-        sys.exit(exit_code)
-    else:
-        sys.exit(EXIT_CODES["ok"])
diff --git a/scripts/pycam_win32_postinstall.py b/scripts/pycam_win32_postinstall.py
index 8c81ef8..608e69c 100644
--- a/scripts/pycam_win32_postinstall.py
+++ b/scripts/pycam_win32_postinstall.py
@@ -1,4 +1,3 @@
-# -*- coding: utf-8 -*-
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 
diff --git a/scripts/pylint.sh b/scripts/pylint.sh
index 87f8627..a2ea6a4 100755
--- a/scripts/pylint.sh
+++ b/scripts/pylint.sh
@@ -4,9 +4,8 @@ set -eu
 
 BASE_PATH="$(cd "$(dirname "$0")"; pwd)"
 
-IGNORE_LIST="C0111,C0103,W0613,R0914,R0911,R0912,W0511,W0603,,R0902,W0612,R0903,R0201,R0915,R0913,W0602"
-# more extras
-IGNORE_LIST="$IGNORE_LIST,C0301"
+IGNORE_LIST="C0103,C0111,C0301"
+IGNORE_LIST="$IGNORE_LIST,W0511,W0602,W0603,W0612,W0613"
+IGNORE_LIST="$IGNORE_LIST,R0201,R0902,R0903,R0911,R0912,R0913,R0914,R0915"
 
 PYTHONPATH="$BASE_PATH/pycam" pylint -i y -d "$IGNORE_LIST" "$1"
-
diff --git a/scripts/run_flake8 b/scripts/run_flake8
index e1f2716..e770ffc 100755
--- a/scripts/run_flake8
+++ b/scripts/run_flake8
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 """
 This script is just a wrapper around different versions of flake8.
 It can be removed as soon as "python -m flake8" works across all common distributions.
diff --git a/scripts/travis-install-build-deps.sh b/scripts/travis-install-build-deps.sh
index 965beab..3664bf4 100755
--- a/scripts/travis-install-build-deps.sh
+++ b/scripts/travis-install-build-deps.sh
@@ -1,4 +1,13 @@
 #!/bin/sh -e
 sudo apt-get update -qq
-sudo apt-get install -y devscripts equivs build-essential --no-install-recommends
-mk-build-deps -i -r -s sudo -t 'apt-get --yes --no-install-recommends --no-install-suggests'
+sudo apt-get install -y --no-install-recommends \
+    build-essential \
+    devscripts \
+    equivs \
+    gir1.2-gtk-3.0 \
+    python3-flake8 \
+    python3-gi \
+    python3-setuptools \
+    python3-yaml
+mk-build-deps -i -r -s sudo \
+	-t 'apt-get --yes --no-install-recommends --no-install-suggests'
diff --git a/setup.cfg b/setup.cfg
index 085b4de..15433f3 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -21,4 +21,5 @@ max-line-length = 99
 # custom additions:
 #   E731: sometimes we like lambda
 #   E741: tolerate short names
-ignore = E121,E123,E126,E226,E24,E704,W503,W504,E731,E741
+#   N806: TODO: fix these non-standard naming exceptions
+ignore = E121,E123,E126,E226,E24,E704,W503,W504,E731,E741,N806
diff --git a/setup.py b/setup.py
index d0f93e9..e61cfaa 100755
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,4 @@
-#!/usr/bin/env python
-# -*- coding: utf-8 -*-
+#!/usr/bin/env python3
 """
 Copyright 2010 Lars Kruse <devel@sumpfralle.de>
 Copyright 2010 Arthur Magill
@@ -20,34 +19,14 @@ You should have received a copy of the GNU General Public License
 along with PyCAM.  If not, see <http://www.gnu.org/licenses/>.
 """
 
-try:
-    from setuptools import setup
-except ImportError:
-    from distutils.core import setup
-
 import glob
 import os.path
-import sys
-import shutil
+from setuptools import setup, find_packages
 
 from pycam import VERSION
 
 BASE_DIR = os.path.realpath(os.path.abspath(os.path.dirname(__file__)))
 
-WINDOWS_START_SCRIPT = os.path.join("scripts", "pycam-loader.py")
-DEFAULT_START_SCRIPT = os.path.join("scripts", "pycam")
-
-# we don't want to include the windows postinstall script in other installers
-is_windows_installer = "bdist_wininst" in sys.argv or "bdist_msi" in sys.argv
-
-if is_windows_installer:
-    shutil.copy2(os.path.join(BASE_DIR, DEFAULT_START_SCRIPT),
-                 os.path.join(BASE_DIR, WINDOWS_START_SCRIPT))
-    PLATFORM_SCRIPTS = [WINDOWS_START_SCRIPT,
-                        os.path.join("scripts", "pycam_win32_postinstall.py")]
-else:
-    PLATFORM_SCRIPTS = [DEFAULT_START_SCRIPT]
-
 
 setup(
     name="pycam",
@@ -57,21 +36,21 @@ setup(
     author="Lars Kruse",
     author_email="devel@sumpfralle.de",
     provides=["pycam"],
-    requires=["gtk", "gtk.gtkgl", "OpenGL", "enum34"],
+    requires=["PyOpenGL", "PyYAML"],
     url="http://pycam.sourceforge.net/",
     download_url="http://sourceforge.net/projects/pycam/files",
     keywords=["3-axis", "cnc", "cam", "toolpath", "machining", "g-code"],
     long_description="""IMPORTANT NOTE: Please read the list of requirements:
 http://pycam.sourceforge.net/requirements
-Basically you will need Python, GTK and OpenGL.
+Basically you will need Python3, GTK and OpenGL.
 
-Windows: select Python 2.5 in the following dialog.
+Windows: select Python 3.X in the following dialog.
 """,
     # full list of classifiers at:
     #   http://pypi.python.org/pypi?:action=list_classifiers
     classifiers=[
         "Programming Language :: Python",
-        "Programming Language :: Python :: 2",
+        "Programming Language :: Python :: 3",
         "Development Status :: 4 - Beta",
         "License :: OSI Approved :: GNU General Public License (GPL)",
         "Topic :: Scientific/Engineering",
@@ -82,26 +61,18 @@ Windows: select Python 2.5 in the following dialog.
         "Operating System :: MacOS :: MacOS X",
         "Operating System :: POSIX",
     ],
-    packages=[
-        "pycam",
-        "pycam.Cutters",
-        "pycam.Exporters",
-        "pycam.Exporters.GCode",
-        "pycam.Geometry",
-        "pycam.Gui",
-        "pycam.Importers",
-        "pycam.PathGenerators",
-        "pycam.PathProcessors",
-        "pycam.Physics",
-        "pycam.Plugins",
-        "pycam.Simulation",
-        "pycam.Toolpath",
-        "pycam.Utils",
-    ],
-    scripts=PLATFORM_SCRIPTS,
+    packages=find_packages(exclude=["pycam.Test"]),
+    entry_points={
+        "gui_scripts": [
+            "pycam = pycam.run_gui:main_func",
+        ],
+        "console_scripts": [
+            "pycam-cli = pycam.run_cli:main_func",
+        ],
+    },
     data_files=[
         ("share/pycam/doc", ["COPYING.TXT",
-                             "INSTALL.TXT",
+                             "INSTALL.md",
                              "LICENSE.TXT",
                              "README.md",
                              "Changelog",
@@ -114,7 +85,4 @@ Windows: select Python 2.5 in the following dialog.
     ],
 )
 
-if is_windows_installer:
-    os.remove(os.path.join(BASE_DIR, WINDOWS_START_SCRIPT))
-
 # vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
diff --git a/share/ui/bounds.ui b/share/ui/bounds.ui
index 24d863a..9c4e12d 100644
--- a/share/ui/bounds.ui
+++ b/share/ui/bounds.ui
@@ -1,7 +1,43 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="BoundaryHighXValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="BoundaryHighYValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="BoundaryHighZValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="BoundaryLowXValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="BoundaryLowYValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="BoundaryLowZValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkListStore" id="BoundsList">
+    <columns>
+      <!-- column-name uuid -->
+      <column type="gchararray"/>
+    </columns>
+  </object>
   <object class="GtkListStore" id="RelativeUnitModel">
     <columns>
       <!-- column-name name -->
@@ -33,56 +69,19 @@
       </row>
     </data>
   </object>
-  <object class="GtkAdjustment" id="BoundaryLowXValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="BoundaryLowYValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="BoundaryLowZValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="BoundaryHighXValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="BoundaryHighYValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="BoundaryHighZValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkListStore" id="BoundsList">
-    <columns>
-      <!-- column-name uuid -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkVPaned" id="BoundsBox">
+  <object class="GtkPaned" id="BoundsBox">
     <property name="visible">True</property>
     <property name="can_focus">True</property>
     <property name="orientation">vertical</property>
     <child>
-      <object class="GtkHBox" id="hbox21">
+      <object class="GtkBox" id="box21">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">2</property>
         <child>
           <object class="GtkScrolledWindow" id="scrolledwindow7">
             <property name="visible">True</property>
             <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">automatic</property>
-            <property name="vscrollbar_policy">automatic</property>
             <property name="shadow_type">etched-in</property>
             <child>
               <object class="GtkTreeView" id="BoundsTable">
@@ -91,6 +90,9 @@
                 <property name="model">BoundsList</property>
                 <property name="headers_clickable">False</property>
                 <property name="search_column">0</property>
+                <child internal-child="selection">
+                  <object class="GtkTreeSelection" id="treeview-selection1"/>
+                </child>
                 <child>
                   <object class="GtkTreeViewColumn" id="NameColumn">
                     <property name="title">Name</property>
@@ -115,16 +117,20 @@
             </child>
           </object>
           <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkVBox" id="vbox22">
+          <object class="GtkBox" id="box22">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <child>
-              <object class="GtkVButtonBox" id="vbuttonbox3">
+              <object class="GtkButtonBox" id="buttonbox3">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="layout_style">center</property>
                 <child>
@@ -185,12 +191,15 @@
                 </child>
               </object>
               <packing>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkVButtonBox" id="vbuttonbox7">
+              <object class="GtkButtonBox" id="buttonbox7">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="layout_style">end</property>
                 <child>
@@ -212,12 +221,14 @@
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
@@ -228,36 +239,43 @@
       </packing>
     </child>
     <child>
-      <object class="GtkVBox" id="BoundsSettingsControlsBox">
+      <object class="GtkBox" id="BoundsSettingsControlsBox">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">3</property>
         <child>
-          <object class="GtkVBox" id="vbox11">
+          <object class="GtkBox" id="vbox11">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <property name="spacing">3</property>
             <child>
-              <object class="GtkHBox" id="hbox23">
+              <object class="GtkBox" id="hbox23">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="spacing">3</property>
                 <child>
-                  <object class="GtkVBox" id="vbox1">
+                  <object class="GtkBox" id="vbox1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <property name="spacing">3</property>
                     <child>
                       <object class="GtkFrame" id="frame1">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="label_xalign">0</property>
                         <property name="shadow_type">none</property>
                         <child>
                           <object class="GtkAlignment" id="alignment1">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="left_padding">12</property>
                             <child>
-                              <object class="GtkVButtonBox" id="vbuttonbox1">
+                              <object class="GtkButtonBox" id="vbuttonbox1">
                                 <property name="visible">True</property>
+                                <property name="can_focus">False</property>
                                 <property name="orientation">vertical</property>
                                 <property name="layout_style">start</property>
                                 <child>
@@ -266,6 +284,7 @@
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
                                     <property name="receives_default">False</property>
+                                    <property name="xalign">0.5</property>
                                     <property name="active">True</property>
                                     <property name="draw_indicator">True</property>
                                   </object>
@@ -281,6 +300,7 @@
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
                                     <property name="receives_default">False</property>
+                                    <property name="xalign">0.5</property>
                                     <property name="draw_indicator">True</property>
                                     <property name="group">TypeRelativeMargin</property>
                                   </object>
@@ -297,36 +317,45 @@
                         <child type="label">
                           <object class="GtkLabel" id="label1">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">&lt;b&gt;Type&lt;/b&gt;</property>
                             <property name="use_markup">True</property>
                           </object>
                         </child>
                       </object>
                       <packing>
+                        <property name="expand">True</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHSeparator" id="hseparator1">
+                      <object class="GtkSeparator" id="hseparator1">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="orientation">vertical</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkFrame" id="frame2">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="label_xalign">0</property>
                         <property name="shadow_type">none</property>
                         <child>
                           <object class="GtkAlignment" id="alignment2">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="left_padding">12</property>
                             <child>
                               <object class="GtkComboBox" id="ToolLimit">
                                 <property name="visible">True</property>
+                                <property name="can_focus">False</property>
                                 <property name="model">ToolLimitModeList</property>
                                 <property name="active">0</property>
                                 <child>
@@ -342,224 +371,189 @@
                         <child type="label">
                           <object class="GtkLabel" id="label2">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">&lt;b&gt;Tool move limit&lt;/b&gt;</property>
                             <property name="use_markup">True</property>
                           </object>
                         </child>
                       </object>
                       <packing>
+                        <property name="expand">True</property>
+                        <property name="fill">True</property>
                         <property name="position">2</property>
                       </packing>
                     </child>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkVSeparator" id="vseparator11">
+                  <object class="GtkSeparator" id="vseparator11">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkTable" id="table2">
+                  <object class="GtkGrid" id="table2">
                     <property name="visible">True</property>
-                    <property name="n_rows">4</property>
-                    <property name="n_columns">4</property>
-                    <property name="column_spacing">3</property>
+                    <property name="can_focus">False</property>
                     <property name="row_spacing">3</property>
+                    <property name="column_spacing">3</property>
                     <child>
                       <object class="GtkSpinButton" id="BoundaryLowX">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="width_chars">6</property>
                         <property name="adjustment">BoundaryLowXValue</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
                         <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="BoundaryHighY">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="width_chars">6</property>
                         <property name="adjustment">BoundaryHighYValue</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="left_attach">2</property>
-                        <property name="right_attach">3</property>
                         <property name="top_attach">2</property>
-                        <property name="bottom_attach">3</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="BoundaryLowZ">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="width_chars">6</property>
                         <property name="adjustment">BoundaryLowZValue</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
                         <property name="top_attach">3</property>
-                        <property name="bottom_attach">4</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="BoundaryHighZ">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="width_chars">6</property>
                         <property name="adjustment">BoundaryHighZValue</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="left_attach">2</property>
-                        <property name="right_attach">3</property>
                         <property name="top_attach">3</property>
-                        <property name="bottom_attach">4</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="BoundaryLowY">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="width_chars">6</property>
                         <property name="adjustment">BoundaryLowYValue</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
                         <property name="top_attach">2</property>
-                        <property name="bottom_attach">3</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="BoundaryHighX">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="width_chars">6</property>
                         <property name="adjustment">BoundaryHighXValue</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="left_attach">2</property>
-                        <property name="right_attach">3</property>
                         <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="z label">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">z:</property>
                         <property name="width_chars">2</property>
                       </object>
                       <packing>
+                        <property name="left_attach">0</property>
                         <property name="top_attach">3</property>
-                        <property name="bottom_attach">4</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="y label">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">y:</property>
                         <property name="width_chars">2</property>
                       </object>
                       <packing>
+                        <property name="left_attach">0</property>
                         <property name="top_attach">2</property>
-                        <property name="bottom_attach">3</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="max label">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">upper</property>
                       </object>
                       <packing>
                         <property name="left_attach">2</property>
-                        <property name="right_attach">3</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
+                        <property name="top_attach">0</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="x label">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">x:</property>
                         <property name="width_chars">2</property>
                       </object>
                       <packing>
+                        <property name="left_attach">0</property>
                         <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="min label">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">lower</property>
                       </object>
                       <packing>
                         <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkAlignment" id="alignment34">
-                        <property name="visible">True</property>
-                        <child>
-                          <placeholder/>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
+                        <property name="top_attach">0</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkComboBox" id="RelativeUnit">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="model">RelativeUnitModel</property>
                         <child>
                           <object class="GtkCellRendererText" id="cellrenderertext1">
@@ -572,12 +566,13 @@
                       </object>
                       <packing>
                         <property name="left_attach">3</property>
-                        <property name="right_attach">4</property>
+                        <property name="top_attach">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHBox" id="MarginControlsX">
+                      <object class="GtkBox" id="MarginControlsX">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="spacing">3</property>
                         <property name="homogeneous">True</property>
                         <child>
@@ -588,6 +583,8 @@
                             <property name="receives_default">True</property>
                           </object>
                           <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
                             <property name="position">0</property>
                           </packing>
                         </child>
@@ -599,6 +596,8 @@
                             <property name="receives_default">True</property>
                           </object>
                           <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
                             <property name="position">1</property>
                           </packing>
                         </child>
@@ -610,20 +609,21 @@
                             <property name="receives_default">True</property>
                           </object>
                           <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
                             <property name="position">2</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
                         <property name="left_attach">3</property>
-                        <property name="right_attach">4</property>
                         <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHBox" id="MarginControlsY">
+                      <object class="GtkBox" id="MarginControlsY">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="spacing">3</property>
                         <property name="homogeneous">True</property>
                         <child>
@@ -634,6 +634,8 @@
                             <property name="receives_default">True</property>
                           </object>
                           <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
                             <property name="position">0</property>
                           </packing>
                         </child>
@@ -645,6 +647,8 @@
                             <property name="receives_default">True</property>
                           </object>
                           <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
                             <property name="position">1</property>
                           </packing>
                         </child>
@@ -656,20 +660,21 @@
                             <property name="receives_default">True</property>
                           </object>
                           <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
                             <property name="position">2</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
                         <property name="left_attach">3</property>
-                        <property name="right_attach">4</property>
                         <property name="top_attach">2</property>
-                        <property name="bottom_attach">3</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHBox" id="MarginControlsZ">
+                      <object class="GtkBox" id="MarginControlsZ">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="spacing">3</property>
                         <property name="homogeneous">True</property>
                         <child>
@@ -680,6 +685,8 @@
                             <property name="receives_default">True</property>
                           </object>
                           <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
                             <property name="position">0</property>
                           </packing>
                         </child>
@@ -691,6 +698,8 @@
                             <property name="receives_default">True</property>
                           </object>
                           <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
                             <property name="position">1</property>
                           </packing>
                         </child>
@@ -702,56 +711,68 @@
                             <property name="receives_default">True</property>
                           </object>
                           <packing>
+                            <property name="expand">True</property>
+                            <property name="fill">True</property>
                             <property name="position">2</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
                         <property name="left_attach">3</property>
-                        <property name="right_attach">4</property>
                         <property name="top_attach">3</property>
-                        <property name="bottom_attach">4</property>
                       </packing>
                     </child>
+                    <child>
+                      <placeholder/>
+                    </child>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">2</property>
                   </packing>
                 </child>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
               <object class="GtkFrame" id="ModelsTableFrame">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label_xalign">0</property>
                 <property name="shadow_type">none</property>
                 <child>
                   <object class="GtkViewport" id="viewport1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="resize_mode">queue</property>
                     <property name="shadow_type">etched-in</property>
                     <child>
-                      <object class="GtkHBox" id="hbox5">
+                      <object class="GtkBox" id="hbox5">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="spacing">3</property>
                         <child>
-                          <object class="GtkVBox" id="vbox2">
+                          <object class="GtkBox" id="vbox2">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="orientation">vertical</property>
                             <child>
-                              <object class="GtkVBox" id="ModelsViewPort">
+                              <object class="GtkBox" id="ModelsViewPort">
                                 <property name="visible">True</property>
+                                <property name="can_focus">False</property>
                                 <property name="orientation">vertical</property>
                                 <child>
                                   <placeholder/>
                                 </child>
                               </object>
                               <packing>
+                                <property name="expand">True</property>
+                                <property name="fill">True</property>
                                 <property name="padding">3</property>
                                 <property name="position">0</property>
                               </packing>
@@ -759,13 +780,14 @@
                             <child>
                               <object class="GtkLabel" id="label4">
                                 <property name="visible">True</property>
-                                <property name="xalign">0</property>
-                                <property name="yalign">0</property>
+                                <property name="can_focus">False</property>
                                 <property name="xpad">3</property>
                                 <property name="ypad">3</property>
                                 <property name="label" translatable="yes">Do not select a model if you want to use all models involved in this task.</property>
                                 <property name="wrap">True</property>
                                 <property name="width_chars">21</property>
+                                <property name="xalign">0</property>
+                                <property name="yalign">0</property>
                               </object>
                               <packing>
                                 <property name="expand">False</property>
@@ -784,16 +806,18 @@
                         <child>
                           <object class="GtkLabel" id="MarginTypeRelativeLabel">
                             <property name="visible">True</property>
-                            <property name="xalign">0</property>
+                            <property name="can_focus">False</property>
                             <property name="xpad">3</property>
                             <property name="ypad">3</property>
                             <property name="label" translatable="yes">&lt;i&gt;Relative margins are given in percent respectively mm/inch relative to the size of the selected models. Positive values create a margin around the model. Negative values create a bounding box that is smaller than the models.&lt;/i&gt;</property>
                             <property name="use_markup">True</property>
                             <property name="wrap">True</property>
                             <property name="width_chars">30</property>
+                            <property name="xalign">0</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">1</property>
                           </packing>
                         </child>
@@ -804,6 +828,7 @@
                 <child type="label">
                   <object class="GtkLabel" id="label3">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">&lt;b&gt;Referenced Models&lt;/b&gt;</property>
                     <property name="use_markup">True</property>
                   </object>
@@ -811,26 +836,31 @@
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
             <child>
               <object class="GtkLabel" id="MarginTypeCustomLabel">
                 <property name="visible">True</property>
-                <property name="xalign">0</property>
+                <property name="can_focus">False</property>
                 <property name="xpad">3</property>
                 <property name="ypad">3</property>
                 <property name="label" translatable="yes">&lt;i&gt;These values are absolute coordinates of the processing bounding box. They do not depend on any model.&lt;/i&gt;</property>
                 <property name="use_markup">True</property>
                 <property name="wrap">True</property>
+                <property name="xalign">0</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">2</property>
               </packing>
             </child>
           </object>
           <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
diff --git a/share/ui/clipboard.ui b/share/ui/clipboard.ui
index 94c26f8..3065ea1 100644
--- a/share/ui/clipboard.ui
+++ b/share/ui/clipboard.ui
@@ -1,17 +1,17 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkAction" id="PasteModelFromClipboard">
-    <property name="label">_Paste</property>
-    <property name="short_label">_Paste</property>
-    <property name="tooltip">Paste a model from clipboard</property>
-    <property name="stock_id">gtk-paste</property>
-  </object>
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkAction" id="CopyModelToClipboard">
     <property name="label">_Copy</property>
     <property name="short_label">_Copy</property>
     <property name="tooltip">Copy model to clipboard</property>
     <property name="stock_id">gtk-copy</property>
   </object>
+  <object class="GtkAction" id="PasteModelFromClipboard">
+    <property name="label">_Paste</property>
+    <property name="short_label">_Paste</property>
+    <property name="tooltip">Paste a model from clipboard</property>
+    <property name="stock_id">gtk-paste</property>
+  </object>
 </interface>
diff --git a/share/ui/emc_tool_export.ui b/share/ui/emc_tool_export.ui
index 58e7f2b..d985729 100644
--- a/share/ui/emc_tool_export.ui
+++ b/share/ui/emc_tool_export.ui
@@ -1,7 +1,7 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkAction" id="ExportLinuxCNCToolDefinition">
     <property name="label">_Export tools for LinuxCNC ...</property>
     <property name="short_label">_Export tools for LinuxCNC ...</property>
diff --git a/share/ui/export_settings.ui b/share/ui/export_settings.ui
new file mode 100644
index 0000000..0d52c3a
--- /dev/null
+++ b/share/ui/export_settings.ui
@@ -0,0 +1,155 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
+<interface>
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkListStore" id="ExportSettingListModel">
+    <columns>
+      <!-- column-name ref -->
+      <column type="gchararray"/>
+    </columns>
+  </object>
+  <object class="GtkPaned" id="ExportSettingsBox">
+    <property name="visible">True</property>
+    <property name="can_focus">True</property>
+    <property name="orientation">vertical</property>
+    <child>
+      <object class="GtkBox" id="ExportSettingsList">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="spacing">5</property>
+        <child>
+          <object class="GtkScrolledWindow" id="ExportSettingScrolledWindow">
+            <property name="visible">True</property>
+            <property name="can_focus">True</property>
+            <property name="shadow_type">etched-in</property>
+            <child>
+              <object class="GtkTreeView" id="ExportSettingTable">
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="model">ExportSettingListModel</property>
+                <property name="headers_clickable">False</property>
+                <property name="search_column">0</property>
+                <child internal-child="selection">
+                  <object class="GtkTreeSelection" id="ExportSettingsTreeviewSelection"/>
+                </child>
+                <child>
+                  <object class="GtkTreeViewColumn" id="ExportSettingNameColumn">
+                    <property name="title">Name</property>
+                    <child>
+                      <object class="GtkCellRendererText" id="ExportSettingNameCell">
+                        <property name="editable">True</property>
+                      </object>
+                    </child>
+                  </object>
+                </child>
+              </object>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkButtonBox" id="ExportSettingsListButtonBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="orientation">vertical</property>
+            <property name="layout_style">center</property>
+            <child>
+              <object class="GtkButton" id="ExportSettingNew">
+                <property name="label">gtk-new</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="ExportSettingDelete">
+                <property name="label">gtk-delete</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="ExportSettingDeleteAll">
+                <property name="label">gtk-clear</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">2</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="ExportSettingMoveUp">
+                <property name="label">gtk-go-up</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">3</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="ExportSettingMoveDown">
+                <property name="label">gtk-go-down</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">4</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+      </object>
+      <packing>
+        <property name="resize">True</property>
+        <property name="shrink">False</property>
+      </packing>
+    </child>
+    <child>
+      <object class="GtkNotebook" id="ExportSettingHandlingNotebook">
+        <property name="visible">True</property>
+        <property name="can_focus">True</property>
+        <property name="tab_pos">left</property>
+      </object>
+      <packing>
+        <property name="resize">False</property>
+        <property name="shrink">False</property>
+      </packing>
+    </child>
+  </object>
+</interface>
diff --git a/share/ui/fonts.ui b/share/ui/fonts.ui
index 1648227..d901457 100644
--- a/share/ui/fonts.ui
+++ b/share/ui/fonts.ui
@@ -1,8 +1,25 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="FontCharacterSpacingValue">
+    <property name="lower">-1</property>
+    <property name="upper">5</property>
+    <property name="step_increment">0.10000000000000001</property>
+  </object>
+  <object class="GtkTextBuffer" id="FontDialogInputBuffer"/>
+  <object class="GtkAdjustment" id="FontLineSpacingValue">
+    <property name="lower">-1</property>
+    <property name="upper">5</property>
+    <property name="step_increment">0.10000000000000001</property>
+  </object>
+  <object class="GtkAdjustment" id="FontSideSkewValue">
+    <property name="lower">-100</property>
+    <property name="upper">100</property>
+    <property name="step_increment">5</property>
+  </object>
   <object class="GtkDialog" id="FontDialog">
+    <property name="can_focus">False</property>
     <property name="border_width">5</property>
     <property name="title" translatable="yes">Engrave text</property>
     <property name="role">pycam-fonts</property>
@@ -11,16 +28,86 @@
     <property name="icon_name">accessories-character-map</property>
     <property name="type_hint">dialog</property>
     <child internal-child="vbox">
-      <object class="GtkVBox" id="dialog-vbox8">
+      <object class="GtkBox" id="dialog-box8">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">4</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="dialog-action_area7">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
+            <child>
+              <object class="GtkButton" id="FontDialogCancel">
+                <property name="label">gtk-cancel</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="FontDialogCopy">
+                <property name="label">gtk-copy</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="FontDialogSave">
+                <property name="label">Save as SVG</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">2</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="FontDialogApply">
+                <property name="label">gtk-apply</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">3</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">11</property>
+          </packing>
+        </child>
         <child>
           <object class="GtkLabel" id="FontDialogProperties">
             <property name="visible">True</property>
-            <property name="xalign">0</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">&lt;b&gt;Font properties:&lt;/b&gt;</property>
             <property name="use_markup">True</property>
+            <property name="xalign">0</property>
           </object>
           <packing>
             <property name="expand">False</property>
@@ -29,54 +116,57 @@
           </packing>
         </child>
         <child>
-          <object class="GtkHBox" id="FontSelectionBox">
+          <object class="GtkBox" id="FontSelectionBox">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <child>
               <placeholder/>
             </child>
             <child>
-              <object class="GtkTable" id="table6">
+              <object class="GtkGrid" id="table6">
                 <property name="visible">True</property>
-                <property name="n_rows">2</property>
-                <property name="n_columns">3</property>
+                <property name="can_focus">False</property>
                 <property name="column_spacing">3</property>
-                <property name="homogeneous">True</property>
                 <child>
-                  <object class="GtkHScale" id="FontSideShift">
+                  <object class="GtkScale" id="FontSideShift">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="update_policy">delayed</property>
                     <property name="adjustment">FontSideSkewValue</property>
                     <property name="round_digits">0</property>
                     <property name="digits">0</property>
                     <property name="value_pos">bottom</property>
                   </object>
                   <packing>
+                    <property name="left_attach">0</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="FontSideSkewLabel">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Horiz. skew</property>
                   </object>
+                  <packing>
+                    <property name="left_attach">0</property>
+                    <property name="top_attach">0</property>
+                  </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="FontLineSpacingLabel">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Line spacing</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
+                    <property name="top_attach">0</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkHScale" id="FontLineSpacing">
+                  <object class="GtkScale" id="FontLineSpacing">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="update_policy">delayed</property>
                     <property name="adjustment">FontLineSpacingValue</property>
                     <property name="round_digits">2</property>
                     <property name="digits">2</property>
@@ -84,26 +174,24 @@
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="FontCharacterSpacingLabel">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Pitch</property>
                   </object>
                   <packing>
                     <property name="left_attach">2</property>
-                    <property name="right_attach">3</property>
+                    <property name="top_attach">0</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkHScale" id="FontCharacterSpacing">
+                  <object class="GtkScale" id="FontCharacterSpacing">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="update_policy">delayed</property>
                     <property name="adjustment">FontCharacterSpacingValue</property>
                     <property name="round_digits">2</property>
                     <property name="digits">2</property>
@@ -111,13 +199,13 @@
                   </object>
                   <packing>
                     <property name="left_attach">2</property>
-                    <property name="right_attach">3</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
                   </packing>
                 </child>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="pack_type">end</property>
                 <property name="position">1</property>
               </packing>
@@ -125,28 +213,33 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
         <child>
-          <object class="GtkHBox" id="hbox33">
+          <object class="GtkBox" id="hbox33">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="spacing">3</property>
             <child>
               <object class="GtkLabel" id="FontAuthorLabel">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">Font author:</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
               <object class="GtkLabel" id="FontAuthorText">
                 <property name="visible">True</property>
-                <property name="xalign">0</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">FontAuthor</property>
+                <property name="xalign">0</property>
               </object>
               <packing>
                 <property name="expand">False</property>
@@ -163,18 +256,20 @@
           </packing>
         </child>
         <child>
-          <object class="GtkHBox" id="hbox8">
+          <object class="GtkBox" id="hbox8">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <child>
               <object class="GtkLabel" id="FontDedicationQCAD">
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="xalign">0</property>
                 <property name="label" translatable="yes">Thanks to the</property>
                 <property name="use_markup">True</property>
+                <property name="xalign">0</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
@@ -189,6 +284,7 @@
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
@@ -196,30 +292,34 @@
               <object class="GtkLabel" id="FontDedicationQCADSuffix">
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="xalign">0</property>
                 <property name="label" translatable="yes">for these single-line fonts!</property>
                 <property name="use_markup">True</property>
+                <property name="xalign">0</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">2</property>
               </packing>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">3</property>
           </packing>
         </child>
         <child>
-          <object class="GtkHBox" id="hbox28">
+          <object class="GtkBox" id="box28">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="spacing">3</property>
             <child>
               <object class="GtkLabel" id="FontExamplesLinkLabel">
                 <property name="visible">True</property>
-                <property name="xalign">0</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">Rendered overview of all fonts:</property>
+                <property name="xalign">0</property>
               </object>
               <packing>
                 <property name="expand">False</property>
@@ -251,8 +351,9 @@
           </packing>
         </child>
         <child>
-          <object class="GtkHSeparator" id="hseparator5">
+          <object class="GtkSeparator" id="hseparator5">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
           </object>
           <packing>
             <property name="expand">False</property>
@@ -261,14 +362,16 @@
           </packing>
         </child>
         <child>
-          <object class="GtkHBox" id="hbox35">
+          <object class="GtkBox" id="box35">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <child>
               <object class="GtkLabel" id="FontDialogInputLabel">
                 <property name="visible">True</property>
-                <property name="xalign">0</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Text:&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
+                <property name="xalign">0</property>
               </object>
               <packing>
                 <property name="expand">False</property>
@@ -277,8 +380,9 @@
               </packing>
             </child>
             <child>
-              <object class="GtkHButtonBox" id="hbuttonbox3">
+              <object class="GtkButtonBox" id="buttonbox3">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <child>
                   <object class="GtkRadioButton" id="FontTextAlignLeft">
                     <property name="label">gtk-justify-left</property>
@@ -286,6 +390,7 @@
                     <property name="can_focus">True</property>
                     <property name="receives_default">False</property>
                     <property name="use_stock">True</property>
+                    <property name="xalign">0.5</property>
                     <property name="active">True</property>
                     <property name="draw_indicator">True</property>
                   </object>
@@ -302,6 +407,7 @@
                     <property name="can_focus">True</property>
                     <property name="receives_default">False</property>
                     <property name="use_stock">True</property>
+                    <property name="xalign">0.5</property>
                     <property name="draw_indicator">True</property>
                     <property name="group">FontTextAlignLeft</property>
                   </object>
@@ -318,6 +424,7 @@
                     <property name="can_focus">True</property>
                     <property name="receives_default">False</property>
                     <property name="use_stock">True</property>
+                    <property name="xalign">0.5</property>
                     <property name="draw_indicator">True</property>
                     <property name="group">FontTextAlignLeft</property>
                   </object>
@@ -338,12 +445,14 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">6</property>
           </packing>
         </child>
         <child>
           <object class="GtkViewport" id="FontDialogInputViewPort">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="resize_mode">queue</property>
             <child>
               <object class="GtkTextView" id="FontDialogInput">
@@ -363,8 +472,9 @@
           </packing>
         </child>
         <child>
-          <object class="GtkHSeparator" id="hseparator14">
+          <object class="GtkSeparator" id="separator14">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
           </object>
           <packing>
             <property name="expand">False</property>
@@ -375,9 +485,10 @@
         <child>
           <object class="GtkLabel" id="FontDialogPreviewLabel">
             <property name="visible">True</property>
-            <property name="xalign">0</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">&lt;b&gt;Preview:&lt;/b&gt;</property>
             <property name="use_markup">True</property>
+            <property name="xalign">0</property>
           </object>
           <packing>
             <property name="expand">False</property>
@@ -389,83 +500,21 @@
           <object class="GtkViewport" id="FontDialogPreviewViewPort">
             <property name="height_request">120</property>
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="border_width">3</property>
             <property name="resize_mode">queue</property>
             <property name="shadow_type">etched-in</property>
             <child>
               <object class="GtkDrawingArea" id="FontDialogPreview">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
               </object>
             </child>
           </object>
-          <packing>
-            <property name="position">10</property>
-          </packing>
-        </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="dialog-action_area7">
-            <property name="visible">True</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="FontDialogCancel">
-                <property name="label">gtk-cancel</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="FontDialogCopy">
-                <property name="label">gtk-copy</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="FontDialogSave">
-                <property name="label">Save as SVG</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="FontDialogApply">
-                <property name="label">gtk-apply</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">3</property>
-              </packing>
-            </child>
-          </object>
           <packing>
             <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">11</property>
+            <property name="fill">True</property>
+            <property name="position">10</property>
           </packing>
         </child>
       </object>
@@ -477,22 +526,6 @@
       <action-widget response="0">FontDialogApply</action-widget>
     </action-widgets>
   </object>
-  <object class="GtkAdjustment" id="FontLineSpacingValue">
-    <property name="lower">-1</property>
-    <property name="upper">5</property>
-    <property name="step_increment">0.10000000000000001</property>
-  </object>
-  <object class="GtkAdjustment" id="FontCharacterSpacingValue">
-    <property name="lower">-1</property>
-    <property name="upper">5</property>
-    <property name="step_increment">0.10000000000000001</property>
-  </object>
-  <object class="GtkTextBuffer" id="FontDialogInputBuffer"/>
-  <object class="GtkAdjustment" id="FontSideSkewValue">
-    <property name="lower">-100</property>
-    <property name="upper">100</property>
-    <property name="step_increment">5</property>
-  </object>
   <object class="GtkAction" id="ShowFontDialog">
     <property name="label">_Engrave text ...</property>
     <property name="short_label">_Engrave text ...</property>
diff --git a/share/ui/gtk_console.ui b/share/ui/gtk_console.ui
index 8afb8c9..996e766 100644
--- a/share/ui/gtk_console.ui
+++ b/share/ui/gtk_console.ui
@@ -1,8 +1,10 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <requires lib="gtk+" version="2.16"/>
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkTextBuffer" id="ConsoleViewBuffer"/>
   <object class="GtkDialog" id="ConsoleDialog">
+    <property name="can_focus">False</property>
     <property name="border_width">5</property>
     <property name="title" translatable="yes">Console</property>
     <property name="role">console</property>
@@ -10,60 +12,47 @@
     <property name="default_height">320</property>
     <property name="type_hint">normal</property>
     <child internal-child="vbox">
-      <object class="GtkVBox" id="dialog-vbox1">
+      <object class="GtkBox" id="dialog-box1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">2</property>
-        <child>
-          <object class="GtkScrolledWindow" id="scrolledwindow1">
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="dialog-action_area1">
             <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">automatic</property>
-            <property name="vscrollbar_policy">automatic</property>
-            <property name="shadow_type">etched-out</property>
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
             <child>
-              <object class="GtkTextView" id="ConsoleView">
+              <object class="GtkButton" id="CopyConsoleButton">
+                <property name="label">gtk-copy</property>
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="editable">False</property>
-                <property name="wrap_mode">word-char</property>
-                <property name="buffer">ConsoleViewBuffer</property>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkHBox" id="hbox1">
-            <property name="visible">True</property>
-            <property name="spacing">3</property>
-            <child>
-              <object class="GtkLabel" id="label1">
-                <property name="visible">True</property>
-                <property name="label" translatable="yes">Input:</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">False</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkEntry" id="CommandInput">
+              <object class="GtkButton" id="WipeConsoleButton">
+                <property name="label">gtk-clear</property>
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="has_focus">True</property>
-                <property name="events">GDK_KEY_PRESS_MASK | GDK_STRUCTURE_MASK</property>
-                <property name="invisible_char">&#x25CF;</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
                 <property name="position">1</property>
               </packing>
             </child>
             <child>
-              <object class="GtkButton" id="ConsoleExecuteButton">
-                <property name="label">gtk-apply</property>
+              <object class="GtkButton" id="CloseConsoleButton">
+                <property name="label">gtk-close</property>
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
                 <property name="receives_default">True</property>
@@ -71,50 +60,73 @@
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">False</property>
                 <property name="position">2</property>
               </packing>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
-            <property name="position">2</property>
+            <property name="fill">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
           </packing>
         </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="dialog-action_area1">
+        <child>
+          <object class="GtkScrolledWindow" id="scrolledwindow1">
             <property name="visible">True</property>
-            <property name="layout_style">end</property>
+            <property name="can_focus">True</property>
+            <property name="shadow_type">etched-out</property>
             <child>
-              <object class="GtkButton" id="CopyConsoleButton">
-                <property name="label">gtk-copy</property>
+              <object class="GtkTextView" id="ConsoleView">
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
+                <property name="editable">False</property>
+                <property name="wrap_mode">word-char</property>
+                <property name="buffer">ConsoleViewBuffer</property>
+              </object>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox" id="box1">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="spacing">3</property>
+            <child>
+              <object class="GtkLabel" id="label1">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="label" translatable="yes">Input:</property>
               </object>
               <packing>
                 <property name="expand">False</property>
-                <property name="fill">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkButton" id="WipeConsoleButton">
-                <property name="label">gtk-clear</property>
+              <object class="GtkEntry" id="CommandInput">
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
+                <property name="has_focus">True</property>
+                <property name="events">GDK_KEY_PRESS_MASK | GDK_STRUCTURE_MASK</property>
+                <property name="invisible_char">●</property>
               </object>
               <packing>
                 <property name="expand">False</property>
-                <property name="fill">False</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
             <child>
-              <object class="GtkButton" id="CloseConsoleButton">
-                <property name="label">gtk-close</property>
+              <object class="GtkButton" id="ConsoleExecuteButton">
+                <property name="label">gtk-apply</property>
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
                 <property name="receives_default">True</property>
@@ -122,15 +134,15 @@
               </object>
               <packing>
                 <property name="expand">False</property>
-                <property name="fill">False</property>
+                <property name="fill">True</property>
                 <property name="position">2</property>
               </packing>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
+            <property name="fill">True</property>
+            <property name="position">2</property>
           </packing>
         </child>
       </object>
@@ -141,7 +153,6 @@
       <action-widget response="0">CloseConsoleButton</action-widget>
     </action-widgets>
   </object>
-  <object class="GtkTextBuffer" id="ConsoleViewBuffer"/>
   <object class="GtkToggleAction" id="ToggleConsoleWindow">
     <property name="label">_Console</property>
   </object>
diff --git a/share/ui/log.ui b/share/ui/log.ui
index 2ddde35..2aa2f01 100644
--- a/share/ui/log.ui
+++ b/share/ui/log.ui
@@ -1,7 +1,7 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkListStore" id="LogWindowList">
     <columns>
       <!-- column-name timestamp -->
@@ -13,22 +13,77 @@
     </columns>
   </object>
   <object class="GtkDialog" id="LogWindow">
+    <property name="can_focus">False</property>
     <property name="border_width">5</property>
     <property name="title" translatable="yes">PyCAM event log</property>
     <property name="role">pycam-log</property>
     <property name="window_position">center</property>
     <property name="type_hint">normal</property>
     <child internal-child="vbox">
-      <object class="GtkVBox" id="dialog-vbox6">
+      <object class="GtkBox" id="dialog-box6">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">2</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="dialog-action_area4">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
+            <child>
+              <object class="GtkButton" id="LogWindowCopyToClipboard">
+                <property name="label">gtk-copy</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="LogWindowClear">
+                <property name="label">gtk-clear</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="LogWindowClose">
+                <property name="label">gtk-close</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">2</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
         <child>
           <object class="GtkScrolledWindow" id="scrolledwindow2">
             <property name="visible">True</property>
             <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">automatic</property>
-            <property name="vscrollbar_policy">automatic</property>
             <property name="shadow_type">etched-in</property>
             <child>
               <object class="GtkTreeView" id="LogWindowTable">
@@ -37,6 +92,9 @@
                 <property name="model">LogWindowList</property>
                 <property name="search_column">1</property>
                 <property name="enable_grid_lines">vertical</property>
+                <child internal-child="selection">
+                  <object class="GtkTreeSelection" id="treeview-selection1"/>
+                </child>
                 <child>
                   <object class="GtkTreeViewColumn" id="LogWindowColumn0">
                     <property name="title">Time</property>
@@ -80,62 +138,11 @@
             </child>
           </object>
           <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="dialog-action_area4">
-            <property name="visible">True</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="LogWindowCopyToClipboard">
-                <property name="label">gtk-copy</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="LogWindowClear">
-                <property name="label">gtk-clear</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="LogWindowClose">
-                <property name="label">gtk-close</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
       </object>
     </child>
     <action-widgets>
@@ -144,36 +151,43 @@
       <action-widget response="0">LogWindowClose</action-widget>
     </action-widgets>
   </object>
-  <object class="GtkToggleAction" id="ToggleLogWindow">
-    <property name="label">_Log Window</property>
-    <property name="short_label">_Log Window</property>
-    <property name="tooltip">Show the event protocol of PyCAM.</property>
-  </object>
   <object class="GtkEventBox" id="StatusBarEventBox">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <property name="tooltip_text" translatable="yes">Click here to show the log window.</property>
     <child>
-      <object class="GtkHBox" id="hbox37">
+      <object class="GtkBox" id="box37">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <child>
           <object class="GtkImage" id="StatusBarWarning">
+            <property name="can_focus">False</property>
             <property name="stock">gtk-dialog-warning</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
           <object class="GtkStatusbar" id="StatusBar">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="spacing">2</property>
           </object>
           <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
       </object>
     </child>
   </object>
+  <object class="GtkToggleAction" id="ToggleLogWindow">
+    <property name="label">_Log Window</property>
+    <property name="short_label">_Log Window</property>
+    <property name="tooltip">Show the event protocol of PyCAM.</property>
+  </object>
 </interface>
diff --git a/share/ui/memory_analyzer.ui b/share/ui/memory_analyzer.ui
index 178fce5..88cfacc 100644
--- a/share/ui/memory_analyzer.ui
+++ b/share/ui/memory_analyzer.ui
@@ -1,7 +1,7 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <requires lib="gtk+" version="2.16"/>
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkListStore" id="MemoryAnalyzerModel">
     <columns>
       <!-- column-name name -->
@@ -15,25 +15,81 @@
     </columns>
   </object>
   <object class="GtkDialog" id="MemoryAnalyzerWindow">
+    <property name="can_focus">False</property>
     <property name="border_width">5</property>
     <property name="title" translatable="yes">Memory Analyzer</property>
     <property name="type_hint">normal</property>
     <child internal-child="vbox">
-      <object class="GtkVBox" id="dialog-vbox1">
+      <object class="GtkBox" id="dialog-box1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">4</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="dialog-action_area1">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
+            <child>
+              <object class="GtkButton" id="MemoryAnalyzerCopyButton">
+                <property name="label">gtk-copy</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="MemoryAnalyzerRefreshButton">
+                <property name="label">gtk-refresh</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="MemoryAnalyzerCloseButton">
+                <property name="label">gtk-close</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">2</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
         <child>
-          <object class="GtkVBox" id="MemoryAnalyzerDataBox">
+          <object class="GtkBox" id="MemoryAnalyzerDataBox">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <property name="spacing">3</property>
             <child>
               <object class="GtkScrolledWindow" id="scrolledwindow1">
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="hscrollbar_policy">automatic</property>
-                <property name="vscrollbar_policy">automatic</property>
                 <property name="shadow_type">etched-in</property>
                 <child>
                   <object class="GtkTreeView" id="MemoryAnalyzerTable">
@@ -42,6 +98,9 @@
                     <property name="model">MemoryAnalyzerModel</property>
                     <property name="reorderable">True</property>
                     <property name="search_column">0</property>
+                    <child internal-child="selection">
+                      <object class="GtkTreeSelection" id="treeview-selection1"/>
+                    </child>
                     <child>
                       <object class="GtkTreeViewColumn" id="treeviewcolumn3">
                         <property name="title">Size (all) [kB]</property>
@@ -99,12 +158,15 @@
                 </child>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
               <object class="GtkLabel" id="MemoryAnalyzerLoadingLabel">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">Updating memory usage data ...</property>
                 <attributes>
                   <attribute name="style" value="italic"/>
@@ -118,72 +180,24 @@
             </child>
           </object>
           <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="MemoryAnalyzerBrokenLabel">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">The memory analyzer requires the Python module &lt;i&gt;guppy&lt;/i&gt;, but it seems to be missing.</property>
             <property name="use_markup">True</property>
             <property name="justify">center</property>
             <property name="wrap">True</property>
           </object>
-          <packing>
-            <property name="position">2</property>
-          </packing>
-        </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="dialog-action_area1">
-            <property name="visible">True</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="MemoryAnalyzerCopyButton">
-                <property name="label">gtk-copy</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="MemoryAnalyzerRefreshButton">
-                <property name="label">gtk-refresh</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="MemoryAnalyzerCloseButton">
-                <property name="label">gtk-close</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-          </object>
           <packing>
             <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
+            <property name="fill">True</property>
+            <property name="position">2</property>
           </packing>
         </child>
       </object>
diff --git a/share/ui/menubar.xml b/share/ui/menubar.xml
index 108fd27..b1f680a 100644
--- a/share/ui/menubar.xml
+++ b/share/ui/menubar.xml
@@ -12,12 +12,11 @@
       <separator />
     </menu>
     <menu action="SettingsMenu">
-      <!--
-      <menuitem action="LoadTaskSettings"/>
-      <menuitem action="SaveTaskSettings"/>
-      <menuitem action="SaveAsTaskSettings"/>
+      <menuitem action="ResetWorkspace"/>
+      <menuitem action="LoadWorkspace"/>
+      <menuitem action="SaveWorkspace"/>
+      <menuitem action="SaveAsWorkspace"/>
       <separator />
-      -->
       <menuitem action="GeneralSettings"/>
     </menu>
     <menu action="ViewMenu" />
@@ -38,7 +37,7 @@
         <menuitem action="HelpToolTypes"/>
         <menuitem action="HelpProcessSettings"/>
         <menuitem action="HelpBoundsSettings"/>
-        <menuitem action="HelpTaskSetup"/>
+        <menuitem action="HelpProjectSetup"/>
         <menuitem action="Help3DView"/>
       </menu>
       <separator />
diff --git a/share/ui/model_export.ui b/share/ui/model_export.ui
index 1e5a157..ea168b8 100644
--- a/share/ui/model_export.ui
+++ b/share/ui/model_export.ui
@@ -1,7 +1,7 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkAction" id="SaveAsModel">
     <property name="label">Save Model _as ...</property>
     <property name="short_label">Save Model as ...</property>
diff --git a/share/ui/model_extrusion.ui b/share/ui/model_extrusion.ui
index 600f1bb..92a4415 100644
--- a/share/ui/model_extrusion.ui
+++ b/share/ui/model_extrusion.ui
@@ -1,69 +1,122 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkImage" id="ExtrusionChamferIcon">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="pixbuf">extrusion_chamfer.png</property>
+  </object>
+  <object class="GtkAdjustment" id="ExtrusionGridValue">
+    <property name="lower">0.001</property>
+    <property name="upper">1000</property>
+    <property name="step_increment">0.10000000000000001</property>
+  </object>
+  <object class="GtkAdjustment" id="ExtrusionHeightValue">
+    <property name="lower">0.001</property>
+    <property name="upper">1000</property>
+    <property name="step_increment">0.5</property>
+  </object>
+  <object class="GtkImage" id="ExtrusionRadiusDownIcon">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="pixbuf">extrusion_radius_down.png</property>
+  </object>
+  <object class="GtkImage" id="ExtrusionRadiusUpIcon">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="pixbuf">extrusion_radius_up.png</property>
+  </object>
+  <object class="GtkImage" id="ExtrusionSigmoidIcon">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="pixbuf">extrusion_sigmoidal.png</property>
+  </object>
+  <object class="GtkImage" id="ExtrusionSineIcon">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="pixbuf">extrusion_sine.png</property>
+  </object>
+  <object class="GtkListStore" id="ExtrusionTypeModel">
+    <columns>
+      <!-- column-name key -->
+      <column type="gchararray"/>
+      <!-- column-name label -->
+      <column type="gchararray"/>
+      <!-- column-name icon -->
+      <column type="GdkPixbuf"/>
+    </columns>
+  </object>
+  <object class="GtkAdjustment" id="ExtrusionWidthValue">
+    <property name="lower">0.001</property>
+    <property name="upper">1000</property>
+    <property name="step_increment">0.5</property>
+  </object>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
       <object class="GtkFrame" id="ModelExtrusionFrame">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label_xalign">0</property>
         <property name="shadow_type">none</property>
         <child>
           <object class="GtkAlignment" id="alignment2">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="left_padding">12</property>
             <child>
-              <object class="GtkVBox" id="vbox44">
+              <object class="GtkBox" id="box44">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="spacing">3</property>
                 <child>
-                  <object class="GtkTable" id="table18">
+                  <object class="GtkGrid" id="table18">
                     <property name="visible">True</property>
-                    <property name="n_rows">4</property>
-                    <property name="n_columns">2</property>
-                    <property name="column_spacing">3</property>
+                    <property name="can_focus">False</property>
                     <property name="row_spacing">4</property>
+                    <property name="column_spacing">3</property>
                     <child>
                       <object class="GtkLabel" id="ExtrusionTypeLabel">
                         <property name="visible">True</property>
-                        <property name="xalign">0</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">Type:</property>
+                        <property name="xalign">0</property>
                       </object>
                       <packing>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
+                        <property name="left_attach">0</property>
+                        <property name="top_attach">0</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="ExtrusionHeightLabel">
                         <property name="visible">True</property>
-                        <property name="xalign">0</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">Height:</property>
+                        <property name="xalign">0</property>
                       </object>
                       <packing>
+                        <property name="left_attach">1</property>
                         <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="ExtrusionWidthLabel">
                         <property name="visible">True</property>
-                        <property name="xalign">0</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">Width:</property>
+                        <property name="xalign">0</property>
                       </object>
                       <packing>
+                        <property name="left_attach">1</property>
                         <property name="top_attach">2</property>
-                        <property name="bottom_attach">3</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkComboBox" id="ExtrusionTypeSelector">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="model">ExtrusionTypeModel</property>
                         <property name="active">0</property>
                         <child>
@@ -81,84 +134,71 @@
                       </object>
                       <packing>
                         <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
+                        <property name="top_attach">0</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="ExtrusionHeight">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="adjustment">ExtrusionHeightValue</property>
                         <property name="digits">3</property>
                       </object>
                       <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
+                        <property name="left_attach">0</property>
                         <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="ExtrusionWidth">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="adjustment">ExtrusionWidthValue</property>
                         <property name="digits">3</property>
                       </object>
                       <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
+                        <property name="left_attach">0</property>
                         <property name="top_attach">2</property>
-                        <property name="bottom_attach">3</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="ExtrusionGridLabel">
                         <property name="visible">True</property>
-                        <property name="xalign">0</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">Accuracy:</property>
+                        <property name="xalign">0</property>
                       </object>
                       <packing>
+                        <property name="left_attach">1</property>
                         <property name="top_attach">3</property>
-                        <property name="bottom_attach">4</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="ExtrusionGrid">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="adjustment">ExtrusionGridValue</property>
                         <property name="digits">3</property>
                       </object>
                       <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
+                        <property name="left_attach">0</property>
                         <property name="top_attach">3</property>
-                        <property name="bottom_attach">4</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkHButtonBox" id="hbuttonbox1">
+                  <object class="GtkButtonBox" id="buttonbox1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="layout_style">start</property>
                     <child>
                       <object class="GtkButton" id="ExtrudeButton">
@@ -177,6 +217,7 @@
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
@@ -187,6 +228,7 @@
         <child type="label">
           <object class="GtkLabel" id="label9">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">&lt;b&gt;Extrusion parameters&lt;/b&gt;</property>
             <property name="use_markup">True</property>
           </object>
@@ -194,49 +236,4 @@
       </object>
     </child>
   </object>
-  <object class="GtkAdjustment" id="ExtrusionGridValue">
-    <property name="lower">0.001</property>
-    <property name="upper">1000</property>
-    <property name="step_increment">0.10000000000000001</property>
-  </object>
-  <object class="GtkAdjustment" id="ExtrusionWidthValue">
-    <property name="lower">0.001</property>
-    <property name="upper">1000</property>
-    <property name="step_increment">0.5</property>
-  </object>
-  <object class="GtkAdjustment" id="ExtrusionHeightValue">
-    <property name="lower">0.001</property>
-    <property name="upper">1000</property>
-    <property name="step_increment">0.5</property>
-  </object>
-  <object class="GtkImage" id="ExtrusionSigmoidIcon">
-    <property name="visible">True</property>
-    <property name="pixbuf">extrusion_sigmoidal.png</property>
-  </object>
-  <object class="GtkImage" id="ExtrusionRadiusUpIcon">
-    <property name="visible">True</property>
-    <property name="pixbuf">extrusion_radius_up.png</property>
-  </object>
-  <object class="GtkImage" id="ExtrusionRadiusDownIcon">
-    <property name="visible">True</property>
-    <property name="pixbuf">extrusion_radius_down.png</property>
-  </object>
-  <object class="GtkImage" id="ExtrusionChamferIcon">
-    <property name="visible">True</property>
-    <property name="pixbuf">extrusion_chamfer.png</property>
-  </object>
-  <object class="GtkImage" id="ExtrusionSineIcon">
-    <property name="visible">True</property>
-    <property name="pixbuf">extrusion_sine.png</property>
-  </object>
-  <object class="GtkListStore" id="ExtrusionTypeModel">
-    <columns>
-      <!-- column-name key -->
-      <column type="gchararray"/>
-      <!-- column-name label -->
-      <column type="gchararray"/>
-      <!-- column-name icon -->
-      <column type="GdkPixbuf"/>
-    </columns>
-  </object>
 </interface>
diff --git a/share/ui/model_plane_mirror.ui b/share/ui/model_plane_mirror.ui
index 5564ae2..c255f05 100644
--- a/share/ui/model_plane_mirror.ui
+++ b/share/ui/model_plane_mirror.ui
@@ -1,31 +1,37 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
-      <object class="GtkVBox" id="ModelMirrorBox">
+      <object class="GtkBox" id="ModelMirrorBox">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">5</property>
         <child>
           <object class="GtkFrame" id="frame3">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label_xalign">0</property>
             <property name="shadow_type">none</property>
             <child>
               <object class="GtkAlignment" id="alignment51">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="xalign">0</property>
                 <property name="xscale">0</property>
                 <property name="left_padding">12</property>
                 <child>
-                  <object class="GtkVBox" id="vbox29">
+                  <object class="GtkBox" id="vbox29">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <child>
-                      <object class="GtkVButtonBox" id="vbuttonbox8">
+                      <object class="GtkButtonBox" id="vbuttonbox8">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="orientation">vertical</property>
                         <child>
                           <object class="GtkRadioButton" id="MirrorPlaneXY">
@@ -33,6 +39,7 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="active">True</property>
                             <property name="draw_indicator">True</property>
                           </object>
@@ -48,6 +55,7 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">MirrorPlaneXY</property>
                           </object>
@@ -63,6 +71,7 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">MirrorPlaneXY</property>
                           </object>
@@ -74,12 +83,15 @@
                         </child>
                       </object>
                       <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHButtonBox" id="hbuttonbox10">
+                      <object class="GtkButtonBox" id="hbuttonbox10">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="layout_style">start</property>
                         <child>
                           <object class="GtkButton" id="PlaneMirrorButton">
@@ -96,6 +108,8 @@
                         </child>
                       </object>
                       <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
@@ -106,6 +120,7 @@
             <child type="label">
               <object class="GtkLabel" id="label16">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Plane&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
               </object>
@@ -113,6 +128,7 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
diff --git a/share/ui/model_polygons.ui b/share/ui/model_polygons.ui
index 664778f..544461b 100644
--- a/share/ui/model_polygons.ui
+++ b/share/ui/model_polygons.ui
@@ -1,24 +1,29 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
       <object class="GtkFrame" id="ModelPolygonFrame">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label_xalign">0</property>
         <property name="shadow_type">none</property>
         <child>
           <object class="GtkAlignment" id="alignment55">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="left_padding">12</property>
             <child>
-              <object class="GtkVBox" id="vbox1">
+              <object class="GtkBox" id="box1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <child>
-                  <object class="GtkHButtonBox" id="hbuttonbox8">
+                  <object class="GtkButtonBox" id="buttonbox8">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="spacing">3</property>
                     <property name="layout_style">start</property>
                     <child>
@@ -51,6 +56,7 @@
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
@@ -61,6 +67,7 @@
         <child type="label">
           <object class="GtkLabel" id="label26">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">&lt;b&gt;Polygon winding&lt;/b&gt;</property>
             <property name="use_markup">True</property>
           </object>
diff --git a/share/ui/model_position.ui b/share/ui/model_position.ui
index eed8436..bfac2ef 100644
--- a/share/ui/model_position.ui
+++ b/share/ui/model_position.ui
@@ -1,39 +1,73 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="AlignPositionXValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="AlignPositionYValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="AlignPositionZValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="ShiftPositionXValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="ShiftPositionYValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="ShiftPositionZValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
-      <object class="GtkVBox" id="ModelPositionBox">
+      <object class="GtkBox" id="ModelPositionBox">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">5</property>
         <child>
           <object class="GtkFrame" id="frame9">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label_xalign">0</property>
             <property name="shadow_type">none</property>
             <child>
               <object class="GtkAlignment" id="alignment2">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="left_padding">12</property>
                 <child>
-                  <object class="GtkVBox" id="vbox42">
+                  <object class="GtkBox" id="box42">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <property name="spacing">3</property>
                     <child>
-                      <object class="GtkTable" id="table1">
+                      <object class="GtkGrid" id="grid1">
                         <property name="visible">True</property>
-                        <property name="n_rows">3</property>
-                        <property name="n_columns">2</property>
-                        <property name="column_spacing">2</property>
+                        <property name="can_focus">False</property>
                         <property name="row_spacing">1</property>
+                        <property name="column_spacing">2</property>
                         <child>
                           <object class="GtkSpinButton" id="ShiftPositionX">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="activates_default">True</property>
                             <property name="width_chars">5</property>
                             <property name="adjustment">ShiftPositionXValue</property>
@@ -41,15 +75,14 @@
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkSpinButton" id="ShiftPositionY">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="activates_default">True</property>
                             <property name="width_chars">5</property>
                             <property name="adjustment">ShiftPositionYValue</property>
@@ -57,17 +90,14 @@
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkSpinButton" id="ShiftPositionZ">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="activates_default">True</property>
                             <property name="width_chars">5</property>
                             <property name="adjustment">ShiftPositionZValue</property>
@@ -75,52 +105,53 @@
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="shift_x_label">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">x:</property>
                           </object>
                           <packing>
-                            <property name="x_options">GTK_FILL</property>
+                            <property name="left_attach">0</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="shift_y_label">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">y:</property>
                           </object>
                           <packing>
+                            <property name="left_attach">0</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="shift_z_label">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">z:</property>
                           </object>
                           <packing>
+                            <property name="left_attach">0</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHButtonBox" id="hbuttonbox1">
+                      <object class="GtkButtonBox" id="buttonbox1">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="layout_style">start</property>
                         <child>
                           <object class="GtkButton" id="ShiftModelButton">
@@ -138,6 +169,8 @@
                         </child>
                       </object>
                       <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
@@ -148,6 +181,7 @@
             <child type="label">
               <object class="GtkLabel" id="label22">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Relative shift&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
               </object>
@@ -155,44 +189,49 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkHSeparator" id="hseparator2">
+          <object class="GtkSeparator" id="separator2">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
         <child>
           <object class="GtkFrame" id="frame14">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label_xalign">0</property>
             <property name="shadow_type">none</property>
             <child>
               <object class="GtkAlignment" id="alignment54">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="left_padding">12</property>
                 <child>
-                  <object class="GtkVBox" id="vbox43">
+                  <object class="GtkBox" id="box43">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <property name="spacing">3</property>
                     <child>
-                      <object class="GtkTable" id="table19">
+                      <object class="GtkGrid" id="grid19">
                         <property name="visible">True</property>
-                        <property name="n_rows">3</property>
-                        <property name="n_columns">5</property>
-                        <property name="column_spacing">3</property>
+                        <property name="can_focus">False</property>
                         <property name="row_spacing">3</property>
+                        <property name="column_spacing">3</property>
                         <child>
                           <object class="GtkSpinButton" id="AlignPositionX">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="activates_default">True</property>
                             <property name="width_chars">5</property>
                             <property name="adjustment">AlignPositionXValue</property>
@@ -200,15 +239,14 @@
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkSpinButton" id="AlignPositionY">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="activates_default">True</property>
                             <property name="width_chars">5</property>
                             <property name="adjustment">AlignPositionYValue</property>
@@ -216,17 +254,14 @@
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkSpinButton" id="AlignPositionZ">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="activates_default">True</property>
                             <property name="width_chars">5</property>
                             <property name="adjustment">AlignPositionZValue</property>
@@ -234,41 +269,40 @@
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="pos_x_label">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">x:</property>
                           </object>
                           <packing>
-                            <property name="x_options">GTK_FILL</property>
+                            <property name="left_attach">0</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="pos_y_label">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">y:</property>
                           </object>
                           <packing>
+                            <property name="left_attach">0</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="pos_z_label">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">z:</property>
                           </object>
                           <packing>
+                            <property name="left_attach">0</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
@@ -277,15 +311,14 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="image_position">top</property>
                             <property name="active">True</property>
                             <property name="draw_indicator">True</property>
                           </object>
                           <packing>
                             <property name="left_attach">2</property>
-                            <property name="right_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
@@ -294,15 +327,14 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="image_position">top</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">AlignPositionXMin</property>
                           </object>
                           <packing>
                             <property name="left_attach">3</property>
-                            <property name="right_attach">4</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
@@ -311,15 +343,14 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="image_position">top</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">AlignPositionXMin</property>
                           </object>
                           <packing>
                             <property name="left_attach">4</property>
-                            <property name="right_attach">5</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
@@ -328,17 +359,14 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="image_position">top</property>
                             <property name="active">True</property>
                             <property name="draw_indicator">True</property>
                           </object>
                           <packing>
                             <property name="left_attach">2</property>
-                            <property name="right_attach">3</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
@@ -347,17 +375,14 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="image_position">top</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">AlignPositionYMin</property>
                           </object>
                           <packing>
                             <property name="left_attach">3</property>
-                            <property name="right_attach">4</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
@@ -366,17 +391,14 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="image_position">top</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">AlignPositionYMin</property>
                           </object>
                           <packing>
                             <property name="left_attach">4</property>
-                            <property name="right_attach">5</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
@@ -385,17 +407,14 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="image_position">top</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">AlignPositionZMax</property>
                           </object>
                           <packing>
                             <property name="left_attach">2</property>
-                            <property name="right_attach">3</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
@@ -404,17 +423,14 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="image_position">top</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">AlignPositionZMax</property>
                           </object>
                           <packing>
                             <property name="left_attach">3</property>
-                            <property name="right_attach">4</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
@@ -423,27 +439,27 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="image_position">top</property>
                             <property name="active">True</property>
                             <property name="draw_indicator">True</property>
                           </object>
                           <packing>
                             <property name="left_attach">4</property>
-                            <property name="right_attach">5</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHButtonBox" id="hbuttonbox2">
+                      <object class="GtkButtonBox" id="buttonbox2">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="layout_style">start</property>
                         <child>
                           <object class="GtkButton" id="AlignPositionButton">
@@ -461,6 +477,8 @@
                         </child>
                       </object>
                       <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
@@ -471,6 +489,7 @@
             <child type="label">
               <object class="GtkLabel" id="label23">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Align position&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
               </object>
@@ -478,40 +497,11 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">2</property>
           </packing>
         </child>
       </object>
     </child>
   </object>
-  <object class="GtkAdjustment" id="ShiftPositionXValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="ShiftPositionYValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="ShiftPositionZValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="AlignPositionXValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="AlignPositionYValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="AlignPositionZValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
 </interface>
diff --git a/share/ui/model_projection.ui b/share/ui/model_projection.ui
index 01155b9..2a2fd4e 100644
--- a/share/ui/model_projection.ui
+++ b/share/ui/model_projection.ui
@@ -1,20 +1,29 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="ProjectionZLevelValue">
+    <property name="lower">-2000</property>
+    <property name="upper">2000</property>
+    <property name="step_increment">1</property>
+  </object>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
       <object class="GtkFrame" id="ModelProjectionFrame">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label_xalign">0</property>
         <property name="shadow_type">none</property>
         <child>
           <object class="GtkAlignment" id="alignment56">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="left_padding">12</property>
             <child>
-              <object class="GtkVBox" id="vbox47">
+              <object class="GtkBox" id="box47">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="spacing">3</property>
                 <child>
@@ -23,11 +32,13 @@
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
                     <property name="receives_default">False</property>
+                    <property name="xalign">0.5</property>
                     <property name="active">True</property>
                     <property name="draw_indicator">True</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
@@ -37,11 +48,13 @@
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
                     <property name="receives_default">False</property>
+                    <property name="xalign">0.5</property>
                     <property name="draw_indicator">True</property>
                     <property name="group">ProjectionModelTop</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
@@ -51,17 +64,20 @@
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
                     <property name="receives_default">False</property>
+                    <property name="xalign">0.5</property>
                     <property name="draw_indicator">True</property>
                     <property name="group">ProjectionModelTop</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">2</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkHBox" id="hbox2">
+                  <object class="GtkBox" id="box2">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="spacing">2</property>
                     <child>
                       <object class="GtkRadioButton" id="ProjectionModelCustom">
@@ -69,11 +85,13 @@
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
                         <property name="draw_indicator">True</property>
                         <property name="group">ProjectionModelTop</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
@@ -81,23 +99,26 @@
                       <object class="GtkSpinButton" id="ProjectionZLevel">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="adjustment">ProjectionZLevelValue</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">3</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkHButtonBox" id="hbuttonbox1">
+                  <object class="GtkButtonBox" id="buttonbox1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="layout_style">start</property>
                     <child>
                       <object class="GtkButton" id="ProjectionButton">
@@ -107,12 +128,15 @@
                         <property name="receives_default">True</property>
                       </object>
                       <packing>
+                        <property name="expand">True</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">4</property>
                   </packing>
                 </child>
@@ -123,6 +147,7 @@
         <child type="label">
           <object class="GtkLabel" id="label28">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">&lt;b&gt;2D Projection&lt;/b&gt;</property>
             <property name="use_markup">True</property>
           </object>
@@ -130,9 +155,4 @@
       </object>
     </child>
   </object>
-  <object class="GtkAdjustment" id="ProjectionZLevelValue">
-    <property name="lower">-2000</property>
-    <property name="upper">2000</property>
-    <property name="step_increment">1</property>
-  </object>
 </interface>
diff --git a/share/ui/model_rotation.ui b/share/ui/model_rotation.ui
index 9b01070..22e7837 100644
--- a/share/ui/model_rotation.ui
+++ b/share/ui/model_rotation.ui
@@ -1,27 +1,37 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="RotationAngleValue">
+    <property name="lower">-360</property>
+    <property name="upper">360</property>
+    <property name="step_increment">15</property>
+  </object>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
-      <object class="GtkVBox" id="ModelRotationBox">
+      <object class="GtkBox" id="ModelRotationBox">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">5</property>
         <child>
           <object class="GtkFrame" id="frame1">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label_xalign">0</property>
             <property name="shadow_type">none</property>
             <child>
               <object class="GtkAlignment" id="alignment42">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="xalign">0</property>
                 <property name="xscale">0</property>
                 <property name="left_padding">12</property>
                 <child>
-                  <object class="GtkHButtonBox" id="hbuttonbox1">
+                  <object class="GtkButtonBox" id="buttonbox1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="homogeneous">True</property>
                     <property name="layout_style">start</property>
                     <child>
@@ -30,6 +40,7 @@
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
                         <property name="active">True</property>
                         <property name="draw_indicator">True</property>
                       </object>
@@ -45,6 +56,7 @@
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
                         <property name="draw_indicator">True</property>
                         <property name="group">RotationAxisX</property>
                       </object>
@@ -60,6 +72,7 @@
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
                         <property name="draw_indicator">True</property>
                         <property name="group">RotationAxisX</property>
                       </object>
@@ -76,6 +89,7 @@
             <child type="label">
               <object class="GtkLabel" id="label13">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Axis&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
               </object>
@@ -90,73 +104,85 @@
         <child>
           <object class="GtkFrame" id="frame2">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label_xalign">0</property>
             <property name="shadow_type">none</property>
             <child>
               <object class="GtkAlignment" id="alignment57">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="left_padding">12</property>
                 <child>
-                  <object class="GtkVBox" id="vbox40">
+                  <object class="GtkBox" id="box40">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <property name="spacing">1</property>
                     <property name="homogeneous">True</property>
                     <child>
                       <object class="GtkRadioButton" id="RotationAngle90CKW">
-                        <property name="label" translatable="yes">90&#xB0; Clockwise</property>
+                        <property name="label" translatable="yes">90° Clockwise</property>
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
                         <property name="draw_indicator">True</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkRadioButton" id="RotationAngle90CCKW">
-                        <property name="label" translatable="yes">90&#xB0; Counter-Clockwise</property>
+                        <property name="label" translatable="yes">90° Counter-Clockwise</property>
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
                         <property name="active">True</property>
                         <property name="draw_indicator">True</property>
                         <property name="group">RotationAngle90CKW</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkRadioButton" id="RotationAngle180">
-                        <property name="label" translatable="yes">180&#xB0;</property>
+                        <property name="label" translatable="yes">180°</property>
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
                         <property name="draw_indicator">True</property>
                         <property name="group">RotationAngle90CKW</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">2</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHBox" id="hbox10">
+                      <object class="GtkBox" id="box10">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <child>
                           <object class="GtkRadioButton" id="RotationAngleCustomCKW">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">RotationAngle90CKW</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">0</property>
                           </packing>
                         </child>
@@ -164,27 +190,32 @@
                           <object class="GtkSpinButton" id="RotationAngle">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="adjustment">RotationAngleValue</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">1</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="label15">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
+                            <property name="label" translatable="yes">° Clockwise</property>
                             <property name="xalign">0</property>
-                            <property name="label" translatable="yes">&#xB0; Clockwise</property>
                           </object>
                           <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">2</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">3</property>
                       </packing>
                     </child>
@@ -195,6 +226,7 @@
             <child type="label">
               <object class="GtkLabel" id="label14">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Angle&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
               </object>
@@ -202,12 +234,14 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
         <child>
-          <object class="GtkHButtonBox" id="hbuttonbox2">
+          <object class="GtkButtonBox" id="buttonbox2">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="layout_style">start</property>
             <child>
               <object class="GtkButton" id="RotateModelButton">
@@ -219,21 +253,18 @@
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">2</property>
           </packing>
         </child>
       </object>
     </child>
   </object>
-  <object class="GtkAdjustment" id="RotationAngleValue">
-    <property name="lower">-360</property>
-    <property name="upper">360</property>
-    <property name="step_increment">15</property>
-  </object>
 </interface>
diff --git a/share/ui/model_scaling.ui b/share/ui/model_scaling.ui
index 47aeb8a..34a5d9a 100644
--- a/share/ui/model_scaling.ui
+++ b/share/ui/model_scaling.ui
@@ -1,38 +1,73 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkListStore" id="ScaleDimensionAxesList">
+    <columns>
+      <!-- column-name value -->
+      <column type="gchararray"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">x</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">y</col>
+      </row>
+      <row>
+        <col id="0" translatable="yes">z</col>
+      </row>
+    </data>
+  </object>
+  <object class="GtkAdjustment" id="ScaleDimensionValue">
+    <property name="lower">0.001</property>
+    <property name="upper">10000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="ScalePercentValue">
+    <property name="lower">1</property>
+    <property name="upper">10000</property>
+    <property name="step_increment">25</property>
+  </object>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
-      <object class="GtkVBox" id="ModelScaleBox">
+      <object class="GtkBox" id="ModelScaleBox">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">5</property>
         <child>
           <object class="GtkFrame" id="frame5">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label_xalign">0</property>
             <property name="shadow_type">none</property>
             <child>
               <object class="GtkAlignment" id="alignment1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="left_padding">12</property>
                 <child>
-                  <object class="GtkVBox" id="vbox4">
+                  <object class="GtkBox" id="box4">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <property name="spacing">3</property>
                     <child>
-                      <object class="GtkHBox" id="hbox6">
+                      <object class="GtkBox" id="box6">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="spacing">1</property>
                         <child>
                           <object class="GtkLabel" id="ScaleFactorLabel">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">Factor:</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="padding">3</property>
                             <property name="position">0</property>
                           </packing>
@@ -41,34 +76,39 @@
                           <object class="GtkSpinButton" id="ScalePercent">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="activates_default">True</property>
                             <property name="adjustment">ScalePercentValue</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">1</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="ScalePercentUnitLabel">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">%</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">2</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHButtonBox" id="hbuttonbox9">
+                      <object class="GtkButtonBox" id="buttonbox9">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="layout_style">start</property>
                         <child>
                           <object class="GtkButton" id="ScaleModelButton">
@@ -87,6 +127,7 @@
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
@@ -97,6 +138,7 @@
             <child type="label">
               <object class="GtkLabel" id="label19">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Proportional Scaling&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
               </object>
@@ -104,15 +146,18 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkHSeparator" id="hseparator6">
+          <object class="GtkSeparator" id="separator6">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="padding">2</property>
             <property name="position">1</property>
           </packing>
@@ -120,24 +165,29 @@
         <child>
           <object class="GtkFrame" id="frame7">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label_xalign">0</property>
             <property name="shadow_type">none</property>
             <child>
               <object class="GtkAlignment" id="alignment53">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="left_padding">12</property>
                 <child>
-                  <object class="GtkVBox" id="vbox5">
+                  <object class="GtkBox" id="box5">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <property name="spacing">5</property>
                     <child>
-                      <object class="GtkHBox" id="hbox18">
+                      <object class="GtkBox" id="box18">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="spacing">3</property>
                         <child>
                           <object class="GtkComboBox" id="ScaleDimensionAxis">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="model">ScaleDimensionAxesList</property>
                             <property name="active">0</property>
                             <child>
@@ -149,6 +199,7 @@
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">0</property>
                           </packing>
                         </child>
@@ -156,25 +207,28 @@
                           <object class="GtkSpinButton" id="ScaleDimensionControl">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="activates_default">True</property>
                             <property name="adjustment">ScaleDimensionValue</property>
                             <property name="digits">3</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">1</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkHButtonBox" id="hbuttonbox4">
+                      <object class="GtkButtonBox" id="buttonbox4">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="spacing">3</property>
                         <property name="layout_style">start</property>
                         <child>
@@ -207,6 +261,7 @@
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
@@ -217,6 +272,7 @@
             <child type="label">
               <object class="GtkLabel" id="label20">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Scale to Size&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
               </object>
@@ -224,30 +280,36 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">2</property>
           </packing>
         </child>
         <child>
-          <object class="GtkHSeparator" id="hseparator17">
+          <object class="GtkSeparator" id="separator17">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">3</property>
           </packing>
         </child>
         <child>
           <object class="GtkFrame" id="frame15">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label_xalign">0</property>
             <property name="shadow_type">none</property>
             <child>
               <object class="GtkAlignment" id="alignment3">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="left_padding">12</property>
                 <child>
-                  <object class="GtkHButtonBox" id="hbuttonbox7">
+                  <object class="GtkButtonBox" id="buttonbox7">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="spacing">3</property>
                     <property name="layout_style">start</property>
                     <child>
@@ -283,6 +345,7 @@
             <child type="label">
               <object class="GtkLabel" id="label25">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Metric &amp;amp; Imperial&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
               </object>
@@ -290,37 +353,11 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">4</property>
           </packing>
         </child>
       </object>
     </child>
   </object>
-  <object class="GtkListStore" id="ScaleDimensionAxesList">
-    <columns>
-      <!-- column-name value -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes">x</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">y</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes">z</col>
-      </row>
-    </data>
-  </object>
-  <object class="GtkAdjustment" id="ScaleDimensionValue">
-    <property name="lower">0.001</property>
-    <property name="upper">10000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="ScalePercentValue">
-    <property name="lower">1</property>
-    <property name="upper">10000</property>
-    <property name="step_increment">25</property>
-  </object>
 </interface>
diff --git a/share/ui/model_support.ui b/share/ui/model_support.ui
index 98651c5..6d7b767 100644
--- a/share/ui/model_support.ui
+++ b/share/ui/model_support.ui
@@ -1,29 +1,53 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="SupportGridHeight">
+    <property name="lower">0.01</property>
+    <property name="upper">100</property>
+    <property name="step_increment">0.10000000000000001</property>
+  </object>
+  <object class="GtkAdjustment" id="SupportGridThickness">
+    <property name="lower">0.01</property>
+    <property name="upper">100</property>
+    <property name="step_increment">0.10000000000000001</property>
+  </object>
+  <object class="GtkListStore" id="SupportGridTypesList">
+    <columns>
+      <!-- column-name name -->
+      <column type="gchararray"/>
+      <!-- column-name label -->
+      <column type="gchararray"/>
+    </columns>
+  </object>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
       <object class="GtkFrame" id="ModelExtensionsFrame">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label_xalign">0</property>
         <property name="shadow_type">none</property>
         <child>
           <object class="GtkAlignment" id="alignment30">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="left_padding">12</property>
             <child>
-              <object class="GtkVBox" id="vbox17">
+              <object class="GtkBox" id="box17">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="spacing">5</property>
                 <child>
-                  <object class="GtkHButtonBox" id="hbuttonbox1">
+                  <object class="GtkButtonBox" id="buttonbox1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="spacing">3</property>
                     <child>
                       <object class="GtkComboBox" id="SupportGridTypesControl">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="model">SupportGridTypesList</property>
                         <property name="active">0</property>
                         <child>
@@ -55,12 +79,14 @@
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkVBox" id="SupportGridDetailsBox">
+                  <object class="GtkBox" id="SupportGridDetailsBox">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <child>
                       <object class="GtkExpander" id="GridProfileExpander">
@@ -69,19 +95,23 @@
                         <child>
                           <object class="GtkAlignment" id="alignment1">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="left_padding">30</property>
                             <child>
-                              <object class="GtkHBox" id="hbox1">
+                              <object class="GtkBox" id="box1">
                                 <property name="visible">True</property>
+                                <property name="can_focus">False</property>
                                 <property name="spacing">3</property>
                                 <child>
                                   <object class="GtkLabel" id="SupportGridThicknessLabel">
                                     <property name="visible">True</property>
-                                    <property name="xalign">0</property>
+                                    <property name="can_focus">False</property>
                                     <property name="label" translatable="yes">thickness:</property>
+                                    <property name="xalign">0</property>
                                   </object>
                                   <packing>
                                     <property name="expand">False</property>
+                                    <property name="fill">True</property>
                                     <property name="position">0</property>
                                   </packing>
                                 </child>
@@ -89,22 +119,25 @@
                                   <object class="GtkSpinButton" id="SupportGridThicknessControl">
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
-                                    <property name="invisible_char">&#x25CF;</property>
+                                    <property name="invisible_char">●</property>
                                     <property name="adjustment">SupportGridThickness</property>
                                     <property name="digits">2</property>
                                   </object>
                                   <packing>
                                     <property name="expand">False</property>
+                                    <property name="fill">True</property>
                                     <property name="position">1</property>
                                   </packing>
                                 </child>
                                 <child>
-                                  <object class="GtkVSeparator" id="vseparator10">
+                                  <object class="GtkSeparator" id="separator10">
                                     <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
                                     <property name="orientation">vertical</property>
                                   </object>
                                   <packing>
                                     <property name="expand">False</property>
+                                    <property name="fill">True</property>
                                     <property name="padding">3</property>
                                     <property name="position">2</property>
                                   </packing>
@@ -112,10 +145,12 @@
                                 <child>
                                   <object class="GtkLabel" id="SupportGridHeightLabel">
                                     <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
                                     <property name="label" translatable="yes">height:</property>
                                   </object>
                                   <packing>
                                     <property name="expand">False</property>
+                                    <property name="fill">True</property>
                                     <property name="position">3</property>
                                   </packing>
                                 </child>
@@ -123,12 +158,13 @@
                                   <object class="GtkSpinButton" id="SupportGridHeightControl">
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
-                                    <property name="invisible_char">&#x25CF;</property>
+                                    <property name="invisible_char">●</property>
                                     <property name="adjustment">SupportGridHeight</property>
                                     <property name="digits">2</property>
                                   </object>
                                   <packing>
                                     <property name="expand">False</property>
+                                    <property name="fill">True</property>
                                     <property name="position">4</property>
                                   </packing>
                                 </child>
@@ -139,18 +175,21 @@
                         <child type="label">
                           <object class="GtkLabel" id="GridProfileExpanderLabel">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">Profile</property>
                           </object>
                         </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkVBox" id="SupportAddOnContainer">
+                      <object class="GtkBox" id="SupportAddOnContainer">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="orientation">vertical</property>
                         <property name="spacing">5</property>
                         <child>
@@ -158,11 +197,15 @@
                         </child>
                       </object>
                       <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
                   </object>
                   <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
@@ -173,6 +216,7 @@
         <child type="label">
           <object class="GtkLabel" id="ModelExtensionsFrameLabel">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">&lt;b&gt;Support bridges&lt;/b&gt;</property>
             <property name="use_markup">True</property>
           </object>
@@ -180,22 +224,4 @@
       </object>
     </child>
   </object>
-  <object class="GtkAdjustment" id="SupportGridHeight">
-    <property name="lower">0.01</property>
-    <property name="upper">100</property>
-    <property name="step_increment">0.10000000000000001</property>
-  </object>
-  <object class="GtkAdjustment" id="SupportGridThickness">
-    <property name="lower">0.01</property>
-    <property name="upper">100</property>
-    <property name="step_increment">0.10000000000000001</property>
-  </object>
-  <object class="GtkListStore" id="SupportGridTypesList">
-    <columns>
-      <!-- column-name name -->
-      <column type="gchararray"/>
-      <!-- column-name label -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
 </interface>
diff --git a/share/ui/model_support_distributed.ui b/share/ui/model_support_distributed.ui
index ac5be11..e60fca8 100644
--- a/share/ui/model_support_distributed.ui
+++ b/share/ui/model_support_distributed.ui
@@ -1,8 +1,24 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="SupportGridAverageDistance">
+    <property name="lower">0.01</property>
+    <property name="upper">500</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="SupportGridLength">
+    <property name="lower">-100</property>
+    <property name="upper">100</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="SupportGridMinBridgesPerPolygon">
+    <property name="lower">1</property>
+    <property name="upper">20</property>
+    <property name="step_increment">1</property>
+  </object>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
       <object class="GtkExpander" id="DistributedSupportExpander">
         <property name="visible">True</property>
@@ -10,97 +26,86 @@
         <child>
           <object class="GtkAlignment" id="alignment3">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="left_padding">30</property>
             <child>
-              <object class="GtkTable" id="table12">
+              <object class="GtkGrid" id="grid12">
                 <property name="visible">True</property>
-                <property name="n_rows">3</property>
-                <property name="n_columns">2</property>
-                <property name="column_spacing">3</property>
+                <property name="can_focus">False</property>
                 <property name="row_spacing">2</property>
+                <property name="column_spacing">3</property>
                 <child>
                   <object class="GtkSpinButton" id="GridMinBridgesPerPolygon">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="adjustment">SupportGridMinBridgesPerPolygon</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="GridMinBridgesPerPolygonLabel">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Minimum bridges per polygon:</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
+                    <property name="left_attach">0</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkSpinButton" id="GridAverageDistance">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="adjustment">SupportGridAverageDistance</property>
                     <property name="digits">2</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
+                    <property name="top_attach">0</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="GridAverageDistanceLabel">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Average distance between bridges:</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
+                    <property name="left_attach">0</property>
+                    <property name="top_attach">0</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="GridLengthLabel">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Length of each bridge:</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
+                    <property name="left_attach">0</property>
                     <property name="top_attach">2</property>
-                    <property name="bottom_attach">3</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkSpinButton" id="GridLengthControl">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="adjustment">SupportGridLength</property>
                     <property name="digits">2</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
                     <property name="top_attach">2</property>
-                    <property name="bottom_attach">3</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
               </object>
@@ -110,25 +115,11 @@
         <child type="label">
           <object class="GtkLabel" id="GridAverageDistanceExpanderLabel">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">Distribution</property>
           </object>
         </child>
       </object>
     </child>
   </object>
-  <object class="GtkAdjustment" id="SupportGridAverageDistance">
-    <property name="lower">0.01</property>
-    <property name="upper">500</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="SupportGridMinBridgesPerPolygon">
-    <property name="lower">1</property>
-    <property name="upper">20</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="SupportGridLength">
-    <property name="lower">-100</property>
-    <property name="upper">100</property>
-    <property name="step_increment">1</property>
-  </object>
 </interface>
diff --git a/share/ui/model_support_grid.ui b/share/ui/model_support_grid.ui
index 9c4dba1..9e48e56 100644
--- a/share/ui/model_support_grid.ui
+++ b/share/ui/model_support_grid.ui
@@ -1,11 +1,48 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="SupportGridDistanceX">
+    <property name="upper">1000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="SupportGridDistanceY">
+    <property name="upper">1000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="SupportGridOffsetX">
+    <property name="lower">-1000</property>
+    <property name="upper">1000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="SupportGridOffsetY">
+    <property name="lower">-1000</property>
+    <property name="upper">1000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="SupportGridPositionManualAdjustment">
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkListStore" id="SupportGridPositionManualList">
+    <columns>
+      <!-- column-name base -->
+      <column type="gchararray"/>
+      <!-- column-name change -->
+      <column type="gchararray"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">17.3mm (-2.0)</col>
+        <col id="1" translatable="yes">-2.0</col>
+      </row>
+    </data>
+  </object>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
-      <object class="GtkVBox" id="SupportModelGridBox">
+      <object class="GtkBox" id="SupportModelGridBox">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <child>
           <object class="GtkExpander" id="GridPatternExpander">
@@ -15,68 +52,62 @@
             <child>
               <object class="GtkAlignment" id="alignment1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="left_padding">30</property>
                 <child>
-                  <object class="GtkTable" id="table10">
+                  <object class="GtkGrid" id="grid10">
                     <property name="visible">True</property>
-                    <property name="n_rows">2</property>
-                    <property name="n_columns">3</property>
-                    <property name="column_spacing">4</property>
+                    <property name="can_focus">False</property>
                     <property name="row_spacing">1</property>
+                    <property name="column_spacing">4</property>
                     <child>
                       <object class="GtkLabel" id="SupportGridDistanceXLabel">
                         <property name="visible">True</property>
-                        <property name="xalign">0</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">distance x:</property>
+                        <property name="xalign">0</property>
                       </object>
                       <packing>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
+                        <property name="left_attach">0</property>
+                        <property name="top_attach">0</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="SupportGridDistanceYLabel">
                         <property name="visible">True</property>
-                        <property name="xalign">0</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">distance y:</property>
+                        <property name="xalign">0</property>
                       </object>
                       <packing>
+                        <property name="left_attach">0</property>
                         <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="SupportGridDistanceXControl">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="adjustment">SupportGridDistanceX</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
+                        <property name="top_attach">0</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkSpinButton" id="SupportGridDistanceYControl">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="adjustment">SupportGridDistanceY</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
                         <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
                       </packing>
                     </child>
                     <child>
@@ -85,13 +116,12 @@
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
                         <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
                         <property name="draw_indicator">True</property>
                       </object>
                       <packing>
                         <property name="left_attach">2</property>
-                        <property name="right_attach">3</property>
                         <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
                       </packing>
                     </child>
                     <child>
@@ -104,12 +134,14 @@
             <child type="label">
               <object class="GtkLabel" id="GridPatternExpanderLabel">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">Pattern</property>
               </object>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
@@ -120,19 +152,23 @@
             <child>
               <object class="GtkAlignment" id="alignment2">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="left_padding">30</property>
                 <child>
-                  <object class="GtkHBox" id="hbox17">
+                  <object class="GtkBox" id="box17">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="spacing">4</property>
                     <child>
                       <object class="GtkLabel" id="GridOffsetXLabel">
                         <property name="visible">True</property>
-                        <property name="xalign">0</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">offset x:</property>
+                        <property name="xalign">0</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
@@ -140,33 +176,38 @@
                       <object class="GtkSpinButton" id="SupportGridOffsetXControl">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="adjustment">SupportGridOffsetX</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkVSeparator" id="vseparator2">
+                      <object class="GtkSeparator" id="separator2">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="orientation">vertical</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">2</property>
                       </packing>
                     </child>
                     <child>
                       <object class="GtkLabel" id="GridOffsetYLabel">
                         <property name="visible">True</property>
-                        <property name="xalign">0</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">offset y:</property>
+                        <property name="xalign">0</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">3</property>
                       </packing>
                     </child>
@@ -174,12 +215,13 @@
                       <object class="GtkSpinButton" id="SupportGridOffsetYControl">
                         <property name="visible">True</property>
                         <property name="can_focus">True</property>
-                        <property name="invisible_char">&#x25CF;</property>
+                        <property name="invisible_char">●</property>
                         <property name="adjustment">SupportGridOffsetY</property>
                         <property name="digits">2</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">4</property>
                       </packing>
                     </child>
@@ -190,12 +232,14 @@
             <child type="label">
               <object class="GtkLabel" id="GridPositionExpanderLabel">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">Position offset</property>
               </object>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
@@ -206,14 +250,17 @@
             <child>
               <object class="GtkAlignment" id="alignment3">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="left_padding">30</property>
                 <child>
-                  <object class="GtkVBox" id="vbox12">
+                  <object class="GtkBox" id="vbox12">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <child>
-                      <object class="GtkHBox" id="hbox24">
+                      <object class="GtkBox" id="box24">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="spacing">3</property>
                         <child>
                           <object class="GtkRadioButton" id="SupportGridPositionManualAxisX">
@@ -221,11 +268,13 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="active">True</property>
                             <property name="draw_indicator">True</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="padding">10</property>
                             <property name="position">0</property>
                           </packing>
@@ -236,39 +285,46 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">SupportGridPositionManualAxisX</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="padding">10</property>
                             <property name="position">1</property>
                           </packing>
                         </child>
                         <child>
-                          <object class="GtkVSeparator" id="vseparator7">
+                          <object class="GtkSeparator" id="vseparator7">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="orientation">vertical</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">2</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="GridPositionManualSelectionLabel">
                             <property name="visible">True</property>
-                            <property name="xalign">0</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">Grid item:</property>
+                            <property name="xalign">0</property>
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">3</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkComboBox" id="SupportGridPositionManualSelector">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="model">SupportGridPositionManualList</property>
                             <child>
                               <object class="GtkCellRendererText" id="SupportGridManualSelectorBase"/>
@@ -285,24 +341,28 @@
                           </object>
                           <packing>
                             <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">4</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
                     <child>
-                      <object class="GtkVBox" id="vbox28">
+                      <object class="GtkBox" id="vbox28">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="orientation">vertical</property>
                         <child>
-                          <object class="GtkHBox" id="SupportGridPositionManualShiftBox">
+                          <object class="GtkBox" id="SupportGridPositionManualShiftBox">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <child>
-                              <object class="GtkHScale" id="SupportGridPositionManualShiftControl">
+                              <object class="GtkScale" id="SupportGridPositionManualShiftControl">
                                 <property name="visible">True</property>
                                 <property name="can_focus">True</property>
                                 <property name="adjustment">SupportGridPositionManualAdjustment</property>
@@ -311,6 +371,8 @@
                                 <property name="value_pos">right</property>
                               </object>
                               <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">True</property>
                                 <property name="position">0</property>
                               </packing>
                             </child>
@@ -318,23 +380,27 @@
                               <object class="GtkSpinButton" id="SupportGridPositionManualShiftControl2">
                                 <property name="visible">True</property>
                                 <property name="can_focus">True</property>
-                                <property name="invisible_char">&#x25CF;</property>
+                                <property name="invisible_char">●</property>
                                 <property name="adjustment">SupportGridPositionManualAdjustment</property>
                                 <property name="digits">1</property>
                               </object>
                               <packing>
                                 <property name="expand">False</property>
+                                <property name="fill">True</property>
                                 <property name="position">1</property>
                               </packing>
                             </child>
                           </object>
                           <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">0</property>
                           </packing>
                         </child>
                         <child>
-                          <object class="GtkHButtonBox" id="hbuttonbox1">
+                          <object class="GtkButtonBox" id="hbuttonbox1">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="layout_style">spread</property>
                             <child>
                               <object class="GtkButton" id="SupportGridPositionManualResetAll">
@@ -344,6 +410,7 @@
                                 <property name="receives_default">True</property>
                               </object>
                               <packing>
+                                <property name="expand">True</property>
                                 <property name="fill">False</property>
                                 <property name="position">0</property>
                               </packing>
@@ -356,18 +423,22 @@
                                 <property name="receives_default">True</property>
                               </object>
                               <packing>
+                                <property name="expand">True</property>
                                 <property name="fill">False</property>
                                 <property name="position">1</property>
                               </packing>
                             </child>
                           </object>
                           <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">True</property>
                             <property name="position">1</property>
                           </packing>
                         </child>
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
@@ -378,51 +449,18 @@
             <child type="label">
               <object class="GtkLabel" id="GridManualShiftExpanderLabel">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">Manual position adjustment</property>
               </object>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">2</property>
           </packing>
         </child>
       </object>
     </child>
   </object>
-  <object class="GtkListStore" id="SupportGridPositionManualList">
-    <columns>
-      <!-- column-name base -->
-      <column type="gchararray"/>
-      <!-- column-name change -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes">17.3mm (-2.0)</col>
-        <col id="1" translatable="yes">-2.0</col>
-      </row>
-    </data>
-  </object>
-  <object class="GtkAdjustment" id="SupportGridDistanceX">
-    <property name="upper">1000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="SupportGridDistanceY">
-    <property name="upper">1000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="SupportGridOffsetX">
-    <property name="lower">-1000</property>
-    <property name="upper">1000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="SupportGridOffsetY">
-    <property name="lower">-1000</property>
-    <property name="upper">1000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="SupportGridPositionManualAdjustment">
-    <property name="step_increment">1</property>
-  </object>
 </interface>
diff --git a/share/ui/model_swap_axes.ui b/share/ui/model_swap_axes.ui
index 2f74f4c..13bafdc 100644
--- a/share/ui/model_swap_axes.ui
+++ b/share/ui/model_swap_axes.ui
@@ -1,31 +1,37 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
-      <object class="GtkVBox" id="ModelSwapBox">
+      <object class="GtkBox" id="ModelSwapBox">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">5</property>
         <child>
           <object class="GtkFrame" id="frame4">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label_xalign">0</property>
             <property name="shadow_type">none</property>
             <child>
               <object class="GtkAlignment" id="alignment52">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="xalign">0</property>
                 <property name="xscale">0</property>
                 <property name="left_padding">12</property>
                 <child>
-                  <object class="GtkVBox" id="vbox9">
+                  <object class="GtkBox" id="vbox9">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <child>
-                      <object class="GtkVButtonBox" id="vbuttonbox9">
+                      <object class="GtkButtonBox" id="buttonbox9">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="orientation">vertical</property>
                         <child>
                           <object class="GtkRadioButton" id="SwapAxesXY">
@@ -33,6 +39,7 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="active">True</property>
                             <property name="draw_indicator">True</property>
                           </object>
@@ -48,6 +55,7 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">SwapAxesXY</property>
                           </object>
@@ -63,6 +71,7 @@
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
                             <property name="receives_default">False</property>
+                            <property name="xalign">0.5</property>
                             <property name="draw_indicator">True</property>
                             <property name="group">SwapAxesXY</property>
                           </object>
@@ -74,6 +83,8 @@
                         </child>
                       </object>
                       <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">0</property>
                       </packing>
                     </child>
@@ -86,6 +97,7 @@
                       </object>
                       <packing>
                         <property name="expand">False</property>
+                        <property name="fill">True</property>
                         <property name="position">1</property>
                       </packing>
                     </child>
@@ -96,6 +108,7 @@
             <child type="label">
               <object class="GtkLabel" id="label17">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">&lt;b&gt;Axes pair&lt;/b&gt;</property>
                 <property name="use_markup">True</property>
               </object>
@@ -103,6 +116,7 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
diff --git a/share/ui/models.ui b/share/ui/models.ui
index 40c2cf1..e381d61 100644
--- a/share/ui/models.ui
+++ b/share/ui/models.ui
@@ -1,7 +1,7 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.0"/>
   <object class="GtkListStore" id="ModelList">
     <columns>
       <!-- column-name uuid -->
@@ -9,20 +9,20 @@
     </columns>
   </object>
   <object class="GtkWindow" id="window1">
+    <property name="can_focus">False</property>
     <child>
-      <object class="GtkVPaned" id="ModelBox">
+      <object class="GtkPaned" id="ModelBox">
         <property name="visible">True</property>
         <property name="can_focus">True</property>
         <property name="orientation">vertical</property>
         <child>
-          <object class="GtkHBox" id="hbox1">
+          <object class="GtkBox" id="box1">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <child>
               <object class="GtkScrolledWindow" id="scrolledwindow1">
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="hscrollbar_policy">automatic</property>
-                <property name="vscrollbar_policy">automatic</property>
                 <property name="shadow_type">etched-out</property>
                 <child>
                   <object class="GtkTreeView" id="ModelView">
@@ -30,6 +30,9 @@
                     <property name="can_focus">True</property>
                     <property name="model">ModelList</property>
                     <property name="headers_visible">False</property>
+                    <child internal-child="selection">
+                      <object class="GtkTreeSelection" id="treeview-selection1"/>
+                    </child>
                     <child>
                       <object class="GtkTreeViewColumn" id="VisibleColumn">
                         <child>
@@ -52,17 +55,21 @@
                 </child>
               </object>
               <packing>
+                <property name="expand">True</property>
+                <property name="fill">True</property>
                 <property name="padding">5</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkVBox" id="vbox1">
+              <object class="GtkBox" id="box2">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <child>
-                  <object class="GtkVButtonBox" id="vbuttonbox1">
+                  <object class="GtkButtonBox" id="buttonbox1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="orientation">vertical</property>
                     <property name="layout_style">center</property>
                     <child>
@@ -71,7 +78,7 @@
                         <property name="can_focus">True</property>
                         <property name="receives_default">True</property>
                         <property name="use_alpha">True</property>
-                        <property name="color">#000000000000</property>
+                        <property name="alpha">65535</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
@@ -137,6 +144,8 @@
                     </child>
                   </object>
                   <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
@@ -159,6 +168,7 @@
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
diff --git a/share/ui/opengl.ui b/share/ui/opengl.ui
index ef1872a..e60ee6a 100644
--- a/share/ui/opengl.ui
+++ b/share/ui/opengl.ui
@@ -1,53 +1,94 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkWindow" id="OpenGLWindow">
-    <property name="title" translatable="yes">PyCAM Visualization</property>
-    <property name="role">pycam-view</property>
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkFrame" id="ColorPrefTab">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="label_xalign">0</property>
+    <property name="shadow_type">none</property>
     <child>
-      <object class="GtkVBox" id="OpenGLBox">
+      <object class="GtkAlignment" id="alignment4">
         <property name="visible">True</property>
-        <property name="orientation">vertical</property>
+        <property name="can_focus">False</property>
+        <property name="left_padding">12</property>
         <child>
-          <object class="GtkAlignment" id="alignment1">
+          <object class="GtkGrid" id="ColorTable">
             <property name="visible">True</property>
-            <property name="left_padding">2</property>
+            <property name="can_focus">False</property>
+            <property name="row_spacing">3</property>
+            <property name="column_spacing">3</property>
             <child>
-              <object class="GtkVBox" id="InfoBox">
-                <property name="visible">True</property>
-                <property name="orientation">vertical</property>
-                <property name="spacing">1</property>
-                <child>
-                  <placeholder/>
-                </child>
-              </object>
+              <placeholder/>
+            </child>
+            <child>
+              <placeholder/>
             </child>
           </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="position">0</property>
-          </packing>
         </child>
       </object>
     </child>
+    <child type="label">
+      <object class="GtkLabel" id="ColorSelectionFrameLabel">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="label" translatable="yes">&lt;b&gt;Color Selection&lt;/b&gt;</property>
+        <property name="use_markup">True</property>
+      </object>
+    </child>
   </object>
-  <object class="GtkToggleAction" id="Toggle3DView">
-    <property name="label">3D _View</property>
-    <property name="short_label">3D _View</property>
-    <property name="tooltip">Display the model in the 3D view window.</property>
+  <object class="GtkFrame" id="DisplayItemsPrefTab">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="label_xalign">0</property>
+    <property name="shadow_type">none</property>
+    <child>
+      <object class="GtkAlignment" id="alignment21">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="left_padding">12</property>
+        <child>
+          <object class="GtkBox" id="PreferencesVisibleItemsBox">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="orientation">vertical</property>
+            <property name="spacing">2</property>
+            <child>
+              <placeholder/>
+            </child>
+          </object>
+        </child>
+      </object>
+    </child>
+    <child type="label">
+      <object class="GtkLabel" id="VisualSettingsFrameLabel">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="label" translatable="yes">&lt;b&gt;Display settings&lt;/b&gt;</property>
+        <property name="use_markup">True</property>
+      </object>
+    </child>
+  </object>
+  <object class="GtkAdjustment" id="DrillProgressMaxFPS">
+    <property name="lower">1</property>
+    <property name="upper">50</property>
+    <property name="value">1</property>
+    <property name="step_increment">1</property>
   </object>
   <object class="GtkFrame" id="OpenGLPrefTab">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <property name="label_xalign">0</property>
     <property name="shadow_type">none</property>
     <child>
       <object class="GtkAlignment" id="alignment11">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="left_padding">12</property>
         <child>
-          <object class="GtkVBox" id="vbox1">
+          <object class="GtkBox" id="vbox1">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <property name="spacing">2</property>
             <child>
@@ -56,10 +97,12 @@
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
                 <property name="receives_default">False</property>
+                <property name="xalign">0.5</property>
                 <property name="draw_indicator">True</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
@@ -69,10 +112,12 @@
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
                 <property name="receives_default">False</property>
+                <property name="xalign">0.5</property>
                 <property name="draw_indicator">True</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
@@ -82,10 +127,12 @@
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
                 <property name="receives_default">False</property>
+                <property name="xalign">0.5</property>
                 <property name="draw_indicator">True</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">2</property>
               </packing>
             </child>
@@ -95,24 +142,45 @@
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
                 <property name="receives_default">False</property>
+                <property name="xalign">0.5</property>
                 <property name="draw_indicator">True</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">3</property>
               </packing>
             </child>
             <child>
-              <object class="GtkHBox" id="hbox7">
+              <object class="GtkCheckButton" id="OpenGLCache">
+                <property name="label" translatable="yes">Use caching</property>
                 <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">False</property>
+                <property name="tooltip_text" translatable="yes">OpenGL caching (via Display Lists) works without problems for most users. But if your 3D view is distorted or not usable at all, then you should consider to disable caching. The cache improves performance significantly.</property>
+                <property name="xalign">0.5</property>
+                <property name="draw_indicator">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">4</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkBox" id="box7">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="spacing">2</property>
                 <child>
                   <object class="GtkLabel" id="DrillUpdateFPSLabel">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Maximum Frames per Second:</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
@@ -120,31 +188,19 @@
                   <object class="GtkSpinButton" id="DrillProgressFrameSkipControl">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="adjustment">DrillProgressMaxFPS</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
               </object>
               <packing>
                 <property name="expand">False</property>
-                <property name="position">4</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkCheckButton" id="OpenGLCache">
-                <property name="label" translatable="yes">Use caching</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">False</property>
-                <property name="tooltip_text" translatable="yes">OpenGL caching (via Display Lists) works without problems for most users. But if your 3D view is distorted or not usable at all, then you should consider to disable caching. The cache improves performance significantly.</property>
-                <property name="draw_indicator">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">4</property>
               </packing>
             </child>
@@ -155,106 +211,88 @@
     <child type="label">
       <object class="GtkLabel" id="OpenGLSettingsFrameLabel">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">&lt;b&gt;OpenGL Settings&lt;/b&gt;</property>
         <property name="use_markup">True</property>
       </object>
     </child>
   </object>
-  <object class="GtkAdjustment" id="DrillProgressMaxFPS">
-    <property name="value">1</property>
-    <property name="lower">1</property>
-    <property name="upper">50</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkFrame" id="ColorPrefTab">
-    <property name="visible">True</property>
-    <property name="label_xalign">0</property>
-    <property name="shadow_type">none</property>
+  <object class="GtkWindow" id="OpenGLWindow">
+    <property name="can_focus">False</property>
+    <property name="title" translatable="yes">PyCAM Visualization</property>
+    <property name="role">pycam-view</property>
     <child>
-      <object class="GtkAlignment" id="alignment4">
+      <object class="GtkBox" id="OpenGLBox">
         <property name="visible">True</property>
-        <property name="left_padding">12</property>
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
         <child>
-          <object class="GtkTable" id="ColorTable">
+          <object class="GtkAlignment" id="alignment1">
             <property name="visible">True</property>
-            <property name="n_columns">2</property>
-            <property name="column_spacing">3</property>
-            <property name="row_spacing">3</property>
-            <child>
-              <placeholder/>
-            </child>
+            <property name="can_focus">False</property>
+            <property name="left_padding">2</property>
             <child>
-              <placeholder/>
+              <object class="GtkBox" id="InfoBox">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="orientation">vertical</property>
+                <property name="spacing">1</property>
+                <child>
+                  <placeholder/>
+                </child>
+              </object>
             </child>
           </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">0</property>
+          </packing>
         </child>
       </object>
     </child>
-    <child type="label">
-      <object class="GtkLabel" id="ColorSelectionFrameLabel">
-        <property name="visible">True</property>
-        <property name="label" translatable="yes">&lt;b&gt;Color Selection&lt;/b&gt;</property>
-        <property name="use_markup">True</property>
-      </object>
-    </child>
   </object>
-  <object class="GtkFrame" id="DisplayItemsPrefTab">
-    <property name="visible">True</property>
-    <property name="label_xalign">0</property>
-    <property name="shadow_type">none</property>
-    <child>
-      <object class="GtkAlignment" id="alignment21">
-        <property name="visible">True</property>
-        <property name="left_padding">12</property>
-        <child>
-          <object class="GtkVBox" id="PreferencesVisibleItemsBox">
-            <property name="visible">True</property>
-            <property name="orientation">vertical</property>
-            <property name="spacing">2</property>
-            <child>
-              <placeholder/>
-            </child>
-          </object>
-        </child>
-      </object>
-    </child>
-    <child type="label">
-      <object class="GtkLabel" id="VisualSettingsFrameLabel">
-        <property name="visible">True</property>
-        <property name="label" translatable="yes">&lt;b&gt;Display settings&lt;/b&gt;</property>
-        <property name="use_markup">True</property>
-      </object>
-    </child>
+  <object class="GtkToggleAction" id="Toggle3DView">
+    <property name="label">3D _View</property>
+    <property name="short_label">3D _View</property>
+    <property name="tooltip">Display the model in the 3D view window.</property>
   </object>
-  <object class="GtkHBox" id="ViewControls">
+  <object class="GtkBox" id="ViewControls">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <property name="spacing">4</property>
     <child>
       <object class="GtkToolbar" id="ViewItems">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="toolbar_style">text</property>
       </object>
       <packing>
         <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">0</property>
       </packing>
     </child>
     <child>
-      <object class="GtkVSeparator" id="vseparator13">
+      <object class="GtkSeparator" id="separator13">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
       </object>
       <packing>
         <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">1</property>
       </packing>
     </child>
     <child>
-      <object class="GtkHBox" id="hbox38">
+      <object class="GtkBox" id="box38">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <child>
           <object class="GtkToolButton" id="ResetView">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">Center</property>
             <property name="use_underline">True</property>
           </object>
@@ -267,6 +305,7 @@
         <child>
           <object class="GtkToolButton" id="FrontView">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">Front</property>
             <property name="use_underline">True</property>
           </object>
@@ -279,6 +318,7 @@
         <child>
           <object class="GtkToolButton" id="BackView">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">Back</property>
             <property name="use_underline">True</property>
           </object>
@@ -291,6 +331,7 @@
         <child>
           <object class="GtkToolButton" id="LeftView">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">Left</property>
             <property name="use_underline">True</property>
           </object>
@@ -303,6 +344,7 @@
         <child>
           <object class="GtkToolButton" id="RightView">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">Right</property>
             <property name="use_underline">True</property>
           </object>
@@ -315,6 +357,7 @@
         <child>
           <object class="GtkToolButton" id="TopView">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">Top</property>
             <property name="use_underline">True</property>
           </object>
@@ -327,6 +370,7 @@
         <child>
           <object class="GtkToolButton" id="BottomView">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">Bottom</property>
             <property name="use_underline">True</property>
           </object>
@@ -338,6 +382,8 @@
         </child>
       </object>
       <packing>
+        <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">2</property>
       </packing>
     </child>
@@ -354,6 +400,7 @@
       </object>
       <packing>
         <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">3</property>
       </packing>
     </child>
diff --git a/share/ui/opengl_view_dimension.ui b/share/ui/opengl_view_dimension.ui
index 0e1af67..a561482 100644
--- a/share/ui/opengl_view_dimension.ui
+++ b/share/ui/opengl_view_dimension.ui
@@ -1,286 +1,314 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkTable" id="DimensionTable">
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkGrid" id="DimensionTable">
     <property name="visible">True</property>
-    <property name="n_rows">2</property>
-    <property name="n_columns">6</property>
+    <property name="can_focus">False</property>
     <property name="column_spacing">3</property>
     <child>
       <object class="GtkLabel" id="label8">
         <property name="visible">True</property>
-        <property name="xalign">0</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">Model corners:</property>
+        <property name="xalign">0</property>
       </object>
       <packing>
+        <property name="left_attach">0</property>
         <property name="top_attach">1</property>
-        <property name="bottom_attach">2</property>
-        <property name="x_options">GTK_FILL</property>
-        <property name="y_options">GTK_FILL</property>
       </packing>
     </child>
     <child>
-      <object class="GtkVSeparator" id="vseparator16">
+      <object class="GtkSeparator" id="separator16">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
       </object>
       <packing>
         <property name="left_attach">2</property>
-        <property name="right_attach">3</property>
-        <property name="bottom_attach">2</property>
-        <property name="x_options">GTK_FILL</property>
+        <property name="top_attach">0</property>
       </packing>
     </child>
     <child>
-      <object class="GtkVSeparator" id="vseparator17">
+      <object class="GtkSeparator" id="separator17">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
       </object>
       <packing>
         <property name="left_attach">4</property>
-        <property name="right_attach">5</property>
-        <property name="bottom_attach">2</property>
-        <property name="x_options">GTK_FILL</property>
+        <property name="top_attach">0</property>
       </packing>
     </child>
     <child>
-      <object class="GtkHBox" id="hbox42">
+      <object class="GtkBox" id="box42">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">2</property>
         <child>
           <object class="GtkLabel" id="ModelCornerXMin">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">xmin</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="ModelCornerXSpaces">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">..</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="ModelCornerXMax">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">xmax</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">2</property>
           </packing>
         </child>
       </object>
       <packing>
         <property name="left_attach">1</property>
-        <property name="right_attach">2</property>
         <property name="top_attach">1</property>
-        <property name="bottom_attach">2</property>
-        <property name="x_options">GTK_FILL</property>
       </packing>
     </child>
     <child>
-      <object class="GtkHBox" id="hbox44">
+      <object class="GtkBox" id="box44">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">2</property>
         <child>
           <object class="GtkLabel" id="ModelCornerZMin">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">zmin</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="ModelCornerZSpaces">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">..</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="ModelCornerZMax">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">zmax</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">2</property>
           </packing>
         </child>
       </object>
       <packing>
         <property name="left_attach">5</property>
-        <property name="right_attach">6</property>
         <property name="top_attach">1</property>
-        <property name="bottom_attach">2</property>
-        <property name="x_options">GTK_FILL</property>
       </packing>
     </child>
     <child>
       <object class="GtkLabel" id="DimensionLabel">
         <property name="visible">True</property>
-        <property name="xalign">0</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">Bounding Box:</property>
+        <property name="xalign">0</property>
       </object>
       <packing>
-        <property name="x_options">GTK_FILL</property>
+        <property name="left_attach">0</property>
+        <property name="top_attach">0</property>
       </packing>
     </child>
     <child>
-      <object class="GtkHBox" id="hbox40">
+      <object class="GtkBox" id="box40">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">2</property>
         <child>
           <object class="GtkLabel" id="model_dim_x_label">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="label" translatable="yes">Δx:</property>
             <property name="xalign">0</property>
-            <property name="label" translatable="yes">&#x394;x:</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="model_dim_x">
             <property name="visible">True</property>
-            <property name="xalign">0</property>
-            <property name="label"></property>
+            <property name="can_focus">False</property>
             <property name="single_line_mode">True</property>
+            <property name="xalign">0</property>
           </object>
           <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
       </object>
       <packing>
         <property name="left_attach">1</property>
-        <property name="right_attach">2</property>
-        <property name="x_options">GTK_FILL</property>
+        <property name="top_attach">0</property>
       </packing>
     </child>
     <child>
-      <object class="GtkHBox" id="hbox41">
+      <object class="GtkBox" id="box41">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">2</property>
         <child>
           <object class="GtkLabel" id="model_dim_z_label">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="label" translatable="yes">Δz:</property>
             <property name="xalign">0</property>
-            <property name="label" translatable="yes">&#x394;z:</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="model_dim_z">
             <property name="visible">True</property>
-            <property name="xalign">0</property>
-            <property name="label"></property>
+            <property name="can_focus">False</property>
             <property name="single_line_mode">True</property>
+            <property name="xalign">0</property>
           </object>
           <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
       </object>
       <packing>
         <property name="left_attach">5</property>
-        <property name="right_attach">6</property>
-        <property name="x_options">GTK_FILL</property>
+        <property name="top_attach">0</property>
       </packing>
     </child>
     <child>
-      <object class="GtkHBox" id="hbox43">
+      <object class="GtkBox" id="box43">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">2</property>
         <child>
           <object class="GtkLabel" id="model_dim_y_label">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="label" translatable="yes">Δy:</property>
             <property name="xalign">0</property>
-            <property name="label" translatable="yes">&#x394;y:</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="model_dim_y">
             <property name="visible">True</property>
-            <property name="xalign">0</property>
-            <property name="label"></property>
+            <property name="can_focus">False</property>
             <property name="single_line_mode">True</property>
+            <property name="xalign">0</property>
           </object>
           <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
       </object>
       <packing>
         <property name="left_attach">3</property>
-        <property name="right_attach">4</property>
-        <property name="x_options">GTK_FILL</property>
+        <property name="top_attach">0</property>
       </packing>
     </child>
     <child>
-      <object class="GtkHBox" id="hbox45">
+      <object class="GtkBox" id="box45">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">2</property>
         <child>
           <object class="GtkLabel" id="ModelCornerYMin">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">ymin</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="ModelCornerYSpaces">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">..</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
         <child>
           <object class="GtkLabel" id="ModelCornerYMax">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="label" translatable="yes">ymax</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">2</property>
           </packing>
         </child>
       </object>
       <packing>
         <property name="left_attach">3</property>
-        <property name="right_attach">4</property>
         <property name="top_attach">1</property>
-        <property name="bottom_attach">2</property>
-        <property name="x_options">GTK_FILL</property>
       </packing>
     </child>
+    <child>
+      <placeholder/>
+    </child>
+    <child>
+      <placeholder/>
+    </child>
   </object>
 </interface>
diff --git a/share/ui/opengl_view_grid.ui b/share/ui/opengl_view_grid.ui
index c4789ec..158e98e 100644
--- a/share/ui/opengl_view_grid.ui
+++ b/share/ui/opengl_view_grid.ui
@@ -1,37 +1,44 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkHBox" id="GridSizeBox">
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkBox" id="GridSizeBox">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <property name="spacing">3</property>
     <child>
       <object class="GtkLabel" id="label1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">Major grid:</property>
       </object>
       <packing>
         <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">0</property>
       </packing>
     </child>
     <child>
       <object class="GtkLabel" id="MajorGridSizeLabel">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">100mm</property>
       </object>
       <packing>
         <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">1</property>
       </packing>
     </child>
     <child>
-      <object class="GtkVSeparator" id="vseparator1">
+      <object class="GtkSeparator" id="separator1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
       </object>
       <packing>
         <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="padding">3</property>
         <property name="position">2</property>
       </packing>
@@ -39,20 +46,24 @@
     <child>
       <object class="GtkLabel" id="label2">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">Minor grid:</property>
       </object>
       <packing>
         <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">3</property>
       </packing>
     </child>
     <child>
       <object class="GtkLabel" id="MinorGridSizeLabel">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">20mm</property>
       </object>
       <packing>
         <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">4</property>
       </packing>
     </child>
diff --git a/share/ui/parallel_processing.ui b/share/ui/parallel_processing.ui
index 87c8df0..73c34ac 100644
--- a/share/ui/parallel_processing.ui
+++ b/share/ui/parallel_processing.ui
@@ -1,7 +1,16 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="NumberOfProcessesValue">
+    <property name="upper">1000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="ProcessPoolRefreshIntervalValue">
+    <property name="lower">1</property>
+    <property name="upper">60</property>
+    <property name="step_increment">1</property>
+  </object>
   <object class="GtkListStore" id="ProcessPoolStatisticsModel">
     <columns>
       <!-- column-name name -->
@@ -19,30 +28,96 @@
     </columns>
   </object>
   <object class="GtkDialog" id="ProcessPoolWindow">
+    <property name="can_focus">False</property>
     <property name="border_width">5</property>
     <property name="title" translatable="yes">PyCAM pool of processes</property>
     <property name="role">pycam-processes</property>
     <property name="type_hint">normal</property>
     <child internal-child="vbox">
-      <object class="GtkVBox" id="dialog-vbox5">
+      <object class="GtkBox" id="dialog-box5">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">2</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="dialog-action_area6">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
+            <child>
+              <object class="GtkBox" id="hbox30">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <child>
+                  <object class="GtkLabel" id="ProcessPoolRefreshIntervalLabel">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="label" translatable="yes">Refresh interval:</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">0</property>
+                  </packing>
+                </child>
+                <child>
+                  <object class="GtkSpinButton" id="ProcessPoolRefreshInterval">
+                    <property name="visible">True</property>
+                    <property name="can_focus">True</property>
+                    <property name="invisible_char">●</property>
+                    <property name="adjustment">ProcessPoolRefreshIntervalValue</property>
+                    <property name="numeric">True</property>
+                  </object>
+                  <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
+                    <property name="position">1</property>
+                  </packing>
+                </child>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="ProcessPoolWindowClose">
+                <property name="label">gtk-close</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
         <child>
-          <object class="GtkVBox" id="vbox32">
+          <object class="GtkBox" id="box32">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <child>
-              <object class="GtkVBox" id="ProcessPoolStatisticsBox">
+              <object class="GtkBox" id="ProcessPoolStatisticsBox">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="spacing">3</property>
                 <child>
                   <object class="GtkScrolledWindow" id="scrolledwindow4">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="hscrollbar_policy">automatic</property>
-                    <property name="vscrollbar_policy">automatic</property>
                     <property name="shadow_type">etched-in</property>
                     <child>
                       <object class="GtkTreeView" id="ProcessPoolView">
@@ -50,6 +125,9 @@
                         <property name="can_focus">True</property>
                         <property name="model">ProcessPoolStatisticsModel</property>
                         <property name="search_column">0</property>
+                        <child internal-child="selection">
+                          <object class="GtkTreeSelection" id="treeview-selection1"/>
+                        </child>
                         <child>
                           <object class="GtkTreeViewColumn" id="ProcessPoolColumn1">
                             <property name="resizable">True</property>
@@ -144,19 +222,23 @@
                     </child>
                   </object>
                   <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkHBox" id="hbox32">
+                  <object class="GtkBox" id="box1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="spacing">3</property>
                     <child>
                       <object class="GtkLabel" id="ProcessPoolConnectedWorkersLabel">
                         <property name="visible">True</property>
-                        <property name="xalign">0</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">Number of connected workers:</property>
                         <property name="pattern">&lt;b&gt;____&lt;/b&gt;</property>
+                        <property name="xalign">0</property>
                       </object>
                       <packing>
                         <property name="expand">False</property>
@@ -167,6 +249,7 @@
                     <child>
                       <object class="GtkLabel" id="ProcessPoolConnectedWorkersValue">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">0</property>
                         <property name="use_markup">True</property>
                       </object>
@@ -186,8 +269,9 @@
                 <child>
                   <object class="GtkLabel" id="ProcessPoolDetails">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="use_markup">True</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
@@ -197,23 +281,27 @@
                 </child>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkVBox" id="ProcessPoolDisabledBox">
+              <object class="GtkBox" id="ProcessPoolDisabledBox">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <child>
                   <object class="GtkLabel" id="ProcessPoolDisabledLabel">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">The server mode is currently not enabled on your system.
 Take a look at the &lt;i&gt;Preferences&lt;/i&gt; for &lt;i&gt;Parallel processing&lt;/i&gt; if you want to enable it.
 Please read the description of the Server Mode (linked below) to understand the related security implications.</property>
                     <property name="use_markup">True</property>
                     <property name="wrap">True</property>
                     <property name="width_chars">60</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
@@ -245,64 +333,10 @@ Please read the description of the Server Mode (linked below) to understand the
               </packing>
             </child>
           </object>
-          <packing>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="dialog-action_area6">
-            <property name="visible">True</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkHBox" id="hbox30">
-                <property name="visible">True</property>
-                <child>
-                  <object class="GtkLabel" id="ProcessPoolRefreshIntervalLabel">
-                    <property name="visible">True</property>
-                    <property name="label" translatable="yes">Refresh interval:</property>
-                  </object>
-                  <packing>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkSpinButton" id="ProcessPoolRefreshInterval">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
-                    <property name="adjustment">ProcessPoolRefreshIntervalValue</property>
-                    <property name="numeric">True</property>
-                  </object>
-                  <packing>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="ProcessPoolWindowClose">
-                <property name="label">gtk-close</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
           <packing>
             <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
+            <property name="fill">True</property>
+            <property name="position">1</property>
           </packing>
         </child>
       </object>
@@ -311,34 +345,28 @@ Please read the description of the Server Mode (linked below) to understand the
       <action-widget response="0">ProcessPoolWindowClose</action-widget>
     </action-widgets>
   </object>
-  <object class="GtkAdjustment" id="ServerPortLocalValue">
-    <property name="upper">65535</property>
-    <property name="step_increment">1</property>
-  </object>
   <object class="GtkAdjustment" id="RemoteServerPortValue">
     <property name="upper">65535</property>
     <property name="step_increment">1</property>
   </object>
-  <object class="GtkAdjustment" id="NumberOfProcessesValue">
-    <property name="upper">1000</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="ProcessPoolRefreshIntervalValue">
-    <property name="lower">1</property>
-    <property name="upper">60</property>
+  <object class="GtkAdjustment" id="ServerPortLocalValue">
+    <property name="upper">65535</property>
     <property name="step_increment">1</property>
   </object>
   <object class="GtkFrame" id="MultiprocessingFrame">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <property name="label_xalign">0</property>
     <property name="shadow_type">none</property>
     <child>
       <object class="GtkAlignment" id="alignment15">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="left_padding">12</property>
         <child>
-          <object class="GtkVBox" id="vbox34">
+          <object class="GtkBox" id="vbox34">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <property name="spacing">5</property>
             <child>
@@ -347,103 +375,102 @@ Please read the description of the Server Mode (linked below) to understand the
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
                 <property name="receives_default">False</property>
+                <property name="xalign">0.5</property>
                 <property name="draw_indicator">True</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkVBox" id="ParallelProcessSettingsBox">
+              <object class="GtkBox" id="ParallelProcessSettingsBox">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="spacing">5</property>
                 <child>
                   <object class="GtkAlignment" id="alignment45">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="xalign">0</property>
                     <property name="yalign">0</property>
                     <property name="left_padding">10</property>
                     <child>
-                      <object class="GtkTable" id="table13">
+                      <object class="GtkGrid" id="grid13">
                         <property name="visible">True</property>
-                        <property name="n_rows">3</property>
-                        <property name="n_columns">2</property>
-                        <property name="column_spacing">3</property>
+                        <property name="can_focus">False</property>
                         <property name="row_spacing">2</property>
+                        <property name="column_spacing">3</property>
                         <child>
                           <object class="GtkLabel" id="AvailableCoresLabel">
                             <property name="visible">True</property>
-                            <property name="xalign">0</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">Available cores:</property>
+                            <property name="xalign">0</property>
                           </object>
                           <packing>
+                            <property name="left_attach">0</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="AvailableCores">
                             <property name="visible">True</property>
-                            <property name="xalign">0</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">1</property>
+                            <property name="xalign">0</property>
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkSpinButton" id="NumberOfProcesses">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                             <property name="adjustment">NumberOfProcessesValue</property>
                             <property name="numeric">True</property>
                             <property name="update_policy">if-valid</property>
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="NumberOfProcessesLabel">
                             <property name="visible">True</property>
-                            <property name="xalign">0</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">Number of processes:</property>
+                            <property name="xalign">0</property>
                           </object>
                           <packing>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
+                            <property name="left_attach">0</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkLabel" id="ZeroProcessesWarning">
                             <property name="visible">True</property>
-                            <property name="xalign">0</property>
+                            <property name="can_focus">False</property>
                             <property name="label" translatable="yes">&lt;span foreground="red"&gt;Warning: no local processes enabled.
 You will need remote workers.&lt;/span&gt;</property>
                             <property name="use_markup">True</property>
                             <property name="wrap">True</property>
+                            <property name="xalign">0</property>
                           </object>
                           <packing>
-                            <property name="right_attach">2</property>
+                            <property name="left_attach">0</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
+                        <child>
+                          <placeholder/>
+                        </child>
                       </object>
                     </child>
                   </object>
@@ -454,11 +481,13 @@ You will need remote workers.&lt;/span&gt;</property>
                   </packing>
                 </child>
                 <child>
-                  <object class="GtkHSeparator" id="hseparator15">
+                  <object class="GtkSeparator" id="separator15">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
@@ -466,7 +495,6 @@ You will need remote workers.&lt;/span&gt;</property>
                   <object class="GtkLabel" id="ServerModeDisabledLabel">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
                     <property name="label" translatable="yes">Server mode is currently not available on your system.
 You are probably using the Windows standalone executable.
 Instead you could use the PyCAM installer package along with the all-in-one installer of all dependencies.
@@ -474,23 +502,29 @@ Instead you could use the PyCAM installer package along with the all-in-one inst
 See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platform feature matrix&lt;/a&gt; for details.</property>
                     <property name="use_markup">True</property>
                     <property name="wrap">True</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">2</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkFrame" id="ServerModeSettingsFrame">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label_xalign">0</property>
                     <property name="shadow_type">none</property>
                     <child>
-                      <object class="GtkVBox" id="vbox36">
+                      <object class="GtkBox" id="vbox36">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="orientation">vertical</property>
                         <child>
-                          <object class="GtkHBox" id="hbox34">
+                          <object class="GtkBox" id="hbox34">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <child>
                               <object class="GtkCheckButton" id="EnableServerMode">
                                 <property name="label">gtk-connect</property>
@@ -498,6 +532,7 @@ See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platfor
                                 <property name="can_focus">True</property>
                                 <property name="receives_default">False</property>
                                 <property name="use_stock">True</property>
+                                <property name="xalign">0.5</property>
                                 <property name="draw_indicator">True</property>
                               </object>
                               <packing>
@@ -509,12 +544,14 @@ See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platfor
                             <child>
                               <object class="GtkAlignment" id="alignment48">
                                 <property name="visible">True</property>
+                                <property name="can_focus">False</property>
                                 <child>
                                   <placeholder/>
                                 </child>
                               </object>
                               <packing>
                                 <property name="expand">False</property>
+                                <property name="fill">True</property>
                                 <property name="position">1</property>
                               </packing>
                             </child>
@@ -528,81 +565,76 @@ See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platfor
                         <child>
                           <object class="GtkAlignment" id="alignment46">
                             <property name="visible">True</property>
+                            <property name="can_focus">False</property>
                             <property name="xalign">0</property>
                             <property name="yalign">0</property>
                             <property name="left_padding">10</property>
                             <child>
-                              <object class="GtkTable" id="ServerModeSettingsTable">
+                              <object class="GtkGrid" id="ServerModeSettingsTable">
                                 <property name="visible">True</property>
-                                <property name="n_rows">5</property>
-                                <property name="n_columns">3</property>
-                                <property name="column_spacing">3</property>
+                                <property name="can_focus">False</property>
                                 <property name="row_spacing">2</property>
+                                <property name="column_spacing">3</property>
                                 <child>
                                   <object class="GtkSpinButton" id="RemoteServerPort">
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
-                                    <property name="invisible_char">&#x25CF;</property>
+                                    <property name="invisible_char">●</property>
                                     <property name="adjustment">RemoteServerPortValue</property>
                                   </object>
                                   <packing>
                                     <property name="left_attach">2</property>
-                                    <property name="right_attach">3</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
+                                    <property name="top_attach">0</property>
                                   </packing>
                                 </child>
                                 <child>
                                   <object class="GtkEntry" id="RemoteServerHostname">
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
-                                    <property name="invisible_char">&#x25CF;</property>
+                                    <property name="invisible_char">●</property>
                                     <property name="width_chars">18</property>
                                     <property name="truncate_multiline">True</property>
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
+                                    <property name="top_attach">0</property>
                                   </packing>
                                 </child>
                                 <child>
                                   <object class="GtkLabel" id="RemoteServerLabel">
                                     <property name="visible">True</property>
-                                    <property name="xalign">0</property>
+                                    <property name="can_focus">False</property>
                                     <property name="label" translatable="yes">Remote server:</property>
+                                    <property name="xalign">0</property>
                                   </object>
                                   <packing>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
+                                    <property name="left_attach">0</property>
+                                    <property name="top_attach">0</property>
                                   </packing>
                                 </child>
                                 <child>
                                   <object class="GtkLabel" id="ServerPortLocalLabel">
                                     <property name="visible">True</property>
-                                    <property name="xalign">0</property>
+                                    <property name="can_focus">False</property>
                                     <property name="label" translatable="yes">Local port:</property>
+                                    <property name="xalign">0</property>
                                   </object>
                                   <packing>
+                                    <property name="left_attach">0</property>
                                     <property name="top_attach">1</property>
-                                    <property name="bottom_attach">2</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
                                   </packing>
                                 </child>
                                 <child>
                                   <object class="GtkLabel" id="ServerPasswordLabel">
                                     <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
+                                    <property name="label" translatable="yes">Password:</property>
                                     <property name="xalign">0</property>
                                     <property name="yalign">0</property>
-                                    <property name="label" translatable="yes">Password:</property>
                                   </object>
                                   <packing>
+                                    <property name="left_attach">0</property>
                                     <property name="top_attach">2</property>
-                                    <property name="bottom_attach">4</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -616,11 +648,7 @@ See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platfor
                                   </object>
                                   <packing>
                                     <property name="left_attach">2</property>
-                                    <property name="right_attach">3</property>
                                     <property name="top_attach">2</property>
-                                    <property name="bottom_attach">3</property>
-                                    <property name="x_options"></property>
-                                    <property name="y_options"></property>
                                   </packing>
                                 </child>
                                 <child>
@@ -629,13 +657,12 @@ See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platfor
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
                                     <property name="receives_default">False</property>
+                                    <property name="xalign">0.5</property>
                                     <property name="draw_indicator">True</property>
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
                                     <property name="top_attach">3</property>
-                                    <property name="bottom_attach">4</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -643,30 +670,25 @@ See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platfor
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
                                     <property name="visibility">False</property>
-                                    <property name="invisible_char">&#x25CF;</property>
+                                    <property name="invisible_char">●</property>
                                     <property name="truncate_multiline">True</property>
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
                                     <property name="top_attach">2</property>
-                                    <property name="bottom_attach">3</property>
                                   </packing>
                                 </child>
                                 <child>
                                   <object class="GtkAlignment" id="alignment24">
                                     <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
                                     <child>
                                       <placeholder/>
                                     </child>
                                   </object>
                                   <packing>
                                     <property name="left_attach">2</property>
-                                    <property name="right_attach">3</property>
                                     <property name="top_attach">3</property>
-                                    <property name="bottom_attach">4</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
                                   </packing>
                                 </child>
                                 <child>
@@ -681,60 +703,43 @@ See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platfor
                                   </object>
                                   <packing>
                                     <property name="left_attach">2</property>
-                                    <property name="right_attach">3</property>
-                                    <property name="top_attach">4</property>
-                                    <property name="bottom_attach">5</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkAlignment" id="alignment25">
-                                    <property name="visible">True</property>
-                                    <child>
-                                      <placeholder/>
-                                    </child>
-                                  </object>
-                                  <packing>
-                                    <property name="right_attach">2</property>
                                     <property name="top_attach">4</property>
-                                    <property name="bottom_attach">5</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
                                   </packing>
                                 </child>
                                 <child>
                                   <object class="GtkSpinButton" id="ServerPortLocal">
                                     <property name="visible">True</property>
                                     <property name="can_focus">True</property>
-                                    <property name="invisible_char">&#x25CF;</property>
+                                    <property name="invisible_char">●</property>
                                     <property name="adjustment">ServerPortLocalValue</property>
                                   </object>
                                   <packing>
                                     <property name="left_attach">2</property>
-                                    <property name="right_attach">3</property>
                                     <property name="top_attach">1</property>
-                                    <property name="bottom_attach">2</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
                                   </packing>
                                 </child>
                                 <child>
                                   <object class="GtkAlignment" id="alignment49">
                                     <property name="visible">True</property>
+                                    <property name="can_focus">False</property>
                                     <child>
                                       <placeholder/>
                                     </child>
                                   </object>
                                   <packing>
                                     <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
                                     <property name="top_attach">1</property>
-                                    <property name="bottom_attach">2</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
                                   </packing>
                                 </child>
+                                <child>
+                                  <placeholder/>
+                                </child>
+                                <child>
+                                  <placeholder/>
+                                </child>
+                                <child>
+                                  <placeholder/>
+                                </child>
                               </object>
                             </child>
                           </object>
@@ -749,6 +754,7 @@ See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platfor
                     <child type="label">
                       <object class="GtkLabel" id="ServerModeFrameLabel">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="label" translatable="yes">&lt;b&gt;Distributed processing&lt;/b&gt;</property>
                         <property name="use_markup">True</property>
                       </object>
@@ -770,15 +776,18 @@ See the &lt;a href="http://pycam.sourceforge.net/parallel-processing"&gt;platfor
             <child>
               <object class="GtkLabel" id="ParallelProcessingDisabledLabel">
                 <property name="visible">True</property>
-                <property name="xalign">0</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">Parallel processing is currently not available on your system.
 You need to switch to Python v2.6 (or higher) or install the Python module "multiprocessing".
 
 Note: The Windows standalone executable does not support parallel processing. Please install PyCAM's package for Windows and its dependencies if you need this feature.
     </property>
                 <property name="wrap">True</property>
+                <property name="xalign">0</property>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">2</property>
               </packing>
             </child>
@@ -789,6 +798,7 @@ Note: The Windows standalone executable does not support parallel processing. Pl
     <child type="label">
       <object class="GtkLabel" id="MultiprocessingFrameLabel">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">&lt;b&gt;Settings for parallel processing&lt;/b&gt;</property>
         <property name="use_markup">True</property>
       </object>
diff --git a/share/ui/plugin_selector.ui b/share/ui/plugin_selector.ui
index d088244..f58be83 100644
--- a/share/ui/plugin_selector.ui
+++ b/share/ui/plugin_selector.ui
@@ -1,7 +1,18 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkListStore" id="CategoryList">
+    <columns>
+      <!-- column-name label -->
+      <column type="gchararray"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">Model</col>
+      </row>
+    </data>
+  </object>
   <object class="GtkListStore" id="PluginsModel">
     <columns>
       <!-- column-name name -->
@@ -70,37 +81,57 @@
       </row>
     </data>
   </object>
-  <object class="GtkListStore" id="CategoryList">
-    <columns>
-      <!-- column-name label -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes">Model</col>
-      </row>
-    </data>
-  </object>
   <object class="GtkDialog" id="PluginManagerWindow">
     <property name="width_request">640</property>
     <property name="height_request">500</property>
+    <property name="can_focus">False</property>
     <property name="border_width">5</property>
     <property name="title" translatable="yes">Plugins</property>
     <property name="role">pycam-plugins</property>
     <property name="window_position">center</property>
     <property name="type_hint">normal</property>
     <child internal-child="vbox">
-      <object class="GtkVBox" id="dialog-vbox1">
+      <object class="GtkBox" id="dialog-box1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">3</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="dialog-action_area1">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
+            <child>
+              <object class="GtkButton" id="ClosePluginManager">
+                <property name="label">gtk-close</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
         <child>
-          <object class="GtkHButtonBox" id="hbuttonbox1">
+          <object class="GtkButtonBox" id="buttonbox1">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="layout_style">spread</property>
             <child>
               <object class="GtkComboBox" id="StatusFilter">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="model">StatusList</property>
                 <child>
                   <object class="GtkCellRendererText" id="cellrenderertext1"/>
@@ -118,6 +149,7 @@
             <child>
               <object class="GtkComboBox" id="CategoryFilter">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="model">CategoryList</property>
                 <child>
                   <object class="GtkCellRendererText" id="cellrenderertext2"/>
@@ -135,6 +167,7 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
@@ -142,8 +175,6 @@
           <object class="GtkScrolledWindow" id="scrolledwindow1">
             <property name="visible">True</property>
             <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">automatic</property>
-            <property name="vscrollbar_policy">automatic</property>
             <property name="shadow_type">etched-out</property>
             <child>
               <object class="GtkTreeView" id="PluginsTable">
@@ -154,6 +185,9 @@
                 <property name="rules_hint">True</property>
                 <property name="search_column">0</property>
                 <property name="tooltip_column">5</property>
+                <child internal-child="selection">
+                  <object class="GtkTreeSelection" id="treeview-selection1"/>
+                </child>
                 <child>
                   <object class="GtkTreeViewColumn" id="PluginsEnabled">
                     <property name="title">Enabled</property>
@@ -214,34 +248,11 @@
             </child>
           </object>
           <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
             <property name="position">2</property>
           </packing>
         </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="dialog-action_area1">
-            <property name="visible">True</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="ClosePluginManager">
-                <property name="label">gtk-close</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
       </object>
     </child>
     <action-widgets>
diff --git a/share/ui/processes.ui b/share/ui/processes.ui
index 7983905..f868308 100644
--- a/share/ui/processes.ui
+++ b/share/ui/processes.ui
@@ -1,7 +1,13 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkListStore" id="ProcessList">
+    <columns>
+      <!-- column-name uuid -->
+      <column type="gchararray"/>
+    </columns>
+  </object>
   <object class="GtkListStore" id="StrategyModel">
     <columns>
       <!-- column-name label -->
@@ -16,26 +22,19 @@
       </row>
     </data>
   </object>
-  <object class="GtkListStore" id="ProcessList">
-    <columns>
-      <!-- column-name uuid -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkVPaned" id="ProcessBox">
+  <object class="GtkPaned" id="ProcessBox">
     <property name="visible">True</property>
     <property name="can_focus">True</property>
     <property name="orientation">vertical</property>
     <child>
-      <object class="GtkHBox" id="hbox11">
+      <object class="GtkBox" id="box11">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">3</property>
         <child>
           <object class="GtkScrolledWindow" id="scrolledwindow5">
             <property name="visible">True</property>
             <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">automatic</property>
-            <property name="vscrollbar_policy">automatic</property>
             <property name="shadow_type">etched-in</property>
             <child>
               <object class="GtkTreeView" id="ProcessEditorTable">
@@ -45,6 +44,9 @@
                 <property name="headers_clickable">False</property>
                 <property name="enable_search">False</property>
                 <property name="search_column">0</property>
+                <child internal-child="selection">
+                  <object class="GtkTreeSelection" id="treeview-selection1"/>
+                </child>
                 <child>
                   <object class="GtkTreeViewColumn" id="NameColumn">
                     <property name="title">Name</property>
@@ -69,16 +71,20 @@
             </child>
           </object>
           <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkVBox" id="vbox20">
+          <object class="GtkBox" id="box20">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <child>
-              <object class="GtkVButtonBox" id="vbuttonbox2">
+              <object class="GtkButtonBox" id="buttonbox2">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="layout_style">center</property>
                 <child>
@@ -139,6 +145,8 @@
                 </child>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
@@ -161,6 +169,7 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
@@ -171,33 +180,39 @@
       </packing>
     </child>
     <child>
-      <object class="GtkVBox" id="ProcessSettingsControlsBox">
+      <object class="GtkBox" id="ProcessSettingsControlsBox">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">4</property>
         <child>
           <object class="GtkAlignment" id="ProcessSelectorBox">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="xscale">0</property>
             <property name="yscale">0</property>
             <child>
-              <object class="GtkHBox" id="hbox1">
+              <object class="GtkBox" id="box1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="spacing">3</property>
                 <child>
                   <object class="GtkLabel" id="label1">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Strategy:</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkComboBox" id="StrategySelector">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="model">StrategyModel</property>
                     <child>
                       <object class="GtkCellRendererText" id="StrategyLabelCell"/>
@@ -217,18 +232,22 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkVBox" id="ProcessParametersBox">
+          <object class="GtkBox" id="ProcessParametersBox">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <child>
               <placeholder/>
             </child>
           </object>
           <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
diff --git a/share/ui/progress_bar.ui b/share/ui/progress_bar.ui
index ae8b7bc..66ceb71 100644
--- a/share/ui/progress_bar.ui
+++ b/share/ui/progress_bar.ui
@@ -1,74 +1,79 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.20.1 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkWindow" id="DummyWindow">
+    <property name="can_focus">False</property>
     <child>
-      <object class="GtkVBox" id="ProgressBox">
-        <property name="visible">True</property>
+      <object class="GtkBox" id="ProgressBox">
+        <property name="visible">False</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <child>
           <object class="GtkProgressBar" id="MultipleProgressBar">
+            <property name="can_focus">False</property>
             <property name="ellipsize">end</property>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkHBox" id="ProgressWidget">
-            <property name="spacing">3</property>
+          <object class="GtkProgressBar" id="ProgressBar">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="ellipsize">end</property>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkBox" id="vbox13">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="orientation">vertical</property>
             <child>
-              <object class="GtkProgressBar" id="ProgressBar">
+              <object class="GtkToggleButton" id="ShowToolpathProgressButton">
+                <property name="label" translatable="yes">Show Progress</property>
                 <property name="visible">True</property>
-                <property name="ellipsize">end</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkVBox" id="vbox13">
+              <object class="GtkButton" id="ProgressCancelButton">
+                <property name="label" translatable="yes">Cancel</property>
                 <property name="visible">True</property>
-                <property name="orientation">vertical</property>
-                <child>
-                  <object class="GtkToggleButton" id="ShowToolpathProgressButton">
-                    <property name="label" translatable="yes">Show Progress</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkButton" id="ProgressCancelButton">
-                    <property name="label" translatable="yes">Cancel</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
-            <property name="position">1</property>
+            <property name="fill">True</property>
+            <property name="position">2</property>
           </packing>
         </child>
       </object>
     </child>
+    <child type="titlebar">
+      <placeholder/>
+    </child>
   </object>
 </interface>
diff --git a/share/ui/pycam-project.ui b/share/ui/pycam-project.ui
index 0e79117..133cb31 100644
--- a/share/ui/pycam-project.ui
+++ b/share/ui/pycam-project.ui
@@ -1,57 +1,183 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkWindow" id="ProjectWindow">
-    <property name="title" translatable="yes">PyCAM</property>
-    <property name="role">pycam-main</property>
-    <property name="destroy_with_parent">True</property>
-    <child>
-      <object class="GtkVBox" id="WindowBox">
-        <property name="visible">True</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">2</property>
-      </object>
-    </child>
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAction" id="About">
+    <property name="label">_About</property>
+    <property name="stock_id">gtk-about</property>
   </object>
-  <object class="GtkAction" id="OpenModel">
-    <property name="label">_Open Model ...</property>
-    <property name="tooltip">Opens a model file.</property>
-    <property name="stock_id">gtk-open</property>
+  <object class="GtkAction" id="BugTracker">
+    <property name="label">Report a _Bug</property>
   </object>
-  <object class="GtkAction" id="FileMenu">
-    <property name="label">_File</property>
+  <object class="GtkAction" id="DevelopmentBlog">
+    <property name="label">_Development Blog</property>
   </object>
-  <object class="GtkAction" id="SettingsMenu">
-    <property name="label">_Settings</property>
+  <object class="GtkAction" id="EditMenu">
+    <property name="label">_Edit</property>
   </object>
-  <object class="GtkAction" id="LoadTaskSettings">
-    <property name="label">_Load Task Settings ...</property>
-    <property name="tooltip">Load tool, process and task definitions from a file.</property>
+  <object class="GtkAction" id="ExportMenu">
+    <property name="label">_Export</property>
+    <property name="short_label">_Export</property>
   </object>
-  <object class="GtkAction" id="SaveTaskSettings">
-    <property name="label">_Save Task Settings</property>
-    <property name="tooltip">Save the tool, process and task definitions.</property>
-    <property name="stock_id">gtk-save-as</property>
+  <object class="GtkAction" id="FeatureRequest">
+    <property name="label">Re_quest a Feature</property>
+  </object>
+  <object class="GtkAction" id="FileMenu">
+    <property name="label">_File</property>
   </object>
-  <object class="GtkAction" id="SaveAsTaskSettings">
-    <property name="label">Save Task Settings _as ...</property>
-    <property name="tooltip">Save the tool, process and task definitions to a new file.</property>
+  <object class="GtkAction" id="Forum">
+    <property name="label">_Forum</property>
   </object>
   <object class="GtkAction" id="GeneralSettings">
     <property name="label">_Preferences</property>
     <property name="tooltip">Configure PyCAM</property>
     <property name="stock_id">gtk-preferences</property>
   </object>
-  <object class="GtkAction" id="Quit">
-    <property name="label">_Quit</property>
-    <property name="tooltip">Exit PyCAM</property>
-    <property name="stock_id">gtk-quit</property>
+  <object class="GtkAction" id="Help3DView">
+    <property name="label">3D _View</property>
   </object>
-  <object class="GtkAction" id="ViewMenu">
-    <property name="label">_View</property>
+  <object class="GtkAction" id="HelpBoundsSettings">
+    <property name="label">_Bounds Settings</property>
+  </object>
+  <object class="GtkAction" id="HelpCommandLine">
+    <property name="label">_Command Line Usage</property>
+  </object>
+  <object class="GtkAction" id="HelpGCodeExport">
+    <property name="label">_GCode Export</property>
+  </object>
+  <object class="GtkAction" id="HelpHotkeys">
+    <property name="label">_Keyboard Shortcuts</property>
+  </object>
+  <object class="GtkAction" id="HelpIntroduction">
+    <property name="label">_Introduction</property>
+  </object>
+  <object class="GtkAction" id="HelpMenu">
+    <property name="label">_Help</property>
+  </object>
+  <object class="GtkAction" id="HelpMenuGUI">
+    <property name="label">_GUI description</property>
+  </object>
+  <object class="GtkAction" id="HelpMenuMisc">
+    <property name="label">Mis_cellaneous</property>
+  </object>
+  <object class="GtkAction" id="HelpModelTransformations">
+    <property name="label">_Model Transformations</property>
+  </object>
+  <object class="GtkAction" id="HelpProcessSettings">
+    <property name="label">_Process Settings</property>
+  </object>
+  <object class="GtkAction" id="HelpServerMode">
+    <property name="label">Server Mode</property>
+  </object>
+  <object class="GtkAction" id="HelpSimulation">
+    <property name="label">_Simulation</property>
+  </object>
+  <object class="GtkAction" id="HelpSupportedFormats">
+    <property name="label">Supported _Formats</property>
+  </object>
+  <object class="GtkAction" id="HelpProjectSetup">
+    <property name="label">_Project Setup</property>
+  </object>
+  <object class="GtkAction" id="HelpToolTypes">
+    <property name="label">T_ool Types</property>
+  </object>
+  <object class="GtkAction" id="HelpTouchOff">
+    <property name="label">_Touch off and tool change</property>
+    <property name="short_label">_Touch off</property>
+  </object>
+  <object class="GtkAction" id="HelpUserManual">
+    <property name="label">User _Manual: Overview</property>
+    <property name="stock_id">gtk-help</property>
+  </object>
+  <object class="GtkAction" id="ResetWorkspace">
+    <property name="label">Reset Workspace to Defaults</property>
+    <property name="tooltip">Reset models, tools, processes, bounds and task definitions to their default values.</property>
+  </object>
+  <object class="GtkAction" id="LoadWorkspace">
+    <property name="label">_Load Workspace ...</property>
+    <property name="tooltip">Load model, tool, process, bound and task definitions from a file.</property>
+  </object>
+  <object class="GtkNotebook" id="MainTabs">
+    <property name="visible">True</property>
+    <property name="can_focus">True</property>
+  </object>
+  <object class="GtkAction" id="OpenModel">
+    <property name="label">_Open Model ...</property>
+    <property name="tooltip">Opens a model file.</property>
+    <property name="stock_id">gtk-open</property>
+  </object>
+  <object class="GtkAction" id="OpenRecentModel">
+    <property name="label">Open _Recent</property>
+  </object>
+  <object class="GtkAction" id="ProjectWebsite">
+    <property name="label">Project _Website</property>
+    <property name="stock_id">gtk-network</property>
+  </object>
+  <object class="GtkWindow" id="ProjectWindow">
+    <property name="can_focus">False</property>
+    <property name="title" translatable="yes">PyCAM</property>
+    <property name="role">pycam-main</property>
+    <property name="destroy_with_parent">True</property>
+    <child>
+      <object class="GtkBox" id="WindowBox">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">2</property>
+      </object>
+    </child>
+  </object>
+  <object class="GtkAboutDialog" id="AboutWindow">
+    <property name="can_focus">False</property>
+    <property name="border_width">5</property>
+    <property name="title" translatable="yes">About PyCAM</property>
+    <property name="role">pycam-about</property>
+    <property name="window_position">center-on-parent</property>
+    <property name="type_hint">normal</property>
+    <property name="gravity">center</property>
+    <property name="transient_for">ProjectWindow</property>
+    <property name="program_name">PyCAM</property>
+    <property name="version">0.1</property>
+    <property name="copyright" translatable="yes">Copyright © 2008-2010 Lode Leroy
+Copyright © 2010-2011 Lars Kruse</property>
+    <property name="comments" translatable="yes">Toolpath Generation for 3-Axis CNC machining</property>
+    <property name="website">http://pycam.sourceforge.net/</property>
+    <property name="website_label" translatable="yes">Website of the PyCAM project</property>
+    <property name="license" translatable="yes">This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+
+PyCAM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</property>
+    <property name="logo">logo_gui.png</property>
+    <property name="wrap_license">True</property>
+    <child internal-child="vbox">
+      <object class="GtkBox" id="dialog-box2">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">2</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="AboutWindowButtons">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+        <child>
+          <placeholder/>
+        </child>
+      </object>
+    </child>
   </object>
   <object class="GtkDialog" id="GeneralSettingsWindow">
+    <property name="can_focus">False</property>
     <property name="border_width">5</property>
     <property name="title" translatable="yes">PyCAM Preferences</property>
     <property name="role">pycam-preferences</property>
@@ -61,13 +187,56 @@
     <property name="type_hint">normal</property>
     <property name="transient_for">ProjectWindow</property>
     <child internal-child="vbox">
-      <object class="GtkVBox" id="dialog-vbox1">
+      <object class="GtkBox" id="dialog-box1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">2</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="dialog-action_area1">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
+            <child>
+              <object class="GtkButton" id="ResetPreferencesButton">
+                <property name="label">gtk-revert-to-saved</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
+            <child>
+              <object class="GtkButton" id="CloseSettingsWindow">
+                <property name="label">gtk-close</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
         <child>
           <object class="GtkImage" id="logo">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="ypad">2</property>
             <property name="pixbuf">logo_gui.png</property>
           </object>
@@ -85,56 +254,20 @@
             <child>
               <object class="GtkFrame" id="GeneralSettingsPrefTab">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label_xalign">0</property>
                 <property name="shadow_type">none</property>
                 <child>
                   <object class="GtkAlignment" id="alignment6">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="left_padding">12</property>
                     <child>
-                      <object class="GtkVBox" id="GeneralPreferencesBox">
+                      <object class="GtkBox" id="GeneralPreferencesBox">
                         <property name="visible">True</property>
+                        <property name="can_focus">False</property>
                         <property name="orientation">vertical</property>
                         <property name="spacing">2</property>
-                        <child>
-                          <object class="GtkVBox" id="TaskSettingsDefaultFileBox">
-                            <property name="visible">True</property>
-                            <property name="orientation">vertical</property>
-                            <child>
-                              <object class="GtkCheckButton" id="AutoLoadTaskFile">
-                                <property name="label" translatable="yes">Load custom task settings on startup</property>
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">False</property>
-                                <property name="draw_indicator">True</property>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="position">0</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkAlignment" id="StartupTaskFileBox">
-                                <property name="visible">True</property>
-                                <property name="left_padding">20</property>
-                                <child>
-                                  <object class="GtkFileChooserButton" id="StartupTaskFile">
-                                    <property name="visible">True</property>
-                                    <property name="title" translatable="yes">Choose custom task settings file loading on startup</property>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
                       </object>
                     </child>
                   </object>
@@ -142,6 +275,7 @@
                 <child type="label">
                   <object class="GtkLabel" id="GeneralSettingsFrameLabel">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">&lt;b&gt;General Settings&lt;/b&gt;</property>
                     <property name="use_markup">True</property>
                   </object>
@@ -151,6 +285,7 @@
             <child type="tab">
               <object class="GtkLabel" id="GeneralSettingsTabLabel">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">General</property>
               </object>
               <packing>
@@ -160,17 +295,18 @@
             <child>
               <object class="GtkFrame" id="ProgramsPrefTab">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label_xalign">0</property>
                 <property name="shadow_type">none</property>
                 <child>
                   <object class="GtkAlignment" id="alignment38">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="left_padding">12</property>
                     <child>
-                      <object class="GtkTable" id="table11">
+                      <object class="GtkGrid" id="grid11">
                         <property name="visible">True</property>
-                        <property name="n_rows">3</property>
-                        <property name="n_columns">4</property>
+                        <property name="can_focus">False</property>
                         <property name="column_spacing">3</property>
                         <child>
                           <object class="GtkLinkButton" id="ExternalProgramInkscapeLink">
@@ -184,8 +320,8 @@
                             <property name="uri">http://inkscape.org</property>
                           </object>
                           <packing>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
+                            <property name="left_attach">0</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
@@ -200,10 +336,8 @@
                             <property name="uri">http://www.pstoedit.net/pstoedit</property>
                           </object>
                           <packing>
+                            <property name="left_attach">0</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
@@ -215,9 +349,7 @@
                           </object>
                           <packing>
                             <property name="left_attach">3</property>
-                            <property name="right_attach">4</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
@@ -229,11 +361,7 @@
                           </object>
                           <packing>
                             <property name="left_attach">3</property>
-                            <property name="right_attach">4</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
@@ -245,9 +373,7 @@
                           </object>
                           <packing>
                             <property name="left_attach">2</property>
-                            <property name="right_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
@@ -259,37 +385,29 @@
                           </object>
                           <packing>
                             <property name="left_attach">2</property>
-                            <property name="right_attach">3</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkEntry" id="ExternalProgramInkscapeControl">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
-                            <property name="y_options">GTK_FILL</property>
+                            <property name="top_attach">0</property>
                           </packing>
                         </child>
                         <child>
                           <object class="GtkEntry" id="ExternalProgramPstoeditControl">
                             <property name="visible">True</property>
                             <property name="can_focus">True</property>
-                            <property name="invisible_char">&#x25CF;</property>
+                            <property name="invisible_char">●</property>
                           </object>
                           <packing>
                             <property name="left_attach">1</property>
-                            <property name="right_attach">2</property>
                             <property name="top_attach">1</property>
-                            <property name="bottom_attach">2</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
                         <child>
@@ -305,13 +423,31 @@
                             <property name="uri">http://pycam.sourceforge.net/requirements/#optional-external-programs</property>
                           </object>
                           <packing>
-                            <property name="right_attach">4</property>
+                            <property name="left_attach">4</property>
                             <property name="top_attach">2</property>
-                            <property name="bottom_attach">3</property>
-                            <property name="x_options">GTK_FILL</property>
-                            <property name="y_options">GTK_FILL</property>
                           </packing>
                         </child>
+                        <child>
+                          <placeholder/>
+                        </child>
+                        <child>
+                          <placeholder/>
+                        </child>
+                        <child>
+                          <placeholder/>
+                        </child>
+                        <child>
+                          <placeholder/>
+                        </child>
+                        <child>
+                          <placeholder/>
+                        </child>
+                        <child>
+                          <placeholder/>
+                        </child>
+                        <child>
+                          <placeholder/>
+                        </child>
                       </object>
                     </child>
                   </object>
@@ -319,6 +455,7 @@
                 <child type="label">
                   <object class="GtkLabel" id="ProgramsSettingsFrameLabel">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">&lt;b&gt;External programs&lt;/b&gt;</property>
                     <property name="use_markup">True</property>
                   </object>
@@ -331,6 +468,7 @@
             <child type="tab">
               <object class="GtkLabel" id="ProgramsSettingsTabLabel">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="label" translatable="yes">Programs</property>
               </object>
               <packing>
@@ -345,45 +483,6 @@
             <property name="position">3</property>
           </packing>
         </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="dialog-action_area1">
-            <property name="visible">True</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="ResetPreferencesButton">
-                <property name="label">gtk-revert-to-saved</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="CloseSettingsWindow">
-                <property name="label">gtk-close</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
       </object>
     </child>
     <action-widgets>
@@ -391,143 +490,28 @@
       <action-widget response="0">CloseSettingsWindow</action-widget>
     </action-widgets>
   </object>
-  <object class="GtkAboutDialog" id="AboutWindow">
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes">About PyCAM</property>
-    <property name="role">pycam-about</property>
-    <property name="window_position">center-on-parent</property>
-    <property name="type_hint">normal</property>
-    <property name="gravity">center</property>
-    <property name="transient_for">ProjectWindow</property>
-    <property name="program_name">PyCAM</property>
-    <property name="version">0.1</property>
-    <property name="copyright" translatable="yes">Copyright &#xA9; 2008-2010 Lode Leroy
-Copyright &#xA9; 2010-2011 Lars Kruse</property>
-    <property name="comments" translatable="yes">Toolpath Generation for 3-Axis CNC machining</property>
-    <property name="website">http://pycam.sourceforge.net/</property>
-    <property name="website_label" translatable="yes">Website of the PyCAM project</property>
-    <property name="license" translatable="yes">This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
-
-PyCAM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</property>
-    <property name="logo">logo_gui.png</property>
-    <property name="wrap_license">True</property>
-    <child internal-child="vbox">
-      <object class="GtkVBox" id="dialog-vbox2">
-        <property name="visible">True</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">2</property>
-        <child>
-          <placeholder/>
-        </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="AboutWindowButtons">
-            <property name="visible">True</property>
-            <property name="layout_style">end</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-  <object class="GtkAction" id="About">
-    <property name="label">_About</property>
-    <property name="stock_id">gtk-about</property>
-  </object>
-  <object class="GtkAction" id="HelpMenu">
-    <property name="label">_Help</property>
-  </object>
-  <object class="GtkAction" id="HelpMenuMisc">
-    <property name="label">Mis_cellaneous</property>
-  </object>
-  <object class="GtkAction" id="HelpMenuGUI">
-    <property name="label">_GUI description</property>
-  </object>
-  <object class="GtkAction" id="HelpUserManual">
-    <property name="label">User _Manual: Overview</property>
-    <property name="stock_id">gtk-help</property>
-  </object>
-  <object class="GtkAction" id="HelpIntroduction">
-    <property name="label">_Introduction</property>
-  </object>
-  <object class="GtkAction" id="HelpSupportedFormats">
-    <property name="label">Supported _Formats</property>
-  </object>
-  <object class="GtkAction" id="HelpModelTransformations">
-    <property name="label">_Model Transformations</property>
-  </object>
-  <object class="GtkAction" id="HelpToolTypes">
-    <property name="label">T_ool Types</property>
-  </object>
-  <object class="GtkAction" id="HelpProcessSettings">
-    <property name="label">_Process Settings</property>
-  </object>
-  <object class="GtkAction" id="HelpBoundsSettings">
-    <property name="label">_Bounds Settings</property>
-  </object>
-  <object class="GtkAction" id="HelpTaskSetup">
-    <property name="label">_Task Setup</property>
-  </object>
-  <object class="GtkAction" id="HelpGCodeExport">
-    <property name="label">_GCode Export</property>
-  </object>
-  <object class="GtkAction" id="HelpSimulation">
-    <property name="label">_Simulation</property>
-  </object>
-  <object class="GtkAction" id="Help3DView">
-    <property name="label">3D _View</property>
-  </object>
-  <object class="GtkAction" id="HelpCommandLine">
-    <property name="label">_Command Line Usage</property>
-  </object>
-  <object class="GtkAction" id="ProjectWebsite">
-    <property name="label">Project _Website</property>
-    <property name="stock_id">gtk-network</property>
-  </object>
-  <object class="GtkAction" id="Forum">
-    <property name="label">_Forum</property>
-  </object>
-  <object class="GtkAction" id="BugTracker">
-    <property name="label">Report a _Bug</property>
-  </object>
-  <object class="GtkAction" id="FeatureRequest">
-    <property name="label">Re_quest a Feature</property>
-  </object>
-  <object class="GtkAction" id="HelpHotkeys">
-    <property name="label">_Keyboard Shortcuts</property>
-  </object>
-  <object class="GtkAction" id="OpenRecentModel">
-    <property name="label">Open _Recent</property>
+  <object class="GtkAction" id="Quit">
+    <property name="label">_Quit</property>
+    <property name="tooltip">Exit PyCAM</property>
+    <property name="stock_id">gtk-quit</property>
   </object>
-  <object class="GtkAction" id="DevelopmentBlog">
-    <property name="label">_Development Blog</property>
+  <object class="GtkAction" id="SaveAsWorkspace">
+    <property name="label">Save Workspace _as ...</property>
+    <property name="tooltip">Save the models, tools, processes, bounds and tasks definitions to a new file.</property>
   </object>
-  <object class="GtkAction" id="HelpServerMode">
-    <property name="label">Server Mode</property>
+  <object class="GtkAction" id="SaveWorkspace">
+    <property name="label">_Save Workspace</property>
+    <property name="tooltip">Save the models, tools, processes, bounds and tasks definitions.</property>
+    <property name="stock_id">gtk-save-as</property>
   </object>
-  <object class="GtkAction" id="EditMenu">
-    <property name="label">_Edit</property>
+  <object class="GtkAction" id="SettingsMenu">
+    <property name="label">_Settings</property>
   </object>
   <object class="GtkAction" id="UndoButton">
-    <property name="label">Undo latest model change</property>
+    <property name="label">Undo latest workspace change</property>
     <property name="stock_id">gtk-undo</property>
   </object>
-  <object class="GtkAction" id="HelpTouchOff">
-    <property name="label">_Touch off and tool change</property>
-    <property name="short_label">_Touch off</property>
-  </object>
-  <object class="GtkNotebook" id="MainTabs">
-    <property name="visible">True</property>
-    <property name="can_focus">True</property>
-  </object>
-  <object class="GtkAction" id="ExportMenu">
-    <property name="label">_Export</property>
-    <property name="short_label">_Export</property>
+  <object class="GtkAction" id="ViewMenu">
+    <property name="label">_View</property>
   </object>
 </interface>
diff --git a/share/ui/tasks.ui b/share/ui/tasks.ui
index 4ae19ee..a47a1c6 100644
--- a/share/ui/tasks.ui
+++ b/share/ui/tasks.ui
@@ -1,16 +1,17 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkAdjustment" id="speed">
-    <property name="lower">1</property>
-    <property name="upper">10000</property>
-    <property name="step_increment">1</property>
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkImage" id="GenerateOneToolPathIcon">
+    <property name="visible">True</property>
+    <property name="can_focus">False</property>
+    <property name="stock">gtk-execute</property>
   </object>
-  <object class="GtkAdjustment" id="feedrate">
-    <property name="lower">1</property>
-    <property name="upper">10000</property>
-    <property name="step_increment">1</property>
+  <object class="GtkListStore" id="TaskList">
+    <columns>
+      <!-- column-name uuid -->
+      <column type="gchararray"/>
+    </columns>
   </object>
   <object class="GtkListStore" id="TaskTypeList">
     <columns>
@@ -26,26 +27,19 @@
       </row>
     </data>
   </object>
-  <object class="GtkListStore" id="TaskList">
-    <columns>
-      <!-- column-name uuid -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkVPaned" id="TaskBox">
+  <object class="GtkPaned" id="TaskBox">
     <property name="visible">True</property>
     <property name="can_focus">True</property>
     <property name="orientation">vertical</property>
     <child>
-      <object class="GtkHBox" id="hbox19">
+      <object class="GtkBox" id="hbox19">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">2</property>
         <child>
           <object class="GtkScrolledWindow" id="scrolledwindow3">
             <property name="visible">True</property>
             <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">automatic</property>
-            <property name="vscrollbar_policy">automatic</property>
             <property name="shadow_type">etched-in</property>
             <child>
               <object class="GtkTreeView" id="TaskView">
@@ -56,13 +50,16 @@
                 <property name="headers_clickable">False</property>
                 <property name="enable_search">False</property>
                 <property name="search_column">0</property>
+                <child internal-child="selection">
+                  <object class="GtkTreeSelection" id="treeview-selection1"/>
+                </child>
                 <child>
                   <object class="GtkTreeViewColumn" id="NameColumn">
                     <property name="title">Name</property>
                     <child>
                       <object class="GtkCellRendererText" id="NameCell">
                         <property name="editable">True</property>
-		      </object>
+                      </object>
                     </child>
                   </object>
                 </child>
@@ -70,16 +67,20 @@
             </child>
           </object>
           <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkVBox" id="vbox35">
+          <object class="GtkBox" id="vbox35">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <child>
-              <object class="GtkVButtonBox" id="vbuttonbox4">
+              <object class="GtkButtonBox" id="buttonbox4">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="layout_style">center</property>
                 <child>
@@ -169,6 +170,8 @@
                 </child>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
@@ -184,12 +187,14 @@
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
@@ -200,32 +205,38 @@
       </packing>
     </child>
     <child>
-      <object class="GtkVBox" id="TaskDetails">
+      <object class="GtkBox" id="TaskDetails">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">5</property>
         <child>
           <object class="GtkAlignment" id="TaskChooserBox">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="xscale">0</property>
             <property name="yscale">0</property>
             <child>
-              <object class="GtkHBox" id="hbox1">
+              <object class="GtkBox" id="hbox1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="spacing">3</property>
                 <child>
                   <object class="GtkLabel" id="label1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Task type:</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkComboBox" id="TaskTypeSelector">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="model">TaskTypeList</property>
                     <child>
                       <object class="GtkCellRendererText" id="cellrenderertext1"/>
@@ -236,6 +247,7 @@
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
@@ -243,12 +255,15 @@
             </child>
           </object>
           <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkHBox" id="TaskParameterBox">
+          <object class="GtkBox" id="TaskParameterBox">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="spacing">5</property>
             <child>
               <placeholder/>
@@ -256,6 +271,7 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
@@ -266,8 +282,14 @@
       </packing>
     </child>
   </object>
-  <object class="GtkImage" id="GenerateOneToolPathIcon">
-    <property name="visible">True</property>
-    <property name="stock">gtk-execute</property>
+  <object class="GtkAdjustment" id="feedrate">
+    <property name="lower">1</property>
+    <property name="upper">10000</property>
+    <property name="step_increment">1</property>
+  </object>
+  <object class="GtkAdjustment" id="speed">
+    <property name="lower">1</property>
+    <property name="upper">100000</property>
+    <property name="step_increment">1</property>
   </object>
 </interface>
diff --git a/share/ui/toolpath_crop.ui b/share/ui/toolpath_crop.ui
index 8efe0ef..3e76946 100644
--- a/share/ui/toolpath_crop.ui
+++ b/share/ui/toolpath_crop.ui
@@ -1,7 +1,7 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.20.2 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkAdjustment" id="ToolpathCropMarginValue">
     <property name="lower">-1000</property>
     <property name="upper">1000</property>
@@ -14,39 +14,64 @@
   </object>
   <object class="GtkFrame" id="ToolpathCropFrame">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <property name="label_xalign">0</property>
     <property name="shadow_type">none</property>
     <child>
       <object class="GtkAlignment" id="alignment1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="left_padding">12</property>
         <child>
-          <object class="GtkVBox" id="vbox">
+          <object class="GtkBox" id="box">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <property name="spacing">3</property>
+            <child>
+              <object class="GtkLabel" id="ToolpathCropUsageHint">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="label" translatable="yes">Reduce the toolpath moves to the area enclosed by the outer limits of a selected model.
+BEWARE: currently only 2D models are supported. </property>
+                <property name="wrap">True</property>
+                <property name="width_chars">45</property>
+                <property name="xalign">0</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">0</property>
+              </packing>
+            </child>
             <child>
               <object class="GtkAlignment" id="ModelTableContainer">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <child>
                   <placeholder/>
                 </child>
               </object>
               <packing>
-                <property name="position">0</property>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
+                <property name="position">1</property>
               </packing>
             </child>
             <child>
               <object class="GtkViewport" id="ToolpathCropInfoBox">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="resize_mode">queue</property>
                 <property name="shadow_type">etched-out</property>
                 <child>
                   <object class="GtkLabel" id="ToolpathCropInfo">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="label" translatable="yes">/* to be overwritten with hints during runtime */</property>
+                    <property name="wrap">True</property>
+                    <property name="width_chars">45</property>
                     <property name="xalign">0</property>
-                    <property name="ypad">1</property>
-                    <property name="label" translatable="yes">label</property>
                     <attributes>
                       <attribute name="weight" value="semibold"/>
                       <attribute name="foreground" value="#ffff00000000"/>
@@ -56,75 +81,73 @@
               </object>
               <packing>
                 <property name="expand">False</property>
-                <property name="position">1</property>
+                <property name="fill">True</property>
+                <property name="position">2</property>
               </packing>
             </child>
             <child>
-              <object class="GtkTable" id="table1">
+              <object class="GtkGrid" id="grid1">
                 <property name="visible">True</property>
-                <property name="n_rows">2</property>
-                <property name="n_columns">2</property>
-                <property name="column_spacing">3</property>
+                <property name="can_focus">False</property>
                 <property name="row_spacing">3</property>
+                <property name="column_spacing">3</property>
                 <child>
                   <object class="GtkLabel" id="ToolpathCropMarginLabel">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Margin:</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
+                    <property name="left_attach">0</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkSpinButton" id="ToolpathCropMargin">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="width_chars">5</property>
                     <property name="adjustment">ToolpathCropMarginValue</property>
                     <property name="digits">2</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="ToolpathCropZSliceLabel">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Slicing level (z):</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
-                    <property name="y_options">GTK_FILL</property>
+                    <property name="left_attach">0</property>
+                    <property name="top_attach">0</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkSpinButton" id="ToolpathCropZSlice">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="width_chars">5</property>
                     <property name="adjustment">ToolpathCropZSliceValue</property>
                     <property name="digits">2</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
-                    <property name="y_options">GTK_FILL</property>
+                    <property name="top_attach">0</property>
                   </packing>
                 </child>
               </object>
               <packing>
                 <property name="expand">False</property>
-                <property name="position">2</property>
+                <property name="fill">True</property>
+                <property name="position">3</property>
               </packing>
             </child>
             <child>
@@ -133,17 +156,20 @@
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
                 <property name="receives_default">False</property>
+                <property name="xalign">0.5</property>
                 <property name="active">True</property>
                 <property name="draw_indicator">True</property>
               </object>
               <packing>
                 <property name="expand">False</property>
-                <property name="position">3</property>
+                <property name="fill">True</property>
+                <property name="position">4</property>
               </packing>
             </child>
             <child>
-              <object class="GtkHButtonBox" id="hbuttonbox1">
+              <object class="GtkButtonBox" id="buttonbox1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="layout_style">start</property>
                 <child>
                   <object class="GtkButton" id="CropButton">
@@ -162,7 +188,8 @@
               </object>
               <packing>
                 <property name="expand">False</property>
-                <property name="position">4</property>
+                <property name="fill">True</property>
+                <property name="position">5</property>
               </packing>
             </child>
           </object>
@@ -172,6 +199,7 @@
     <child type="label">
       <object class="GtkLabel" id="label1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">&lt;b&gt;Crop toolpath&lt;/b&gt;</property>
         <property name="use_markup">True</property>
       </object>
diff --git a/share/ui/toolpath_export.ui b/share/ui/toolpath_export.ui
index 502b164..855a596 100644
--- a/share/ui/toolpath_export.ui
+++ b/share/ui/toolpath_export.ui
@@ -1,18 +1,35 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkListStore" id="PostprocessorList">
+    <columns>
+      <!-- column-name label -->
+      <column type="gchararray"/>
+      <!-- column-name name -->
+      <column type="gchararray"/>
+    </columns>
+    <data>
+      <row>
+        <col id="0" translatable="yes">LinuxCNC</col>
+        <col id="1" translatable="yes">linuxcnc</col>
+      </row>
+    </data>
+  </object>
   <object class="GtkFrame" id="ToolpathExportFrame">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <property name="label_xalign">0</property>
     <property name="shadow_type">none</property>
     <child>
       <object class="GtkAlignment" id="alignment1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="left_padding">12</property>
         <child>
-          <object class="GtkVButtonBox" id="hbuttonbox1">
+          <object class="GtkButtonBox" id="buttonbox1">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="layout_style">center</property>
             <child>
               <object class="GtkButton" id="ExportGCodeAll">
@@ -61,23 +78,10 @@
     <child type="label">
       <object class="GtkLabel" id="label1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">&lt;b&gt;Save toolpath as GCode&lt;/b&gt;</property>
         <property name="use_markup">True</property>
       </object>
     </child>
   </object>
-  <object class="GtkListStore" id="PostprocessorList">
-    <columns>
-      <!-- column-name label -->
-      <column type="gchararray"/>
-      <!-- column-name name -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes">LinuxCNC</col>
-        <col id="1" translatable="yes">linuxcnc</col>
-      </row>
-    </data>
-  </object>
 </interface>
diff --git a/share/ui/toolpath_grid.ui b/share/ui/toolpath_grid.ui
index 929f4e0..899d059 100644
--- a/share/ui/toolpath_grid.ui
+++ b/share/ui/toolpath_grid.ui
@@ -1,232 +1,190 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkAdjustment" id="GridXDistanceValue">
-    <property name="lower">-1000</property>
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="GridXCountValue">
+    <property name="lower">1</property>
     <property name="upper">1000</property>
     <property name="step_increment">1</property>
   </object>
-  <object class="GtkAdjustment" id="GridYDistanceValue">
+  <object class="GtkAdjustment" id="GridXDistanceValue">
     <property name="lower">-1000</property>
     <property name="upper">1000</property>
     <property name="step_increment">1</property>
   </object>
-  <object class="GtkAdjustment" id="GridXCountValue">
+  <object class="GtkAdjustment" id="GridYCountValue">
     <property name="lower">1</property>
     <property name="upper">1000</property>
     <property name="step_increment">1</property>
   </object>
-  <object class="GtkAdjustment" id="GridYCountValue">
-    <property name="lower">1</property>
+  <object class="GtkAdjustment" id="GridYDistanceValue">
+    <property name="lower">-1000</property>
     <property name="upper">1000</property>
     <property name="step_increment">1</property>
   </object>
   <object class="GtkFrame" id="ToolpathGridFrame">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <property name="label_xalign">0</property>
     <property name="shadow_type">none</property>
     <child>
       <object class="GtkAlignment" id="alignment1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="left_padding">12</property>
         <child>
-          <object class="GtkVBox" id="vbox1">
+          <object class="GtkBox" id="box1">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <property name="spacing">3</property>
             <child>
-              <object class="GtkTable" id="ToolpathGridTable">
+              <object class="GtkGrid" id="ToolpathGridTable">
                 <property name="visible">True</property>
-                <property name="n_rows">4</property>
-                <property name="n_columns">3</property>
-                <property name="column_spacing">3</property>
+                <property name="can_focus">False</property>
                 <property name="row_spacing">3</property>
-                <property name="homogeneous">True</property>
+                <property name="column_spacing">3</property>
                 <child>
                   <object class="GtkLabel" id="LabelGridRows">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Rows</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
+                    <property name="top_attach">0</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="LabelGridColumns">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Columns</property>
                   </object>
                   <packing>
                     <property name="left_attach">2</property>
-                    <property name="right_attach">3</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
+                    <property name="top_attach">0</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="LabelGridCount">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Count:</property>
                   </object>
                   <packing>
+                    <property name="left_attach">0</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="LabelGridDistance">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Distance:</property>
                   </object>
                   <packing>
+                    <property name="left_attach">0</property>
                     <property name="top_attach">2</property>
-                    <property name="bottom_attach">3</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkSpinButton" id="GridYCount">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="adjustment">GridYCountValue</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkSpinButton" id="GridXCount">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="adjustment">GridXCountValue</property>
                   </object>
                   <packing>
                     <property name="left_attach">2</property>
-                    <property name="right_attach">3</property>
                     <property name="top_attach">1</property>
-                    <property name="bottom_attach">2</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkSpinButton" id="GridYDistance">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="adjustment">GridYDistanceValue</property>
                     <property name="digits">3</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
                     <property name="top_attach">2</property>
-                    <property name="bottom_attach">3</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkSpinButton" id="GridXDistance">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="adjustment">GridXDistanceValue</property>
                     <property name="digits">3</property>
                   </object>
                   <packing>
                     <property name="left_attach">2</property>
-                    <property name="right_attach">3</property>
                     <property name="top_attach">2</property>
-                    <property name="bottom_attach">3</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
-                <child>
-                  <object class="GtkAlignment" id="alignment47">
-                    <property name="visible">True</property>
-                    <child>
-                      <placeholder/>
-                    </child>
-                  </object>
-                </child>
                 <child>
                   <object class="GtkLabel" id="LabelWidth">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Width:</property>
                   </object>
                   <packing>
+                    <property name="left_attach">0</property>
                     <property name="top_attach">3</property>
-                    <property name="bottom_attach">4</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="LabelGridYWidth">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">?</property>
                   </object>
                   <packing>
                     <property name="left_attach">1</property>
-                    <property name="right_attach">2</property>
                     <property name="top_attach">3</property>
-                    <property name="bottom_attach">4</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="LabelGridXWidth">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">?</property>
                   </object>
                   <packing>
                     <property name="left_attach">2</property>
-                    <property name="right_attach">3</property>
                     <property name="top_attach">3</property>
-                    <property name="bottom_attach">4</property>
-                    <property name="x_options">GTK_FILL</property>
-                    <property name="y_options">GTK_FILL</property>
                   </packing>
                 </child>
+                <child>
+                  <placeholder/>
+                </child>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkCheckButton" id="KeepOriginal">
-                <property name="label" translatable="yes">Keep original toolpath</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">False</property>
-                <property name="active">True</property>
-                <property name="draw_indicator">True</property>
-              </object>
-              <packing>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkHButtonBox" id="hbuttonbox1">
+              <object class="GtkButtonBox" id="buttonbox1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="layout_style">start</property>
                 <child>
                   <object class="GtkButton" id="GridCreate">
@@ -245,6 +203,7 @@
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">2</property>
               </packing>
             </child>
@@ -255,6 +214,7 @@
     <child type="label">
       <object class="GtkLabel" id="label1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">&lt;b&gt;Clone toolpath as grid&lt;/b&gt;</property>
         <property name="use_markup">True</property>
       </object>
diff --git a/share/ui/toolpath_processors.ui b/share/ui/toolpath_processors.ui
deleted file mode 100644
index 90981d5..0000000
--- a/share/ui/toolpath_processors.ui
+++ /dev/null
@@ -1,121 +0,0 @@
-<?xml version="1.0"?>
-<interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkDialog" id="GCodePreferencesWindow">
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes">GCode preferences</property>
-    <property name="type_hint">normal</property>
-    <child internal-child="vbox">
-      <object class="GtkVBox" id="dialog-vbox1">
-        <property name="visible">True</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">2</property>
-        <child>
-          <object class="GtkNotebook" id="GCodePrefsNotebook">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="tab_pos">left</property>
-          </object>
-          <packing>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child internal-child="action_area">
-          <object class="GtkHButtonBox" id="dialog-action_area1">
-            <property name="visible">True</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="CloseButton">
-                <property name="label">gtk-close</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="0">CloseButton</action-widget>
-    </action-widgets>
-  </object>
-  <object class="GtkFrame" id="SettingsFrame">
-    <property name="visible">True</property>
-    <property name="label_xalign">0</property>
-    <property name="shadow_type">none</property>
-    <child>
-      <object class="GtkAlignment" id="Align1">
-        <property name="visible">True</property>
-        <property name="xscale">0</property>
-        <property name="yscale">0</property>
-        <property name="left_padding">12</property>
-        <child>
-          <object class="GtkVBox" id="VBox">
-            <property name="visible">True</property>
-            <property name="orientation">vertical</property>
-            <property name="spacing">3</property>
-            <child>
-              <object class="GtkAlignment" id="SelectorsContainer">
-                <property name="visible">True</property>
-                <property name="xscale">0</property>
-                <property name="yscale">0</property>
-                <child>
-                  <placeholder/>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkHButtonBox" id="hbuttonbox1">
-                <property name="visible">True</property>
-                <child>
-                  <object class="GtkButton" id="PreferencesButton">
-                    <property name="label">gtk-preferences</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">True</property>
-                    <property name="use_stock">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-        </child>
-      </object>
-    </child>
-    <child type="label">
-      <object class="GtkLabel" id="label1">
-        <property name="visible">True</property>
-        <property name="label" translatable="yes">&lt;b&gt;Settings&lt;/b&gt;</property>
-        <property name="use_markup">True</property>
-      </object>
-    </child>
-  </object>
-</interface>
diff --git a/share/ui/toolpath_simulation.ui b/share/ui/toolpath_simulation.ui
index 80bd548..f2f134d 100644
--- a/share/ui/toolpath_simulation.ui
+++ b/share/ui/toolpath_simulation.ui
@@ -1,7 +1,12 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkAdjustment" id="SimulationDetailsValue">
+    <property name="lower">1</property>
+    <property name="upper">10</property>
+    <property name="step_increment">1</property>
+  </object>
   <object class="GtkAdjustment" id="SimulationProgressTimelineValue">
     <property name="upper">1</property>
     <property name="step_increment">1</property>
@@ -11,71 +16,77 @@
     <property name="upper">100000</property>
     <property name="step_increment">0.25</property>
   </object>
-  <object class="GtkAdjustment" id="SimulationDetailsValue">
-    <property name="lower">1</property>
-    <property name="upper">10</property>
-    <property name="step_increment">1</property>
-  </object>
   <object class="GtkFrame" id="SimulationBox">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <property name="label_xalign">0</property>
     <property name="shadow_type">none</property>
     <child>
       <object class="GtkAlignment" id="alignment1">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="top_padding">3</property>
         <property name="left_padding">12</property>
         <child>
-          <object class="GtkVBox" id="vbox1">
+          <object class="GtkBox" id="box1">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <property name="spacing">3</property>
             <child>
-              <object class="GtkHBox" id="hbox1">
+              <object class="GtkBox" id="box2">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <child>
                   <object class="GtkLabel" id="SimulationProgressTimelineLabel">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Progress:</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkLabel" id="SimulationProgressTimeDisplay">
                     <property name="visible">True</property>
-                    <property name="xalign">1</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">0:20 / 4:45</property>
+                    <property name="xalign">1</property>
                   </object>
                   <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
             <child>
-              <object class="GtkHScale" id="SimulationProgressTimeline">
+              <object class="GtkScale" id="SimulationProgressTimeline">
                 <property name="visible">True</property>
                 <property name="can_focus">True</property>
-                <property name="update_policy">delayed</property>
                 <property name="adjustment">SimulationProgressTimelineValue</property>
                 <property name="draw_value">False</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">1</property>
               </packing>
             </child>
             <child>
-              <object class="GtkHButtonBox" id="hbuttonbox1">
+              <object class="GtkButtonBox" id="buttonbox1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="spacing">3</property>
                 <child>
                   <object class="GtkButton" id="SimulationStartButton">
@@ -127,25 +138,31 @@
               </packing>
             </child>
             <child>
-              <object class="GtkHSeparator" id="hseparator1">
+              <object class="GtkSeparator" id="separator1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
               </object>
               <packing>
                 <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">3</property>
               </packing>
             </child>
             <child>
-              <object class="GtkHBox" id="hbox36">
+              <object class="GtkBox" id="box36">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="spacing">4</property>
                 <child>
                   <object class="GtkLabel" id="SimulationSpeedFactorLabel">
                     <property name="visible">True</property>
-                    <property name="xalign">0</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Simulation speed:</property>
+                    <property name="xalign">0</property>
                   </object>
                   <packing>
+                    <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
@@ -153,7 +170,7 @@
                   <object class="GtkSpinButton" id="SimulationSpeedFactorControl">
                     <property name="visible">True</property>
                     <property name="can_focus">True</property>
-                    <property name="invisible_char">&#x25CF;</property>
+                    <property name="invisible_char">●</property>
                     <property name="adjustment">SimulationSpeedFactorValue</property>
                     <property name="digits">2</property>
                   </object>
@@ -177,6 +194,7 @@
     <child type="label">
       <object class="GtkLabel" id="SimulationFrameLabel">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">&lt;b&gt;Simulation&lt;/b&gt;</property>
         <property name="use_markup">True</property>
       </object>
diff --git a/share/ui/toolpaths.ui b/share/ui/toolpaths.ui
index 5dd978f..db3ba5c 100644
--- a/share/ui/toolpaths.ui
+++ b/share/ui/toolpaths.ui
@@ -1,27 +1,26 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
   <object class="GtkListStore" id="ToolpathListModel">
     <columns>
       <!-- column-name ref -->
       <column type="gchararray"/>
     </columns>
   </object>
-  <object class="GtkVPaned" id="ToolpathsBox">
+  <object class="GtkPaned" id="ToolpathsBox">
     <property name="visible">True</property>
     <property name="can_focus">True</property>
     <property name="orientation">vertical</property>
     <child>
-      <object class="GtkHBox" id="ToolpathsList">
+      <object class="GtkBox" id="ToolpathsList">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">5</property>
         <child>
           <object class="GtkScrolledWindow" id="scrolledwindow1">
             <property name="visible">True</property>
             <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">automatic</property>
-            <property name="vscrollbar_policy">automatic</property>
             <property name="shadow_type">etched-in</property>
             <child>
               <object class="GtkTreeView" id="ToolpathTable">
@@ -30,6 +29,9 @@
                 <property name="model">ToolpathListModel</property>
                 <property name="headers_clickable">False</property>
                 <property name="search_column">0</property>
+                <child internal-child="selection">
+                  <object class="GtkTreeSelection" id="treeview-selection1"/>
+                </child>
                 <child>
                   <object class="GtkTreeViewColumn" id="ToolpathVisibleColumn">
                     <property name="title">Visible</property>
@@ -62,12 +64,15 @@
             </child>
           </object>
           <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkVButtonBox" id="vbuttonbox5">
+          <object class="GtkButtonBox" id="buttonbox5">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <property name="layout_style">center</property>
             <child>
@@ -129,6 +134,7 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
diff --git a/share/ui/tools.ui b/share/ui/tools.ui
index fabc32a..35bfdbe 100644
--- a/share/ui/tools.ui
+++ b/share/ui/tools.ui
@@ -1,16 +1,12 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.20.1 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkAdjustment" id="torusdiameter">
-    <property name="lower">0.0001</property>
-    <property name="upper">500</property>
-    <property name="step_increment">0.050000000000000003</property>
-  </object>
-  <object class="GtkAdjustment" id="tooldiameter">
-    <property name="lower">0.0001</property>
-    <property name="upper">500</property>
-    <property name="step_increment">0.10000000000000001</property>
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkListStore" id="ToolList">
+    <columns>
+      <!-- column-name uuid -->
+      <column type="gchararray"/>
+    </columns>
   </object>
   <object class="GtkListStore" id="ToolShapeList">
     <columns>
@@ -26,26 +22,19 @@
       </row>
     </data>
   </object>
-  <object class="GtkListStore" id="ToolList">
-    <columns>
-      <!-- column-name uuid -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkVPaned" id="ToolBox">
+  <object class="GtkPaned" id="ToolBox">
     <property name="visible">True</property>
     <property name="can_focus">True</property>
     <property name="orientation">vertical</property>
     <child>
-      <object class="GtkHBox" id="hbox9">
+      <object class="GtkBox" id="hbox9">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="spacing">4</property>
         <child>
           <object class="GtkScrolledWindow" id="scrolledwindow6">
             <property name="visible">True</property>
             <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">automatic</property>
-            <property name="vscrollbar_policy">automatic</property>
             <property name="shadow_type">etched-in</property>
             <child>
               <object class="GtkTreeView" id="ToolTable">
@@ -54,6 +43,9 @@
                 <property name="model">ToolList</property>
                 <property name="headers_clickable">False</property>
                 <property name="search_column">0</property>
+                <child internal-child="selection">
+                  <object class="GtkTreeSelection" id="treeview-selection1"/>
+                </child>
                 <child>
                   <object class="GtkTreeViewColumn" id="IDColumn">
                     <property name="title">Tool ID</property>
@@ -89,16 +81,20 @@
             </child>
           </object>
           <packing>
+            <property name="expand">True</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkVBox" id="vbox16">
+          <object class="GtkBox" id="box16">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="orientation">vertical</property>
             <child>
-              <object class="GtkVButtonBox" id="vbuttonbox1">
+              <object class="GtkButtonBox" id="buttonbox1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="orientation">vertical</property>
                 <property name="layout_style">center</property>
                 <child>
@@ -159,6 +155,8 @@
                 </child>
               </object>
               <packing>
+                <property name="expand">False</property>
+                <property name="fill">True</property>
                 <property name="position">0</property>
               </packing>
             </child>
@@ -181,6 +179,7 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
@@ -191,32 +190,38 @@
       </packing>
     </child>
     <child>
-      <object class="GtkVBox" id="ToolSettingsControlsBox">
+      <object class="GtkBox" id="ToolSettingsControlsBox">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="orientation">vertical</property>
         <property name="spacing">4</property>
         <child>
           <object class="GtkAlignment" id="ToolSelectorBox">
             <property name="visible">True</property>
+            <property name="can_focus">False</property>
             <property name="xscale">0</property>
             <property name="yscale">0</property>
             <child>
-              <object class="GtkHBox" id="hbox1">
+              <object class="GtkBox" id="box1">
                 <property name="visible">True</property>
+                <property name="can_focus">False</property>
                 <property name="spacing">3</property>
                 <child>
                   <object class="GtkLabel" id="label1">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="label" translatable="yes">Tool shape:</property>
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">0</property>
                   </packing>
                 </child>
                 <child>
                   <object class="GtkComboBox" id="ToolShapeSelector">
                     <property name="visible">True</property>
+                    <property name="can_focus">False</property>
                     <property name="model">ToolShapeList</property>
                     <child>
                       <object class="GtkCellRendererText" id="cellrenderertext1"/>
@@ -227,6 +232,7 @@
                   </object>
                   <packing>
                     <property name="expand">False</property>
+                    <property name="fill">True</property>
                     <property name="position">1</property>
                   </packing>
                 </child>
@@ -235,19 +241,33 @@
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">0</property>
           </packing>
         </child>
         <child>
-          <object class="GtkHBox" id="ToolParameterBox">
+          <object class="GtkAlignment">
             <property name="visible">True</property>
-            <property name="spacing">5</property>
+            <property name="can_focus">False</property>
+            <property name="top_padding">10</property>
+            <property name="bottom_padding">10</property>
+            <property name="left_padding">10</property>
+            <property name="right_padding">10</property>
             <child>
-              <placeholder/>
+              <object class="GtkBox" id="ToolParameterBox">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="orientation">vertical</property>
+                <property name="spacing">5</property>
+                <child>
+                  <placeholder/>
+                </child>
+              </object>
             </child>
           </object>
           <packing>
             <property name="expand">False</property>
+            <property name="fill">True</property>
             <property name="position">1</property>
           </packing>
         </child>
@@ -258,4 +278,14 @@
       </packing>
     </child>
   </object>
+  <object class="GtkAdjustment" id="tooldiameter">
+    <property name="lower">0.0001</property>
+    <property name="upper">500</property>
+    <property name="step_increment">0.10000000000000001</property>
+  </object>
+  <object class="GtkAdjustment" id="torusdiameter">
+    <property name="lower">0.0001</property>
+    <property name="upper">500</property>
+    <property name="step_increment">0.050000000000000003</property>
+  </object>
 </interface>
diff --git a/share/ui/units.ui b/share/ui/units.ui
index 98b4835..7aa8e86 100644
--- a/share/ui/units.ui
+++ b/share/ui/units.ui
@@ -1,7 +1,209 @@
-<?xml version="1.0"?>
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Generated with glade 3.18.3 -->
 <interface>
-  <!-- interface-requires gtk+ 2.12 -->
-  <!-- interface-naming-policy project-wide -->
+  <requires lib="gtk+" version="3.12"/>
+  <object class="GtkDialog" id="UnitChangeDialog">
+    <property name="can_focus">False</property>
+    <property name="border_width">5</property>
+    <property name="title" translatable="yes">Unit change compensation</property>
+    <property name="role">pycam-units</property>
+    <property name="modal">True</property>
+    <property name="icon_name">accessories-calculator</property>
+    <property name="type_hint">normal</property>
+    <child internal-child="vbox">
+      <object class="GtkBox" id="dialog-box7">
+        <property name="visible">True</property>
+        <property name="can_focus">False</property>
+        <property name="orientation">vertical</property>
+        <property name="spacing">2</property>
+        <child internal-child="action_area">
+          <object class="GtkButtonBox" id="dialog-action_area5">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="layout_style">end</property>
+            <child>
+              <placeholder/>
+            </child>
+            <child>
+              <object class="GtkButton" id="UnitChangeApply">
+                <property name="label">gtk-apply</property>
+                <property name="visible">True</property>
+                <property name="can_focus">True</property>
+                <property name="receives_default">True</property>
+                <property name="use_stock">True</property>
+              </object>
+              <packing>
+                <property name="expand">False</property>
+                <property name="fill">False</property>
+                <property name="position">1</property>
+              </packing>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">False</property>
+            <property name="pack_type">end</property>
+            <property name="position">0</property>
+          </packing>
+        </child>
+        <child>
+          <object class="GtkFrame" id="UnitChangeFrame">
+            <property name="visible">True</property>
+            <property name="can_focus">False</property>
+            <property name="label_xalign">0</property>
+            <property name="shadow_type">none</property>
+            <child>
+              <object class="GtkAlignment" id="alignment28">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="left_padding">12</property>
+                <child>
+                  <object class="GtkBox" id="box24">
+                    <property name="visible">True</property>
+                    <property name="can_focus">False</property>
+                    <property name="orientation">vertical</property>
+                    <child>
+                      <object class="GtkLabel" id="UnitChangeHelpLabel">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <property name="label" translatable="yes">Switching the unit size causes a change of the real world size of the various dimensions within PyCAM.
+This change can be compensated by applying the unit conversion factor to the current dimensions.
+Any selected group of dimensions will be scaled accordingly.</property>
+                        <property name="wrap">True</property>
+                        <property name="width_chars">40</property>
+                        <property name="xalign">0</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">0</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkCheckButton" id="UnitChangeModel">
+                        <property name="label" translatable="yes">Model</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
+                        <property name="draw_indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">1</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkCheckButton" id="UnitChangeTools">
+                        <property name="label" translatable="yes">Tools</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
+                        <property name="draw_indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">2</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkCheckButton" id="UnitChangeProcesses">
+                        <property name="label" translatable="yes">Processes</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
+                        <property name="draw_indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">3</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkCheckButton" id="UnitChangeBounds">
+                        <property name="label" translatable="yes">Bounds</property>
+                        <property name="visible">True</property>
+                        <property name="can_focus">True</property>
+                        <property name="receives_default">False</property>
+                        <property name="xalign">0.5</property>
+                        <property name="draw_indicator">True</property>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="position">4</property>
+                      </packing>
+                    </child>
+                    <child>
+                      <object class="GtkButtonBox" id="buttonbox2">
+                        <property name="visible">True</property>
+                        <property name="can_focus">False</property>
+                        <child>
+                          <object class="GtkButton" id="UnitChangeSelectAll">
+                            <property name="label">gtk-select-all</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="receives_default">True</property>
+                            <property name="use_stock">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">False</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkButton" id="UnitChangeSelectNone">
+                            <property name="label">gtk-clear</property>
+                            <property name="visible">True</property>
+                            <property name="can_focus">True</property>
+                            <property name="receives_default">True</property>
+                            <property name="use_stock">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">False</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">True</property>
+                        <property name="padding">4</property>
+                        <property name="position">5</property>
+                      </packing>
+                    </child>
+                  </object>
+                </child>
+              </object>
+            </child>
+            <child type="label">
+              <object class="GtkLabel" id="UnitChangeFrameLabel">
+                <property name="visible">True</property>
+                <property name="can_focus">False</property>
+                <property name="label" translatable="yes">&lt;b&gt;Change of unit size&lt;/b&gt;</property>
+                <property name="use_markup">True</property>
+              </object>
+            </child>
+          </object>
+          <packing>
+            <property name="expand">False</property>
+            <property name="fill">True</property>
+            <property name="position">1</property>
+          </packing>
+        </child>
+      </object>
+    </child>
+    <action-widgets>
+      <action-widget response="0">UnitChangeApply</action-widget>
+    </action-widgets>
+  </object>
   <object class="GtkListStore" id="UnitModel">
     <columns>
       <!-- column-name name -->
@@ -16,21 +218,26 @@
       </row>
     </data>
   </object>
-  <object class="GtkHBox" id="UnitPrefBox">
+  <object class="GtkBox" id="UnitPrefBox">
     <property name="visible">True</property>
+    <property name="can_focus">False</property>
     <child>
       <object class="GtkLabel" id="UnitLabel">
         <property name="visible">True</property>
-        <property name="xalign">0</property>
+        <property name="can_focus">False</property>
         <property name="label" translatable="yes">Unit (for all dimensions):</property>
+        <property name="xalign">0</property>
       </object>
       <packing>
+        <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">0</property>
       </packing>
     </child>
     <child>
       <object class="GtkComboBox" id="unit_control">
         <property name="visible">True</property>
+        <property name="can_focus">False</property>
         <property name="model">UnitModel</property>
         <property name="active">0</property>
         <child>
@@ -41,6 +248,8 @@
         </child>
       </object>
       <packing>
+        <property name="expand">False</property>
+        <property name="fill">True</property>
         <property name="position">1</property>
       </packing>
     </child>
diff --git a/technical_details.txt b/technical_details.txt
index 09d7f69..8d7cba1 100644
--- a/technical_details.txt
+++ b/technical_details.txt
@@ -16,19 +16,18 @@ The PushCutter goes as follows:
 
 
 The PathAccumulator connects the cutter locations by cutting in between,
-it's usefull mainly for debugging
+it is useful mainly for debugging
 
 The SimpleCutter connects the cutter locations in an on-off (cut/don't cut) pattern,
-it's usefull only for debugging
+it is useful only for debugging
 
 The ZigZagCutter connects the cutter locations by cutting in between points,
 then come back along the next line in reverse direction.
-it's usefull mainly in combination with the DropCutter
+it is useful mainly in combination with the DropCutter
 
 The PolygonCutter extracts polygonial sections from the cutter scanlines,
 then cuts those in a zig-zag pattern
-it's usefull mainly in combination with the PushCutter
+it is useful mainly in combination with the PushCutter
 
 The ContourCutter extracts contours from the cutter scanlines,
-it's usefull only in combination with the PushCutter
-
+it is useful only in combination with the PushCutter
diff --git a/yaml_flow_example.yml b/yaml_flow_example.yml
new file mode 100644
index 0000000..fd22a96
--- /dev/null
+++ b/yaml_flow_example.yml
@@ -0,0 +1,248 @@
+---
+# example processing flow description (not implemented)
+
+models:
+        model1:
+                source:
+                        type: file
+                        location: samples/Box0.stl
+                transformations:
+                        - action: scale
+                          scale_target: factor
+                          axes:
+                                  x: 1.25
+                        - action: scale
+                          scale_target: factor
+                          axes: 0.7
+                        - action: scale
+                          scale_target: size
+                          axes:
+                                  x: 10
+                        - action: shift
+                          shift_target: distance
+                          axes:
+                                  x: -20
+                        - action: shift
+                          shift_target: align_max
+                          axes:
+                                  z: 0
+                        - action: shift
+                          shift_target: align_min
+                          axes: [10, 20, 0]
+                        - action: shift
+                          shift_target: center
+                          axes:
+                                  x: 50
+                        - action: rotate
+                          center: [10, 10, 0]
+                          vector: [0, 0, 1]
+                          angle: 90
+                        - action: projection
+                          center:
+                                  z: 0
+                          vector:
+                                  x: 0
+                                  y: 0
+                                  z: 1
+                        - action: multiply_matrix
+                          matrix:
+                                  - [1, 0, 0]
+                                  - [0, 1, 0]
+                                  - [0, 0, -1]
+        model2:
+                source:
+                        type: copy
+                        original: model1
+                transformations:
+                        - action: toggle_polygon_directions
+                        - action: revise_polygon_directions
+                        - action: extrude
+                          shape: bulge
+                          height: 1.0
+                          width: 2.3
+                          accuracy: 0.2
+        model2_support_grid:
+                source:
+                        type: support_bridges
+                        models:
+                                -  model1
+                        layout: grid
+                        grid:
+                                distances: {x: 10, y: 20}
+                                offsets:
+                                        x: [5, 10, 0]
+                                        y: [-5]
+                        shape:
+                                height: 2
+                                width: 1
+                                length: 10
+        model3:
+                source:
+                        type: url
+                        location: http://foo.example.org/baz.stl
+        model3_support_grid:
+                source:
+                        type: support_bridges
+                        models:
+                                -  model3
+                        layout: distributed
+                        distribution: corners
+                        minimum_count: 3
+                        average_distance: 4
+                        shape:
+                                height: 2
+                                width: 1
+                                length: 10
+
+tools:
+        tool1:
+                shape: flat_bottom
+                tool_id: 1
+                diameter: 3
+                feed: 300
+                spindle:
+                        spin_up_enabled: true
+                        spin_up_delay: 3
+                        speed: 1200
+
+processes:
+        process_slicing:
+                strategy: slice
+                path_pattern: grid
+                overlap: 0.10
+                step_down: 1.0
+                grid_direction: x
+                milling_style: ignore
+        process_engrave:
+                strategy: engrave
+                step_down: 1.0
+                trace_models:
+                        - model2
+
+bounds:
+        bounds1:
+                specification: absolute
+                lower:
+                        x: -10
+                        y: 0
+                        z: -5
+                upper:
+                        x: 30
+                        y: 20
+                        z: 0
+        bounds2:
+                specification: margins
+                reference_models:
+                        - model1
+                lower:
+                        x: 10%
+                        y: 10%
+                        z: 0
+                upper:
+                        x: 10%
+                        y: 10%
+                        z: 5
+
+tasks:
+        task1:
+                type: milling
+                tool: tool1
+                process: process_slicing
+                bounds: bounds1
+                collision_models:
+                        - model1
+        task2:
+                type: milling
+                tool: tool1
+                process: process_engrave
+                bounds: bounds2
+
+toolpaths:
+        toolpath1:
+                source:
+                        type: task
+                        item: task1
+                transformations:
+                        - action: crop
+                          lower:
+                                  x: 0
+                                  y: 0
+                          upper:
+                                  x: 30
+                                  y: 40
+                        - action: clone
+                          offset: [20, 110%, 0]
+                          clone_count: 1
+                        - action: shift
+                          shift_target: align_min
+                          axes:
+                                  x: 0
+                                  y: 0
+                        - action: shift
+                          shift_target: align_max
+                          axes: [null, null, 0]
+
+        toolpath2:
+                source:
+                        type: copy
+                        original: toolpath1
+                transformations:
+                        - action: clone
+                          offset:
+                                  x: 102%
+                          count: 5
+                        - action: clone
+                          offset:
+                                  y: 105%
+                          count: 3
+
+export_settings:
+        tp_settings1:
+                gcode:
+                        safety_height: 25
+                        plunge_feedrate: 50
+                        step_width:
+                                x: 0.1
+                                y: 0.1
+                                z: 0.1
+                        corner_style:
+                                mode: optimize_tolerance
+                                naive_tolerance: 0.1
+                                motion_tolerance: 0.05
+
+exports:
+        export1:
+                source:
+                        type: toolpath
+                        items:
+                                - toolpath1
+                format:
+                        type: gcode
+                        dialect: linuxcnc
+                        comment: Complete grid of 5x3 toolpaths.
+                        export_settings: tp_settings1
+                target:
+                        type: file
+                        location: grid_5x3.ngc
+        export2:
+                source:
+                        type: toolpath
+                        items:
+                                - toolpath1
+                                - toolpath2
+                format:
+                        type: preview_2d
+                        filetype: png
+                target:
+                        type: clipboard
+        export_support_model:
+                source:
+                        type: model
+                        models:
+                                - model1_support
+                format:
+                        type: model
+                        filetype: stl
+                target:
+                        type: file
+                        location: model1_support.stl
diff --git a/yaml_flow_working.yml b/yaml_flow_working.yml
new file mode 100644
index 0000000..7caef7b
--- /dev/null
+++ b/yaml_flow_working.yml
@@ -0,0 +1,189 @@
+---
+# currently implemented features
+# see "yaml_flow_example.yml" for a full format description (not fully implemented)
+
+models:
+        model1:
+                source:
+                        type: file
+                        location: samples/Box0.stl
+                transformations:
+                        - action: scale
+                          scale_target: factor
+                          axes:
+                                  x: 1.25
+                        - action: scale
+                          scale_target: factor
+                          axes: 0.7
+                        - action: scale
+                          scale_target: size
+                          axes:
+                                  x: 10
+                        - action: shift
+                          shift_target: distance
+                          axes:
+                                  x: -20
+                        - action: shift
+                          shift_target: align_max
+                          axes:
+                                  z: 0
+                        - action: shift
+                          shift_target: align_min
+                          axes: [10, 20, 0]
+                        - action: shift
+                          shift_target: center
+                          axes:
+                                  x: 50
+                        - action: rotate
+                          center: [10, 10, 0]
+                          vector: [0, 0, 1]
+                          angle: 90
+                        - action: multiply_matrix
+                          matrix:
+                                  - [1, 0, 0]
+                                  - [0, 1, 0]
+                                  - [0, 0, -1]
+        model1_support:
+                source:
+                        type: support_bridges
+                        models:
+                                -  model1
+                        layout: grid
+                        grid:
+                                distances: {x: 5, y: 7}
+                                offsets:
+                                        x: [1, 2, 0]
+                                        y: [-3]
+                        shape:
+                                height: 2
+                                width: 0.5
+                                length: 4
+        model2:
+                source:
+                        type: copy
+                        original: model1
+                transformations:
+                        - action: projection
+                          center: [0, 0, 2]
+                          vector:
+                                  x: 0
+                                  y: 0
+                                  z: 1
+                        - action: toggle_polygon_directions
+                        - action: revise_polygon_directions
+
+tools:
+        tool1:
+                shape: flat_bottom
+                diameter: 3
+                feed: 300
+                spindle:
+                        spin_up_enabled: true
+                        spin_up_delay: 3
+                        speed: 1200
+
+processes:
+        process_slicing:
+                strategy: slice
+                path_pattern: grid
+                overlap: 0.10
+                step_down: 1.0
+                grid_direction: x
+                milling_style: ignore
+        process_engrave:
+                strategy: engrave
+                step_down: 1.0
+                trace_models:
+                        - model2
+
+bounds:
+        bounds1:
+                specification: absolute
+                lower:
+                        x: -5
+                        y: -5
+                        z: 0
+                upper:
+                        x: 5
+                        y: 5
+                        z: 1
+                reference_models:
+                        - model1
+        bounds2:
+                specification: margins
+                lower: [2, 2, 2]
+                upper: [2, 2, 2]
+                reference_models:
+                        - model1
+
+tasks:
+        task1:
+                type: milling
+                tool: tool1
+                process: process_slicing
+                bounds: bounds1
+                collision_models:
+                        - model1
+                        - model1_support
+        task2:
+                type: milling
+                tool: tool1
+                process: process_engrave
+                bounds: bounds2
+
+
+toolpaths:
+        toolpath1:
+                source:
+                        type: task
+                        item: task1
+                transformations:
+                        - action: clone
+                          offset: [20, 0, 0]
+                          clone_count: 1
+                        - action: shift
+                          shift_target: align_min
+                          axes: [0, 0, null]
+                        - action: shift
+                          shift_target: align_max
+                          axes: [null, null, 0]
+
+export_settings:
+        tp_settings1:
+                gcode:
+                        safety_height: 25
+                        plunge_feedrate: 50
+                        step_width:
+                                x: 0.1
+                                y: 0.1
+                                z: 0.1
+                        corner_style:
+                                mode: optimize_tolerance
+                                naive_tolerance: 0.1
+                                motion_tolerance: 0.05
+
+exports:
+        export1:
+                format:
+                        type: gcode
+                        dialect: linuxcnc
+                        comment: Some GCode export
+                        export_settings: tp_settings1
+                source:
+                        type: toolpath
+                        items:
+                                - toolpath1
+                target:
+                        type: file
+                        location: test.ngc
+        export_support_model:
+                source:
+                        type: model
+                        items:
+                                - model1_support
+                format:
+                        type: model
+                        filetype: stl
+                target:
+                        type: file
+                        location: model1_support.stl
